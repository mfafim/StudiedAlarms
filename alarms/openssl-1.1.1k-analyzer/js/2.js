var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "DocHTML": "<div class=\"toc\">\n<ul>\n<li><a href=\"#description\">Description</a></li>\n<li><a href=\"#vulnerability-and-risk\">Vulnerability and Risk</a><ul>\n<li><a href=\"#dos-crash-exit-restart\">DoS / crash / exit / restart</a></li>\n<li><a href=\"#execute-unauthorized-code-or-commands\">Execute unauthorized code or commands</a></li>\n</ul>\n</li>\n<li><a href=\"#likelihood-of-exploit\">Likelihood of Exploit</a></li>\n<li><a href=\"#potential-mitigations\">Potential Mitigations</a></li>\n<li><a href=\"#demonstrative-examples\">Demonstrative Examples</a><ul>\n<li><a href=\"#vulnerable-code-example-1\">Vulnerable code Example 1</a></li>\n<li><a href=\"#fixed-code-example-1\">Fixed Code Example 1</a></li>\n<li><a href=\"#vulnerable-code-example-2\">Vulnerable code Example 2</a></li>\n<li><a href=\"#fixed-code-example-2\">Fixed code example 2</a></li>\n<li><a href=\"#vulnerable-code-example-3\">Vulnerable code Example 3</a></li>\n<li><a href=\"#fixed-code-example-3\">Fixed code example 3</a></li>\n</ul>\n</li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n</div>\n\n  <div>\n    \n<h1 id=\"description\">Description</h1>\n<p>An attempt to access data using a null pointer causes a runtime error. When a program dereferences a pointer that is expected to be valid but turns out to be null, a null pointer dereference occurs. Null-pointer dereference defects often occur due to ineffective error handling or race conditions, and typically cause abnormal program termination. Before a pointer is dereferenced in C/C++ code, it must be checked to confirm that it is not equal to null.</p>\n<h1 id=\"vulnerability-and-risk\">Vulnerability and Risk</h1>\n<h4 id=\"dos-crash-exit-restart\">DoS / crash / exit / restart</h4>\n<p>NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.</p>\n<h4 id=\"execute-unauthorized-code-or-commands\">Execute unauthorized code or commands</h4>\n<p>In very rare circumstances and environments, code execution is possible.</p>\n<h1 id=\"likelihood-of-exploit\">Likelihood of Exploit</h1>\n<p>Critical</p>\n<h1 id=\"potential-mitigations\">Potential Mitigations</h1>\n<ul>\n<li>Check for a null value in the results of all functions that return values</li>\n<li>Make sure all external inputs are validated</li>\n<li>Explicitly initialize variables</li>\n<li>Make sure that unusual exceptions are handled correctly</li>\n</ul>\n<h1 id=\"demonstrative-examples\">Demonstrative Examples</h1>\n<h3 id=\"vulnerable-code-example-1\">Vulnerable code Example 1</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">reassign</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">goodEnough</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"o\">*</span><span class=\"n\">argument</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">npd_check_call_must</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">getValue</span><span class=\"p\">();</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">reassign</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>Although *p is checked for null at line 8, it's then passed to function reassign, in which it is dereferenced without being checked for null. This type of vulnerability can produce unexpected and unintended results.</p>\n<h3 id=\"fixed-code-example-1\">Fixed Code Example 1</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">reassign</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">goodEnough</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"o\">*</span><span class=\"n\">argument</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">npd_check_call_must</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">getValue</span><span class=\"p\">();</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">reassign</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>In the fixed version of the code, a second check for null has been put in line 11.</p>\n<h3 id=\"vulnerable-code-example-2\">Vulnerable code Example 2</h3>\n<p>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</p>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">host_lookup</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">){</span>\n  <span class=\"k\">struct</span> <span class=\"n\">hostent</span> <span class=\"o\">*</span><span class=\"n\">hp</span><span class=\"p\">;</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"o\">*</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">hostname</span><span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">];</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// routine that ensures user_supplied_addr is in the right format for conversion </span>\n  <span class=\"n\">validate_addr_form</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">hp</span> <span class=\"o\">=</span> <span class=\"n\">gethostbyaddr</span><span class=\"p\">(</span> <span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">),</span> <span class=\"n\">AF_INET</span><span class=\"p\">);</span>\n  <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"n\">hp</span><span class=\"o\">-&gt;</span><span class=\"n\">h_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr, a NULL pointer dereference would then occur in the call to strcpy().</p>\n<h3 id=\"fixed-code-example-2\">Fixed code example 2</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">host_lookup</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">){</span>\n  <span class=\"k\">struct</span> <span class=\"n\">hostent</span> <span class=\"o\">*</span><span class=\"n\">hp</span><span class=\"p\">;</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"o\">*</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">hostname</span><span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">];</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// routine that ensures user_supplied_addr is in the right format for conversion </span>\n  <span class=\"n\">validate_addr_form</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">hp</span> <span class=\"o\">=</span> <span class=\"n\">gethostbyaddr</span><span class=\"p\">(</span> <span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">),</span> <span class=\"n\">AF_INET</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">hp</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"n\">hp</span><span class=\"o\">-&gt;</span><span class=\"n\">h_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>In the fixed version of the code, another null check was added on line 11.</p>\n<h3 id=\"vulnerable-code-example-3\">Vulnerable code Example 3</h3>\n<p>This java example illustrates missing check of returned value might lead to crash of a program.</p>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Example</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">File</span> <span class=\"n\">file</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"n\">FileReader</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileReader</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"o\">[(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">io</span><span class=\"o\">.</span><span class=\"na\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">String</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n    <span class=\"c1\">// config might be null. If so, main exits.</span>\n    <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\\n\"</span><span class=\"o\">);</span>\n    <span class=\"o\">...</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</td></tr></table>\n<h3 id=\"fixed-code-example-3\">Fixed code example 3</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Example</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">File</span> <span class=\"n\">file</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"n\">FileReader</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileReader</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"o\">[(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">io</span><span class=\"o\">.</span><span class=\"na\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">String</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Can't read config from \"</span> <span class=\"o\">+</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n      <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">exit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\\n\"</span><span class=\"o\">);</span>\n    <span class=\"o\">...</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</td></tr></table>\n<h1 id=\"references\">References</h1>\n<div class=\"footnote\">\n<hr>\n<ol>\n<li id=\"fn-CWE\">\n<p>https://cwe.mitre.org/data/definitions/476.html\u00a0<a class=\"footnote-backref\" href=\"#fnref-CWE\" title=\"Jump back to footnote 1 in the text\">\u21a9</a></p>\n</li>\n<li id=\"fn-CERT1\">\n<p>https://wiki.sei.cmu.edu/confluence/display/c/EXP34-C.+Do+not+dereference+null+pointers\u00a0<a class=\"footnote-backref\" href=\"#fnref-CERT1\" title=\"Jump back to footnote 2 in the text\">\u21a9</a></p>\n</li>\n<li id=\"fn-CERT2\">\n<p>https://wiki.sei.cmu.edu/confluence/display/java/EXP00-J.+Do+not+ignore+values+returned+by+methods\u00a0<a class=\"footnote-backref\" href=\"#fnref-CERT2\" title=\"Jump back to footnote 3 in the text\">\u21a9</a></p>\n</li>\n</ol>\n</div>\n  </div>\n  ", "CaseList": [{"HashID": "ff6be8167fbbc192bb1b7fb4ba673817", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 1252, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>crl_issuer</b> (<b>crl_issuer</b> can be null)", "SrcLines": ["    int i;", "", "    if (cidx != sk_X509_num(ctx->chain) - 1)", "        cidx++;", "", "    crl_issuer = sk_X509_value(ctx->chain, cidx);", "", "    if (X509_check_akid(crl_issuer, crl->akid) == X509_V_OK) {", "        if (*pcrl_score & CRL_SCORE_ISSUER_NAME) {", "            *pcrl_score |= CRL_SCORE_AKID | CRL_SCORE_ISSUER_CERT;"], "SrcStart": 1247}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 1254, "Tip": "<b>crl_issuer</b> is used as the 1st parameter in function <b>X509_check_akid</b> (<b>crl_issuer</b> can be null)", "SrcLines": ["    if (cidx != sk_X509_num(ctx->chain) - 1)", "        cidx++;", "", "    crl_issuer = sk_X509_value(ctx->chain, cidx);", "", "    if (X509_check_akid(crl_issuer, crl->akid) == X509_V_OK) {", "        if (*pcrl_score & CRL_SCORE_ISSUER_NAME) {", "            *pcrl_score |= CRL_SCORE_AKID | CRL_SCORE_ISSUER_CERT;", "            *pissuer = crl_issuer;", "            return;"], "SrcStart": 1249}, {"FileMD5": "c1d07122801b927b8b3769e6b29a0184.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 891, "Tip": "<b>issuer</b> is used as the 1st parameter in function <b>X509_get_serialNumber</b> (<b>issuer</b> can be null)", "SrcLines": ["    if (akid->keyid && issuer->skid &&", "        ASN1_OCTET_STRING_cmp(akid->keyid, issuer->skid))", "        return X509_V_ERR_AKID_SKID_MISMATCH;", "    /* Check serial number */", "    if (akid->serial &&", "        ASN1_INTEGER_cmp(X509_get_serialNumber(issuer), akid->serial))", "        return X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH;", "    /* Check issuer name */", "    if (akid->issuer) {", "        /*"], "SrcStart": 886}, {"FileMD5": "7c9e4de7e709d5101ccb55eeaa778475.c", "FileName": "crypto/x509/x509_cmp.c", "Line": 108, "Tip": "Return <b>&amp;(a-&gt;cert_info.serialNumber)</b> to caller (The return value can be null)", "SrcLines": ["    return a->cert_info.subject;", "}", "", "ASN1_INTEGER *X509_get_serialNumber(X509 *a)", "{", "    return &a->cert_info.serialNumber;", "}", "", "const ASN1_INTEGER *X509_get0_serialNumber(const X509 *a)", "{"], "SrcStart": 103}, {"FileMD5": "c1d07122801b927b8b3769e6b29a0184.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 891, "Tip": "The return value of function <b>X509_get_serialNumber</b> is used as the 1st parameter in function <b>ASN1_INTEGER_cmp</b> (the return value of function <b>X509_get_serialNumber</b> can be null)", "SrcLines": ["    if (akid->keyid && issuer->skid &&", "        ASN1_OCTET_STRING_cmp(akid->keyid, issuer->skid))", "        return X509_V_ERR_AKID_SKID_MISMATCH;", "    /* Check serial number */", "    if (akid->serial &&", "        ASN1_INTEGER_cmp(X509_get_serialNumber(issuer), akid->serial))", "        return X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH;", "    /* Check issuer name */", "    if (akid->issuer) {", "        /*"], "SrcStart": 886}, {"FileMD5": "ff5962f0f7f81a96c94e138aaef8eeab.c", "FileName": "crypto/asn1/a_int.c", "Line": 27, "Tip": "Load value from <b>x-&gt;type</b>", "SrcLines": ["", "int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)", "{", "    int neg, ret;", "    /* Compare signs */", "    neg = x->type & V_ASN1_NEG;", "    if (neg != (y->type & V_ASN1_NEG)) {", "        if (neg)", "            return -1;", "        else"], "SrcStart": 22}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/a_int.c", "Line": 27}, {"HashID": "fd8e9b231eae306f0645292b6e0810c3", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "807e5f7b3e35593aa3945011daf33e3a.c", "FileName": "crypto/asn1/tasn_fre.c", "Line": 207, "Tip": "Store <b>null</b> to <b>pval</b>", "SrcLines": ["", "    default:", "        asn1_string_embed_free((ASN1_STRING *)*pval, embed);", "        break;", "    }", "    *pval = NULL;", "}"], "SrcStart": 202}, {"FileMD5": "807e5f7b3e35593aa3945011daf33e3a.c", "FileName": "crypto/asn1/tasn_fre.c", "Line": 147, "Tip": "Program reaches the return point, modifying the value <b>*(pval)</b> to null", "SrcLines": ["        asn1_item_embed_free(pval, ASN1_ITEM_ptr(tt->item), embed);", "    }", "}", "", "void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int embed)", "{", "    int utype;", "", "    /* Special case: if 'it' is a primitive with a free_func, use that. */", "    if (it) {"], "SrcStart": 142}, {"FileMD5": "ef9f23b9c548980f625150c0c08931e7.c", "FileName": "crypto/asn1/a_type.c", "Line": 32, "Tip": "Function <b>asn1_primitive_free</b> modifies the value <b>*(a)</b> to null, where <b>a</b> is used as the 1st parameter (<b>pval</b>)", "SrcLines": ["{", "    if (a->type != V_ASN1_BOOLEAN", "            && a->type != V_ASN1_NULL", "            && a->value.ptr != NULL) {", "        ASN1_TYPE **tmp_a = &a;", "        asn1_primitive_free((ASN1_VALUE **)tmp_a, NULL, 0);", "    }", "    a->type = type;", "    if (type == V_ASN1_BOOLEAN)", "        a->value.boolean = value ? 0xff : 0;"], "SrcStart": 27}, {"FileMD5": "ef9f23b9c548980f625150c0c08931e7.c", "FileName": "crypto/asn1/a_type.c", "Line": 36, "Tip": "Load value from <b>a</b>", "SrcLines": ["        ASN1_TYPE **tmp_a = &a;", "        asn1_primitive_free((ASN1_VALUE **)tmp_a, NULL, 0);", "    }", "    a->type = type;", "    if (type == V_ASN1_BOOLEAN)", "        a->value.boolean = value ? 0xff : 0;", "    else", "        a->value.ptr = value;", "}", ""], "SrcStart": 31}, {"FileMD5": "ef9f23b9c548980f625150c0c08931e7.c", "FileName": "crypto/asn1/a_type.c", "Line": 36, "Tip": "Store <b>((value!=null)?255:0)</b> to <b>a-&gt;value</b>", "SrcLines": ["        ASN1_TYPE **tmp_a = &a;", "        asn1_primitive_free((ASN1_VALUE **)tmp_a, NULL, 0);", "    }", "    a->type = type;", "    if (type == V_ASN1_BOOLEAN)", "        a->value.boolean = value ? 0xff : 0;", "    else", "        a->value.ptr = value;", "}", ""], "SrcStart": 31}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/a_type.c", "Line": 36}, {"HashID": "85dd58bbb9afd94575b0f64171d4bda7", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "807e5f7b3e35593aa3945011daf33e3a.c", "FileName": "crypto/asn1/tasn_fre.c", "Line": 207, "Tip": "Store <b>null</b> to <b>pval</b>", "SrcLines": ["", "    default:", "        asn1_string_embed_free((ASN1_STRING *)*pval, embed);", "        break;", "    }", "    *pval = NULL;", "}"], "SrcStart": 202}, {"FileMD5": "807e5f7b3e35593aa3945011daf33e3a.c", "FileName": "crypto/asn1/tasn_fre.c", "Line": 147, "Tip": "Program reaches the return point, modifying the value <b>*(pval)</b> to null", "SrcLines": ["        asn1_item_embed_free(pval, ASN1_ITEM_ptr(tt->item), embed);", "    }", "}", "", "void asn1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it, int embed)", "{", "    int utype;", "", "    /* Special case: if 'it' is a primitive with a free_func, use that. */", "    if (it) {"], "SrcStart": 142}, {"FileMD5": "ef9f23b9c548980f625150c0c08931e7.c", "FileName": "crypto/asn1/a_type.c", "Line": 32, "Tip": "Function <b>asn1_primitive_free</b> modifies the value <b>*(a)</b> to null, where <b>a</b> is used as the 1st parameter (<b>pval</b>)", "SrcLines": ["{", "    if (a->type != V_ASN1_BOOLEAN", "            && a->type != V_ASN1_NULL", "            && a->value.ptr != NULL) {", "        ASN1_TYPE **tmp_a = &a;", "        asn1_primitive_free((ASN1_VALUE **)tmp_a, NULL, 0);", "    }", "    a->type = type;", "    if (type == V_ASN1_BOOLEAN)", "        a->value.boolean = value ? 0xff : 0;"], "SrcStart": 27}, {"FileMD5": "ef9f23b9c548980f625150c0c08931e7.c", "FileName": "crypto/asn1/a_type.c", "Line": 38, "Tip": "Load value from <b>a</b>", "SrcLines": ["    }", "    a->type = type;", "    if (type == V_ASN1_BOOLEAN)", "        a->value.boolean = value ? 0xff : 0;", "    else", "        a->value.ptr = value;", "}", "", "int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)", "{"], "SrcStart": 33}, {"FileMD5": "ef9f23b9c548980f625150c0c08931e7.c", "FileName": "crypto/asn1/a_type.c", "Line": 38, "Tip": "Store <b>value</b> to <b>a-&gt;value</b>", "SrcLines": ["    }", "    a->type = type;", "    if (type == V_ASN1_BOOLEAN)", "        a->value.boolean = value ? 0xff : 0;", "    else", "        a->value.ptr = value;", "}", "", "int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)", "{"], "SrcStart": 33}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/a_type.c", "Line": 38}, {"HashID": "4dd517e4455074268cbf514aee29518e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 2799, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>cert</b> (<b>cert</b> can be null)", "SrcLines": ["static int check_dane_pkeys(X509_STORE_CTX *ctx)", "{", "    SSL_DANE *dane = ctx->dane;", "    danetls_record *t;", "    int num = ctx->num_untrusted;", "    X509 *cert = sk_X509_value(ctx->chain, num - 1);", "    int recnum = sk_danetls_record_num(dane->trecs);", "    int i;", "", "    for (i = 0; i < recnum; ++i) {"], "SrcStart": 2794}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 2808, "Tip": "<b>cert</b> is used as the 1st parameter in function <b>X509_verify</b> (<b>cert</b> can be null)", "SrcLines": ["    for (i = 0; i < recnum; ++i) {", "        t = sk_danetls_record_value(dane->trecs, i);", "        if (t->usage != DANETLS_USAGE_DANE_TA ||", "            t->selector != DANETLS_SELECTOR_SPKI ||", "            t->mtype != DANETLS_MATCHING_FULL ||", "            X509_verify(cert, t->spki) <= 0)", "            continue;", "", "        /* Clear any PKIX-?? matches that failed to extend to a full chain */", "        X509_free(dane->mcert);"], "SrcStart": 2803}, {"FileMD5": "9dbdecc082c03073ada312cb83df9c1d.c", "FileName": "crypto/x509/x_all.c", "Line": 26, "Tip": "<b>&amp;(a-&gt;sig_alg)</b> is used as the 2nd parameter in function <b>ASN1_item_verify</b> (<b>&amp;(a-&gt;sig_alg)</b> can be null)", "SrcLines": ["", "int X509_verify(X509 *a, EVP_PKEY *r)", "{", "    if (X509_ALGOR_cmp(&a->sig_alg, &a->cert_info.signature))", "        return 0;", "    return (ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), &a->sig_alg,", "                             &a->signature, &a->cert_info, r));", "}", "", "int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)"], "SrcStart": 21}, {"FileMD5": "8c483ab9e2707acf8de280cf98fb674a.c", "FileName": "crypto/asn1/a_verify.c", "Line": 114, "Tip": "Load value from <b>a-&gt;algorithm</b>", "SrcLines": ["        ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ERR_R_MALLOC_FAILURE);", "        goto err;", "    }", "", "    /* Convert signature OID into digest and public key OIDs */", "    if (!OBJ_find_sigid_algs(OBJ_obj2nid(a->algorithm), &mdnid, &pknid)) {", "        ASN1err(ASN1_F_ASN1_ITEM_VERIFY, ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM);", "        goto err;", "    }", "    if (mdnid == NID_undef) {"], "SrcStart": 109}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/a_verify.c", "Line": 114}, {"HashID": "ef62a4db6e3742d037953b30eb5d4687", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2ef7ccc362eca54de19b79c6f0865f77.c", "FileName": "crypto/x509/x509_v3.c", "Line": 226, "Tip": "Return <b>null</b> to caller", "SrcLines": ["ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ex)", "{", "    if (ex == NULL)", "        return NULL;", "    return &ex->value;", "}", "", "int X509_EXTENSION_get_critical(const X509_EXTENSION *ex)", "{", "    if (ex == NULL)"], "SrcStart": 221}, {"FileMD5": "16ec781df201e9b2b237bda60d37dea3.c", "FileName": "crypto/x509v3/v3_prn.c", "Line": 81, "Tip": "Function <b>X509_EXTENSION_get_data</b> executes and stores the return value to <b>extoct</b> (<b>extoct</b> can be null)", "SrcLines": ["    int extlen;", "    const X509V3_EXT_METHOD *method;", "    STACK_OF(CONF_VALUE) *nval = NULL;", "    int ok = 1;", "", "    extoct = X509_EXTENSION_get_data(ext);", "    p = ASN1_STRING_get0_data(extoct);", "    extlen = ASN1_STRING_length(extoct);", "", "    if ((method = X509V3_EXT_get(ext)) == NULL)"], "SrcStart": 76}, {"FileMD5": "16ec781df201e9b2b237bda60d37dea3.c", "FileName": "crypto/x509v3/v3_prn.c", "Line": 83, "Tip": "<b>extoct</b> is used as the 1st parameter in function <b>ASN1_STRING_length</b> (<b>extoct</b> can be null)", "SrcLines": ["    STACK_OF(CONF_VALUE) *nval = NULL;", "    int ok = 1;", "", "    extoct = X509_EXTENSION_get_data(ext);", "    p = ASN1_STRING_get0_data(extoct);", "    extlen = ASN1_STRING_length(extoct);", "", "    if ((method = X509V3_EXT_get(ext)) == NULL)", "        return unknown_ext_print(out, p, extlen, flag, indent, 0);", "    if (method->it)"], "SrcStart": 78}, {"FileMD5": "0caead64a0afaf4a72adc455cab2aa28.c", "FileName": "crypto/asn1/asn1_lib.c", "Line": 379, "Tip": "Load value from <b>x-&gt;length</b>", "SrcLines": ["        return i;", "}", "", "int ASN1_STRING_length(const ASN1_STRING *x)", "{", "    return x->length;", "}", "", "void ASN1_STRING_length_set(ASN1_STRING *x, int len)", "{"], "SrcStart": 374}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/asn1_lib.c", "Line": 379}, {"HashID": "9ceb8b89c7cac761eff6199ecde53733", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2ef7ccc362eca54de19b79c6f0865f77.c", "FileName": "crypto/x509/x509_v3.c", "Line": 226, "Tip": "Return <b>null</b> to caller", "SrcLines": ["ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ex)", "{", "    if (ex == NULL)", "        return NULL;", "    return &ex->value;", "}", "", "int X509_EXTENSION_get_critical(const X509_EXTENSION *ex)", "{", "    if (ex == NULL)"], "SrcStart": 221}, {"FileMD5": "16ec781df201e9b2b237bda60d37dea3.c", "FileName": "crypto/x509v3/v3_prn.c", "Line": 81, "Tip": "Function <b>X509_EXTENSION_get_data</b> executes and stores the return value to <b>extoct</b> (<b>extoct</b> can be null)", "SrcLines": ["    int extlen;", "    const X509V3_EXT_METHOD *method;", "    STACK_OF(CONF_VALUE) *nval = NULL;", "    int ok = 1;", "", "    extoct = X509_EXTENSION_get_data(ext);", "    p = ASN1_STRING_get0_data(extoct);", "    extlen = ASN1_STRING_length(extoct);", "", "    if ((method = X509V3_EXT_get(ext)) == NULL)"], "SrcStart": 76}, {"FileMD5": "16ec781df201e9b2b237bda60d37dea3.c", "FileName": "crypto/x509v3/v3_prn.c", "Line": 82, "Tip": "<b>extoct</b> is used as the 1st parameter in function <b>ASN1_STRING_get0_data</b> (<b>extoct</b> can be null)", "SrcLines": ["    const X509V3_EXT_METHOD *method;", "    STACK_OF(CONF_VALUE) *nval = NULL;", "    int ok = 1;", "", "    extoct = X509_EXTENSION_get_data(ext);", "    p = ASN1_STRING_get0_data(extoct);", "    extlen = ASN1_STRING_length(extoct);", "", "    if ((method = X509V3_EXT_get(ext)) == NULL)", "        return unknown_ext_print(out, p, extlen, flag, indent, 0);"], "SrcStart": 77}, {"FileMD5": "0caead64a0afaf4a72adc455cab2aa28.c", "FileName": "crypto/asn1/asn1_lib.c", "Line": 394, "Tip": "Load value from <b>x-&gt;data</b>", "SrcLines": ["    return x->type;", "}", "", "const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x)", "{", "    return x->data;", "}", "", "# if OPENSSL_API_COMPAT < 0x10100000L", "unsigned char *ASN1_STRING_data(ASN1_STRING *x)"], "SrcStart": 389}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/asn1_lib.c", "Line": 394}, {"HashID": "13e213187a6fec791b8fc38ca624d2bd", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "fbdf1a427a6b70efe081f50ba9c2ee57.h", "FileName": "include/openssl/asn1.h", "Line": 119, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["# define MBSTRING_UNIV           (MBSTRING_FLAG|4)", "# define SMIME_OLDMIME           0x400", "# define SMIME_CRLFEOL           0x800", "# define SMIME_STREAM            0x1000", "    struct X509_algor_st;", "DEFINE_STACK_OF(X509_ALGOR)", "", "# define ASN1_STRING_FLAG_BITS_LEFT 0x08/* Set if 0x07 has bits left value */", "/*", " * This indicates that the ASN1_STRING is not a real value but just a place"], "SrcStart": 114}, {"FileMD5": "ea1fc5af4400615bc9fd52ae4af80773.c", "FileName": "crypto/cms/cms_sd.c", "Line": 788, "Tip": "Function <b>sk_X509_ALGOR_value</b> executes and stores the return value to <b>digestAlgorithm</b> (<b>digestAlgorithm</b> can be null)", "SrcLines": ["    if (cms->d.signedData->encapContentInfo->partial)", "        cms_sd_set_version(sd);", "    for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++) {", "        X509_ALGOR *digestAlgorithm;", "        BIO *mdbio;", "        digestAlgorithm = sk_X509_ALGOR_value(sd->digestAlgorithms, i);", "        mdbio = cms_DigestAlgorithm_init_bio(digestAlgorithm);", "        if (!mdbio)", "            goto err;", "        if (chain)"], "SrcStart": 783}, {"FileMD5": "ea1fc5af4400615bc9fd52ae4af80773.c", "FileName": "crypto/cms/cms_sd.c", "Line": 789, "Tip": "<b>digestAlgorithm</b> is used as the 1st parameter in function <b>cms_DigestAlgorithm_init_bio</b> (<b>digestAlgorithm</b> can be null)", "SrcLines": ["        cms_sd_set_version(sd);", "    for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++) {", "        X509_ALGOR *digestAlgorithm;", "        BIO *mdbio;", "        digestAlgorithm = sk_X509_ALGOR_value(sd->digestAlgorithms, i);", "        mdbio = cms_DigestAlgorithm_init_bio(digestAlgorithm);", "        if (!mdbio)", "            goto err;", "        if (chain)", "            BIO_push(chain, mdbio);"], "SrcStart": 784}, {"FileMD5": "771c6d725fc643b31b9dcf5f86e2cad5.c", "FileName": "crypto/cms/cms_lib.c", "Line": 292, "Tip": "<b>digestAlgorithm</b> is used as the 4th parameter in function <b>X509_ALGOR_get0</b> (<b>digestAlgorithm</b> can be null)", "SrcLines": ["BIO *cms_DigestAlgorithm_init_bio(X509_ALGOR *digestAlgorithm)", "{", "    BIO *mdbio = NULL;", "    const ASN1_OBJECT *digestoid;", "    const EVP_MD *digest;", "    X509_ALGOR_get0(&digestoid, NULL, NULL, digestAlgorithm);", "    digest = EVP_get_digestbyobj(digestoid);", "    if (!digest) {", "        CMSerr(CMS_F_CMS_DIGESTALGORITHM_INIT_BIO,", "               CMS_R_UNKNOWN_DIGEST_ALGORITHM);"], "SrcStart": 287}, {"FileMD5": "c9d2a1fa8ed1a3049712923e396309c2.c", "FileName": "crypto/asn1/x_algor.c", "Line": 58, "Tip": "Load value from <b>algor-&gt;algorithm</b>", "SrcLines": ["", "void X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,", "                     const void **ppval, const X509_ALGOR *algor)", "{", "    if (paobj)", "        *paobj = algor->algorithm;", "    if (pptype) {", "        if (algor->parameter == NULL) {", "            *pptype = V_ASN1_UNDEF;", "            return;"], "SrcStart": 53}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/x_algor.c", "Line": 58}, {"HashID": "914fad5181754f01e907786778045fb9", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 2799, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>cert</b> (<b>cert</b> can be null)", "SrcLines": ["static int check_dane_pkeys(X509_STORE_CTX *ctx)", "{", "    SSL_DANE *dane = ctx->dane;", "    danetls_record *t;", "    int num = ctx->num_untrusted;", "    X509 *cert = sk_X509_value(ctx->chain, num - 1);", "    int recnum = sk_danetls_record_num(dane->trecs);", "    int i;", "", "    for (i = 0; i < recnum; ++i) {"], "SrcStart": 2794}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 2808, "Tip": "<b>cert</b> is used as the 1st parameter in function <b>X509_verify</b> (<b>cert</b> can be null)", "SrcLines": ["    for (i = 0; i < recnum; ++i) {", "        t = sk_danetls_record_value(dane->trecs, i);", "        if (t->usage != DANETLS_USAGE_DANE_TA ||", "            t->selector != DANETLS_SELECTOR_SPKI ||", "            t->mtype != DANETLS_MATCHING_FULL ||", "            X509_verify(cert, t->spki) <= 0)", "            continue;", "", "        /* Clear any PKIX-?? matches that failed to extend to a full chain */", "        X509_free(dane->mcert);"], "SrcStart": 2803}, {"FileMD5": "9dbdecc082c03073ada312cb83df9c1d.c", "FileName": "crypto/x509/x_all.c", "Line": 24, "Tip": "<b>&amp;(a-&gt;sig_alg)</b> is used as the 1st parameter in function <b>X509_ALGOR_cmp</b> (<b>&amp;(a-&gt;sig_alg)</b> can be null)", "SrcLines": ["#include <openssl/dsa.h>", "#include <openssl/x509v3.h>", "", "int X509_verify(X509 *a, EVP_PKEY *r)", "{", "    if (X509_ALGOR_cmp(&a->sig_alg, &a->cert_info.signature))", "        return 0;", "    return (ASN1_item_verify(ASN1_ITEM_rptr(X509_CINF), &a->sig_alg,", "                             &a->signature, &a->cert_info, r));", "}"], "SrcStart": 19}, {"FileMD5": "c9d2a1fa8ed1a3049712923e396309c2.c", "FileName": "crypto/asn1/x_algor.c", "Line": 88, "Tip": "Load value from <b>a-&gt;algorithm</b>", "SrcLines": ["}", "", "int X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b)", "{", "    int rv;", "    rv = OBJ_cmp(a->algorithm, b->algorithm);", "    if (rv)", "        return rv;", "    if (!a->parameter && !b->parameter)", "        return 0;"], "SrcStart": 83}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/asn1/x_algor.c", "Line": 88}, {"HashID": "d7ebca4ad4ee531c1eb15f2e9589880e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "6d3f10cc052e75ccf6b53f1820ab13fc.c", "FileName": "crypto/bio/b_addr.c", "Line": 416, "Tip": "Return <b>null</b> to caller", "SrcLines": ["const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)", "{", "    if (bai != NULL)", "        return (BIO_ADDR *)bai->bai_addr;", "    return NULL;", "}", "", "void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)", "{", "    if (bai == NULL)"], "SrcStart": 411}, {"FileMD5": "b28bf20156eb557a8a7e8d30b352e74e.c", "FileName": "crypto/bio/b_sock.c", "Line": 221, "Tip": "The return value of function <b>BIO_ADDRINFO_address</b> is used as the 2nd parameter in function <b>BIO_listen</b> (the return value of function <b>BIO_ADDRINFO_address</b> can be null)", "SrcLines": ["                        BIO_ADDRINFO_protocol(res), 0)) == INVALID_SOCKET) {", "        s = INVALID_SOCKET;", "        goto err;", "    }", "", "    if (!BIO_listen(s, BIO_ADDRINFO_address(res),", "                    bind_mode ? BIO_SOCK_REUSEADDR : 0)) {", "        BIO_closesocket(s);", "        s = INVALID_SOCKET;", "    }"], "SrcStart": 216}, {"FileMD5": "45afacede29029d59ba5e31f8a199a04.c", "FileName": "crypto/bio/b_sock2.c", "Line": 247, "Tip": "<b>addr</b> is used as the 1st parameter in function <b>BIO_ADDR_family</b> (<b>addr</b> can be null)", "SrcLines": ["            return 0;", "        }", "    }", "", "# ifdef IPV6_V6ONLY", "    if (BIO_ADDR_family(addr) == AF_INET6) {", "        /*", "         * Note: Windows default of IPV6_V6ONLY is ON, and Linux is OFF.", "         * Therefore we always have to use setsockopt here.", "         */"], "SrcStart": 242}, {"FileMD5": "6d3f10cc052e75ccf6b53f1820ab13fc.c", "FileName": "crypto/bio/b_addr.c", "Line": 132, "Tip": "Load value from <b>((sockaddr*)ap)-&gt;sa_family</b>", "SrcLines": ["    return 0;", "}", "", "int BIO_ADDR_family(const BIO_ADDR *ap)", "{", "    return ap->sa.sa_family;", "}", "", "int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)", "{"], "SrcStart": 127}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/bio/b_addr.c", "Line": 132}, {"HashID": "e19fee03741a0c527b600bd69c96613b", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "6d3f10cc052e75ccf6b53f1820ab13fc.c", "FileName": "crypto/bio/b_addr.c", "Line": 416, "Tip": "Return <b>null</b> to caller", "SrcLines": ["const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)", "{", "    if (bai != NULL)", "        return (BIO_ADDR *)bai->bai_addr;", "    return NULL;", "}", "", "void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)", "{", "    if (bai == NULL)"], "SrcStart": 411}, {"FileMD5": "b28bf20156eb557a8a7e8d30b352e74e.c", "FileName": "crypto/bio/b_sock.c", "Line": 221, "Tip": "The return value of function <b>BIO_ADDRINFO_address</b> is used as the 2nd parameter in function <b>BIO_listen</b> (the return value of function <b>BIO_ADDRINFO_address</b> can be null)", "SrcLines": ["                        BIO_ADDRINFO_protocol(res), 0)) == INVALID_SOCKET) {", "        s = INVALID_SOCKET;", "        goto err;", "    }", "", "    if (!BIO_listen(s, BIO_ADDRINFO_address(res),", "                    bind_mode ? BIO_SOCK_REUSEADDR : 0)) {", "        BIO_closesocket(s);", "        s = INVALID_SOCKET;", "    }"], "SrcStart": 216}, {"FileMD5": "45afacede29029d59ba5e31f8a199a04.c", "FileName": "crypto/bio/b_sock2.c", "Line": 262, "Tip": "<b>addr</b> is used as the 2nd parameter in function <b>BIO_bind</b> (<b>addr</b> can be null)", "SrcLines": ["            return 0;", "        }", "    }", "# endif", "", "    if (!BIO_bind(sock, addr, options))", "        return 0;", "", "    if (socktype != SOCK_DGRAM && listen(sock, MAX_LISTEN) == -1) {", "        SYSerr(SYS_F_LISTEN, get_last_socket_error());"], "SrcStart": 257}, {"FileMD5": "45afacede29029d59ba5e31f8a199a04.c", "FileName": "crypto/bio/b_sock2.c", "Line": 160, "Tip": "<b>addr</b> is used as the 1st parameter in function <b>BIO_ADDR_sockaddr_size</b> (<b>addr</b> can be null)", "SrcLines": ["            return 0;", "        }", "    }", "# endif", "", "    if (bind(sock, BIO_ADDR_sockaddr(addr), BIO_ADDR_sockaddr_size(addr)) != 0) {", "        SYSerr(SYS_F_BIND, get_last_socket_error());", "        BIOerr(BIO_F_BIO_BIND, BIO_R_UNABLE_TO_BIND_SOCKET);", "        return 0;", "    }"], "SrcStart": 155}, {"FileMD5": "6d3f10cc052e75ccf6b53f1820ab13fc.c", "FileName": "crypto/bio/b_addr.c", "Line": 326, "Tip": "Load value from <b>((sockaddr*)ap)-&gt;sa_family</b>", "SrcLines": [" * isn't set or is something other than AF_INET, AF_INET6 or AF_UNIX,", " * the size of the BIO_ADDR type is returned.", " */", "socklen_t BIO_ADDR_sockaddr_size(const BIO_ADDR *ap)", "{", "    if (ap->sa.sa_family == AF_INET)", "        return sizeof(ap->s_in);", "#ifdef AF_INET6", "    if (ap->sa.sa_family == AF_INET6)", "        return sizeof(ap->s_in6);"], "SrcStart": 321}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/bio/b_addr.c", "Line": 326}]}, "start": 1, "end": 10, "page": 2, "total_pages": 12, "language": "en"}