var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "098dabd2c109486651855a647cd1ce60", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 487, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["        purpose = ctx->param->purpose;", "    }", "", "    for (i = 0; i < num; i++) {", "        int ret;", "        x = sk_X509_value(ctx->chain, i);", "        if (!(ctx->param->flags & X509_V_FLAG_IGNORE_CRITICAL)", "            && (x->ex_flags & EXFLAG_CRITICAL)) {", "            if (!verify_cb_cert(ctx, x, i,", "                                X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION))"], "SrcStart": 482}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 557, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": ["            && (plen > (x->ex_pathlen + proxy_path_length))) {", "            if (!verify_cb_cert(ctx, x, i, X509_V_ERR_PATH_LENGTH_EXCEEDED))", "                return 0;", "        }", "        /* Increment path length if not a self issued intermediate CA */", "        if (i > 0 && (x->ex_flags & EXFLAG_SI) == 0)", "            plen++;", "        /*", "         * If this certificate is a proxy certificate, the next certificate", "         * must be another proxy certificate or a EE certificate.  If not,"], "SrcStart": 552}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 557}, {"HashID": "6747965e4ed837dbc875e0e7db2cac9d", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 487, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["        purpose = ctx->param->purpose;", "    }", "", "    for (i = 0; i < num; i++) {", "        int ret;", "        x = sk_X509_value(ctx->chain, i);", "        if (!(ctx->param->flags & X509_V_FLAG_IGNORE_CRITICAL)", "            && (x->ex_flags & EXFLAG_CRITICAL)) {", "            if (!verify_cb_cert(ctx, x, i,", "                                X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION))"], "SrcStart": 482}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 564, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": ["        /*", "         * If this certificate is a proxy certificate, the next certificate", "         * must be another proxy certificate or a EE certificate.  If not,", "         * the next certificate must be a CA certificate.", "         */", "        if (x->ex_flags & EXFLAG_PROXY) {", "            /*", "             * RFC3820, 4.1.3 (b)(1) stipulates that if pCPathLengthConstraint", "             * is less than max_path_length, the former should be copied to", "             * the latter, and 4.1.4 (a) stipulates that max_path_length"], "SrcStart": 559}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 564}, {"HashID": "d8e1ff9ce5d1291577e1125a9dd1248f", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 619, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["{", "    int i;", "", "    /* Check name constraints for all certificates */", "    for (i = sk_X509_num(ctx->chain) - 1; i >= 0; i--) {", "        X509 *x = sk_X509_value(ctx->chain, i);", "        int j;", "", "        /* Ignore self issued certs unless last in chain */", "        if (i && (x->ex_flags & EXFLAG_SI))"], "SrcStart": 614}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 623, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": ["    for (i = sk_X509_num(ctx->chain) - 1; i >= 0; i--) {", "        X509 *x = sk_X509_value(ctx->chain, i);", "        int j;", "", "        /* Ignore self issued certs unless last in chain */", "        if (i && (x->ex_flags & EXFLAG_SI))", "            continue;", "", "        /*", "         * Proxy certificates policy has an extra constraint, where the"], "SrcStart": 618}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 623}, {"HashID": "0adf5d72cdc160dea6a2686f64e0f45f", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 619, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["{", "    int i;", "", "    /* Check name constraints for all certificates */", "    for (i = sk_X509_num(ctx->chain) - 1; i >= 0; i--) {", "        X509 *x = sk_X509_value(ctx->chain, i);", "        int j;", "", "        /* Ignore self issued certs unless last in chain */", "        if (i && (x->ex_flags & EXFLAG_SI))"], "SrcStart": 614}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 632, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": ["         * Proxy certificates policy has an extra constraint, where the", "         * certificate subject MUST be the issuer with a single CN entry", "         * added.", "         * (RFC 3820: 3.4, 4.1.3 (a)(4))", "         */", "        if (x->ex_flags & EXFLAG_PROXY) {", "            X509_NAME *tmpsubject = X509_get_subject_name(x);", "            X509_NAME *tmpissuer = X509_get_issuer_name(x);", "            X509_NAME_ENTRY *tmpentry = NULL;", "            int last_object_nid = 0;"], "SrcStart": 627}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 632}, {"HashID": "e79cda0da17d47941c273ee30ac11af4", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 901, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["static int check_cert(X509_STORE_CTX *ctx)", "{", "    X509_CRL *crl = NULL, *dcrl = NULL;", "    int ok = 0;", "    int cnum = ctx->error_depth;", "    X509 *x = sk_X509_value(ctx->chain, cnum);", "", "    ctx->current_cert = x;", "    ctx->current_issuer = NULL;", "    ctx->current_crl_score = 0;"], "SrcStart": 896}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 908, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": ["    ctx->current_cert = x;", "    ctx->current_issuer = NULL;", "    ctx->current_crl_score = 0;", "    ctx->current_reasons = 0;", "", "    if (x->ex_flags & EXFLAG_PROXY)", "        return 1;", "", "    while (ctx->current_reasons != CRLDP_ALL_REASONS) {", "        unsigned int last_reasons = ctx->current_reasons;"], "SrcStart": 903}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 908}, {"HashID": "2c60ad18816ed38d45a32b0663b03994", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "9ddc19d042d192d7e7a40939177ad903.h", "FileName": "include/openssl/x509v3.h", "Line": 449, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["# define X509V3_ADD_REPLACE_EXISTING     3L", "# define X509V3_ADD_KEEP_EXISTING        4L", "# define X509V3_ADD_DELETE               5L", "# define X509V3_ADD_SILENT               0x10", "", "DEFINE_STACK_OF(X509_PURPOSE)", "", "DECLARE_ASN1_FUNCTIONS(BASIC_CONSTRAINTS)", "", "DECLARE_ASN1_FUNCTIONS(SXNET)"], "SrcStart": 444}, {"FileMD5": "c1d07122801b927b8b3769e6b29a0184.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 121, "Tip": "Function <b>sk_X509_PURPOSE_value</b> executes and returns", "SrcLines": ["{", "    if (idx < 0)", "        return NULL;", "    if (idx < (int)X509_PURPOSE_COUNT)", "        return xstandard + idx;", "    return sk_X509_PURPOSE_value(xptable, idx - X509_PURPOSE_COUNT);", "}", "", "int X509_PURPOSE_get_by_sname(const char *sname)", "{"], "SrcStart": 116}, {"FileMD5": "c1d07122801b927b8b3769e6b29a0184.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 122, "Tip": "Return the return value of function <b>sk_X509_PURPOSE_value</b> to caller (The return value can be null)", "SrcLines": ["    if (idx < 0)", "        return NULL;", "    if (idx < (int)X509_PURPOSE_COUNT)", "        return xstandard + idx;", "    return sk_X509_PURPOSE_value(xptable, idx - X509_PURPOSE_COUNT);", "}", "", "int X509_PURPOSE_get_by_sname(const char *sname)", "{", "    int i;"], "SrcStart": 117}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 2213, "Tip": "Function <b>X509_PURPOSE_get0</b> executes and stores the return value to <b>ptmp</b> (<b>ptmp</b> can be null)", "SrcLines": ["        if (idx == -1) {", "            X509err(X509_F_X509_STORE_CTX_PURPOSE_INHERIT,", "                    X509_R_UNKNOWN_PURPOSE_ID);", "            return 0;", "        }", "        ptmp = X509_PURPOSE_get0(idx);", "        if (ptmp->trust == X509_TRUST_DEFAULT) {", "            idx = X509_PURPOSE_get_by_id(def_purpose);", "            /*", "             * XXX: In the two callers above def_purpose is always 0, which is"], "SrcStart": 2208}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 2214, "Tip": "Load value from <b>ptmp-&gt;trust</b>", "SrcLines": ["            X509err(X509_F_X509_STORE_CTX_PURPOSE_INHERIT,", "                    X509_R_UNKNOWN_PURPOSE_ID);", "            return 0;", "        }", "        ptmp = X509_PURPOSE_get0(idx);", "        if (ptmp->trust == X509_TRUST_DEFAULT) {", "            idx = X509_PURPOSE_get_by_id(def_purpose);", "            /*", "             * XXX: In the two callers above def_purpose is always 0, which is", "             * not a known value, so idx will always be -1.  How is the"], "SrcStart": 2209}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 2214}, {"HashID": "6a99c24af9e2b267f2fd457eca020e25", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 355, "Tip": "Return <b>null</b> to caller", "SrcLines": ["ASN1_STRING *X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne)", "{", "    if (ne == NULL)", "        return NULL;", "    return ne->value;", "}", "", "int X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne)", "{", "    return ne->set;"], "SrcStart": 350}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 38, "Tip": "Function <b>X509_NAME_ENTRY_get_data</b> executes and stores the return value to <b>data</b> (<b>data</b> can be null)", "SrcLines": ["    const ASN1_STRING *data;", "", "    i = X509_NAME_get_index_by_OBJ(name, obj, -1);", "    if (i < 0)", "        return -1;", "    data = X509_NAME_ENTRY_get_data(X509_NAME_get_entry(name, i));", "    if (buf == NULL)", "        return data->length;", "    if (len <= 0)", "        return 0;"], "SrcStart": 33}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 43, "Tip": "Load value from <b>data-&gt;length</b>", "SrcLines": ["    data = X509_NAME_ENTRY_get_data(X509_NAME_get_entry(name, i));", "    if (buf == NULL)", "        return data->length;", "    if (len <= 0)", "        return 0;", "    i = (data->length > (len - 1)) ? (len - 1) : data->length;", "    memcpy(buf, data->data, i);", "    buf[i] = '\u00a50';", "    return i;", "}"], "SrcStart": 38}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509name.c", "Line": 43}, {"HashID": "5b16b12b3c8d00421573327f547fcf7b", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 75, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct X509_sig_st X509_SIG;", "", "typedef struct X509_name_entry_st X509_NAME_ENTRY;", "", "DEFINE_STACK_OF(X509_NAME_ENTRY)", "", "DEFINE_STACK_OF(X509_NAME)", "", "# define X509_EX_V_NETSCAPE_HACK         0x8000"], "SrcStart": 70}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 80, "Tip": "Function <b>sk_X509_NAME_ENTRY_value</b> executes and stores the return value to <b>ne</b> (<b>ne</b> can be null)", "SrcLines": ["    if (lastpos < 0)", "        lastpos = -1;", "    sk = name->entries;", "    n = sk_X509_NAME_ENTRY_num(sk);", "    for (lastpos++; lastpos < n; lastpos++) {", "        ne = sk_X509_NAME_ENTRY_value(sk, lastpos);", "        if (OBJ_cmp(ne->object, obj) == 0)", "            return lastpos;", "    }", "    return -1;"], "SrcStart": 75}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 81, "Tip": "Load value from <b>ne-&gt;object</b>", "SrcLines": ["        lastpos = -1;", "    sk = name->entries;", "    n = sk_X509_NAME_ENTRY_num(sk);", "    for (lastpos++; lastpos < n; lastpos++) {", "        ne = sk_X509_NAME_ENTRY_value(sk, lastpos);", "        if (OBJ_cmp(ne->object, obj) == 0)", "            return lastpos;", "    }", "    return -1;", "}"], "SrcStart": 76}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509name.c", "Line": 81}, {"HashID": "cb0b41cf6e21f6acaa0a2790be1d1acf", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 75, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct X509_sig_st X509_SIG;", "", "typedef struct X509_name_entry_st X509_NAME_ENTRY;", "", "DEFINE_STACK_OF(X509_NAME_ENTRY)", "", "DEFINE_STACK_OF(X509_NAME)", "", "# define X509_EX_V_NETSCAPE_HACK         0x8000"], "SrcStart": 70}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 206, "Tip": "Function <b>sk_X509_NAME_ENTRY_value</b> executes and returns", "SrcLines": ["    if (set == -1) {", "        if (loc == 0) {", "            set = 0;", "            inc = 1;", "        } else {", "            set = sk_X509_NAME_ENTRY_value(sk, loc - 1)->set;", "        }", "    } else {                    /* if (set >= 0) */", "", "        if (loc >= n) {"], "SrcStart": 201}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 206, "Tip": "Load value from <b>sk_X509_NAME_ENTRY_value(sk,loc-1)-&gt;set</b> and assign to <b>set</b>", "SrcLines": ["    if (set == -1) {", "        if (loc == 0) {", "            set = 0;", "            inc = 1;", "        } else {", "            set = sk_X509_NAME_ENTRY_value(sk, loc - 1)->set;", "        }", "    } else {                    /* if (set >= 0) */", "", "        if (loc >= n) {"], "SrcStart": 201}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509name.c", "Line": 206}, {"HashID": "7d275593a1fb1dd55028fbfab746afd5", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 75, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct X509_sig_st X509_SIG;", "", "typedef struct X509_name_entry_st X509_NAME_ENTRY;", "", "DEFINE_STACK_OF(X509_NAME_ENTRY)", "", "DEFINE_STACK_OF(X509_NAME)", "", "# define X509_EX_V_NETSCAPE_HACK         0x8000"], "SrcStart": 70}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 212, "Tip": "Function <b>sk_X509_NAME_ENTRY_value</b> executes and returns", "SrcLines": ["        }", "    } else {                    /* if (set >= 0) */", "", "        if (loc >= n) {", "            if (loc != 0)", "                set = sk_X509_NAME_ENTRY_value(sk, loc - 1)->set + 1;", "            else", "                set = 0;", "        } else", "            set = sk_X509_NAME_ENTRY_value(sk, loc)->set;"], "SrcStart": 207}, {"FileMD5": "6c33ffba0fd02c740e37dafb241c5c96.c", "FileName": "crypto/x509/x509name.c", "Line": 212, "Tip": "Load value from <b>sk_X509_NAME_ENTRY_value(sk,loc-1)-&gt;set</b>", "SrcLines": ["        }", "    } else {                    /* if (set >= 0) */", "", "        if (loc >= n) {", "            if (loc != 0)", "                set = sk_X509_NAME_ENTRY_value(sk, loc - 1)->set + 1;", "            else", "                set = 0;", "        } else", "            set = sk_X509_NAME_ENTRY_value(sk, loc)->set;"], "SrcStart": 207}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509name.c", "Line": 212}]}, "start": 71, "end": 80, "page": 9, "total_pages": 12, "language": "en"}