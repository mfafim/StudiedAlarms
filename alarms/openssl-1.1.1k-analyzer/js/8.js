var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "13a1398f4cd6e0629f004db1ee460795", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "be5d0b8fd25ebfd406f294d476fe62a6.h", "FileName": "include/openssl/x509_vfy.h", "Line": 58, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["#define X509_LU_RETRY   -1", "#define X509_LU_FAIL    0", "#endif", "", "DEFINE_STACK_OF(X509_LOOKUP)", "DEFINE_STACK_OF(X509_OBJECT)", "DEFINE_STACK_OF(X509_VERIFY_PARAM)", "", "int X509_STORE_set_depth(X509_STORE *store, int depth);", ""], "SrcStart": 53}, {"FileMD5": "c75fa4db6016d5fb0d50eba3fe5b9a34.c", "FileName": "crypto/x509/x509_lu.c", "Line": 619, "Tip": "Function <b>sk_X509_OBJECT_value</b> executes and stores the return value to <b>obj</b> (<b>obj</b> can be null)", "SrcLines": ["        sk_X509_CRL_free(sk);", "        return NULL;", "    }", "", "    for (i = 0; i < cnt; i++, idx++) {", "        obj = sk_X509_OBJECT_value(store->objs, idx);", "        x = obj->data.crl;", "        if (!X509_CRL_up_ref(x)) {", "            X509_STORE_unlock(store);", "            sk_X509_CRL_pop_free(sk, X509_CRL_free);"], "SrcStart": 614}, {"FileMD5": "c75fa4db6016d5fb0d50eba3fe5b9a34.c", "FileName": "crypto/x509/x509_lu.c", "Line": 620, "Tip": "Load value from <b>obj-&gt;data</b> and assign to <b>x</b>", "SrcLines": ["        return NULL;", "    }", "", "    for (i = 0; i < cnt; i++, idx++) {", "        obj = sk_X509_OBJECT_value(store->objs, idx);", "        x = obj->data.crl;", "        if (!X509_CRL_up_ref(x)) {", "            X509_STORE_unlock(store);", "            sk_X509_CRL_pop_free(sk, X509_CRL_free);", "            return NULL;"], "SrcStart": 615}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_lu.c", "Line": 620}, {"HashID": "4b69eeb64b87ca2e9a395ceacc0e550d", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "917d63ab5e80f8e44095c46b9822f4b2.c", "FileName": "crypto/ocsp/ocsp_srv.c", "Line": 201, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>tmpcert</b> (<b>tmpcert</b> can be null)", "SrcLines": ["", "    if (!(flags & OCSP_NOCERTS)) {", "        if (!OCSP_basic_add1_cert(brsp, signer))", "            goto err;", "        for (i = 0; i < sk_X509_num(certs); i++) {", "            X509 *tmpcert = sk_X509_value(certs, i);", "            if (!OCSP_basic_add1_cert(brsp, tmpcert))", "                goto err;", "        }", "    }"], "SrcStart": 196}, {"FileMD5": "917d63ab5e80f8e44095c46b9822f4b2.c", "FileName": "crypto/ocsp/ocsp_srv.c", "Line": 202, "Tip": "<b>tmpcert</b> is used as the 2nd parameter in function <b>OCSP_basic_add1_cert</b> (<b>tmpcert</b> can be null)", "SrcLines": ["    if (!(flags & OCSP_NOCERTS)) {", "        if (!OCSP_basic_add1_cert(brsp, signer))", "            goto err;", "        for (i = 0; i < sk_X509_num(certs); i++) {", "            X509 *tmpcert = sk_X509_value(certs, i);", "            if (!OCSP_basic_add1_cert(brsp, tmpcert))", "                goto err;", "        }", "    }", ""], "SrcStart": 197}, {"FileMD5": "917d63ab5e80f8e44095c46b9822f4b2.c", "FileName": "crypto/ocsp/ocsp_srv.c", "Line": 167, "Tip": "<b>cert</b> is used as the 1st parameter in function <b>X509_up_ref</b> (<b>cert</b> can be null)", "SrcLines": ["        && (resp->certs = sk_X509_new_null()) == NULL)", "        return 0;", "", "    if (!sk_X509_push(resp->certs, cert))", "        return 0;", "    X509_up_ref(cert);", "    return 1;", "}", "", "/*"], "SrcStart": 162}, {"FileMD5": "e3df0d8318ddfeeb382b52fe295a23db.c", "FileName": "crypto/x509/x509_set.c", "Line": 103, "Tip": "Load value from <b>x-&gt;lock</b>", "SrcLines": ["", "int X509_up_ref(X509 *x)", "{", "    int i;", "", "    if (CRYPTO_UP_REF(&x->references, &i, x->lock) <= 0)", "        return 0;", "", "    REF_PRINT_COUNT(\"X509\", x);", "    REF_ASSERT_ISNT(i < 2);"], "SrcStart": 98}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_set.c", "Line": 103}, {"HashID": "72e25a575b4572f9b7d157d90f5074de", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "7c9e4de7e709d5101ccb55eeaa778475.c", "FileName": "crypto/x509/x509_cmp.c", "Line": 367, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["    if (!(flags & X509_V_FLAG_SUITEB_128_LOS))", "        return X509_V_OK;", "", "    /* If no EE certificate passed in must be first in chain */", "    if (x == NULL) {", "        x = sk_X509_value(chain, 0);", "        i = 1;", "    } else", "        i = 0;", ""], "SrcStart": 362}, {"FileMD5": "7c9e4de7e709d5101ccb55eeaa778475.c", "FileName": "crypto/x509/x509_cmp.c", "Line": 383, "Tip": "<b>x</b> is used as the 1st parameter in function <b>X509_get_version</b> (<b>x</b> can be null)", "SrcLines": ["     * pointer.  All we need to do is check the leaf key algorithm.", "     */", "    if (chain == NULL)", "        return check_suite_b(pk, -1, &tflags);", "", "    if (X509_get_version(x) != 2) {", "        rv = X509_V_ERR_SUITE_B_INVALID_VERSION;", "        /* Correct error depth */", "        i = 0;", "        goto end;"], "SrcStart": 378}, {"FileMD5": "e3df0d8318ddfeeb382b52fe295a23db.c", "FileName": "crypto/x509/x509_set.c", "Line": 113, "Tip": "Load value from <b>x-&gt;cert_info.version</b>", "SrcLines": ["    return ((i > 1) ? 1 : 0);", "}", "", "long X509_get_version(const X509 *x)", "{", "    return ASN1_INTEGER_get(x->cert_info.version);", "}", "", "const ASN1_TIME *X509_get0_notBefore(const X509 *x)", "{"], "SrcStart": 108}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_set.c", "Line": 113}, {"HashID": "f9647a765ea5195977eaf98aa6d10e12", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 188, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>cert</b> (<b>cert</b> can be null)", "SrcLines": ["", "    if (ctx->param->auth_level <= 0)", "        return 1;", "", "    for (i = 0; i < num; ++i) {", "        X509 *cert = sk_X509_value(ctx->chain, i);", "", "        /*", "         * We've already checked the security of the leaf key, so here we only", "         * check the security of issuer keys."], "SrcStart": 183}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 201, "Tip": "<b>cert</b> is used as the 2nd parameter in function <b>check_sig_level</b> (<b>cert</b> can be null)", "SrcLines": ["            return 0;", "        /*", "         * We also check the signature algorithm security of all certificates", "         * except those of the trust anchor at index num-1.", "         */", "        if (i < num - 1 && !check_sig_level(ctx, cert) &&", "            verify_cb_cert(ctx, cert, i, X509_V_ERR_CA_MD_TOO_WEAK) == 0)", "            return 0;", "    }", "    return 1;"], "SrcStart": 196}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 3375, "Tip": "<b>cert</b> is used as the 1st parameter in function <b>X509_get_signature_info</b> (<b>cert</b> can be null)", "SrcLines": ["    if (level <= 0)", "        return 1;", "    if (level > NUM_AUTH_LEVELS)", "        level = NUM_AUTH_LEVELS;", "", "    if (!X509_get_signature_info(cert, NULL, NULL, &secbits, NULL))", "        return 0;", "", "    return secbits >= minbits_table[level - 1];", "}"], "SrcStart": 3370}, {"FileMD5": "e3df0d8318ddfeeb382b52fe295a23db.c", "FileName": "crypto/x509/x509_set.c", "Line": 192, "Tip": "<b>&amp;(x-&gt;siginf)</b> is used as the 1st parameter in function <b>X509_SIG_INFO_get</b> (<b>&amp;(x-&gt;siginf)</b> can be null)", "SrcLines": ["", "int X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits,", "                            uint32_t *flags)", "{", "    X509_check_purpose(x, -1, -1);", "    return X509_SIG_INFO_get(&x->siginf, mdnid, pknid, secbits, flags);", "}", "", "static void x509_sig_info_init(X509_SIG_INFO *siginf, const X509_ALGOR *alg,", "                               const ASN1_STRING *sig)"], "SrcStart": 187}, {"FileMD5": "e3df0d8318ddfeeb382b52fe295a23db.c", "FileName": "crypto/x509/x509_set.c", "Line": 176, "Tip": "Load value from <b>siginf-&gt;flags</b>", "SrcLines": ["        *pknid = siginf->pknid;", "    if (secbits != NULL)", "        *secbits = siginf->secbits;", "    if (flags != NULL)", "        *flags = siginf->flags;", "    return (siginf->flags & X509_SIG_INFO_VALID) != 0;", "}", "", "void X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,", "                       int secbits, uint32_t flags)"], "SrcStart": 171}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_set.c", "Line": 176}, {"HashID": "ac7374a65ee1e5944d3d874308033a6c", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 95, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    if (idx < 0)", "        return NULL;", "    if (idx < (int)X509_TRUST_COUNT)", "        return trstandard + idx;", "    return sk_X509_TRUST_value(trtable, idx - X509_TRUST_COUNT);", "}", "", "int X509_TRUST_get_by_id(int id)", "{", "    X509_TRUST tmp;"], "SrcStart": 90}, {"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 77, "Tip": "Function <b>X509_TRUST_get0</b> executes and stores the return value to <b>pt</b> (<b>pt</b> can be null)", "SrcLines": ["        return obj_trust(NID_anyExtendedKeyUsage, x,", "                         flags | X509_TRUST_DO_SS_COMPAT);", "    idx = X509_TRUST_get_by_id(id);", "    if (idx == -1)", "        return default_trust(id, x, flags);", "    pt = X509_TRUST_get0(idx);", "    return pt->check_trust(pt, x, flags);", "}", "", "int X509_TRUST_get_count(void)"], "SrcStart": 72}, {"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 78, "Tip": "Load value from <b>pt-&gt;check_trust</b>", "SrcLines": ["                         flags | X509_TRUST_DO_SS_COMPAT);", "    idx = X509_TRUST_get_by_id(id);", "    if (idx == -1)", "        return default_trust(id, x, flags);", "    pt = X509_TRUST_get0(idx);", "    return pt->check_trust(pt, x, flags);", "}", "", "int X509_TRUST_get_count(void)", "{"], "SrcStart": 73}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_trs.c", "Line": 78}, {"HashID": "a614261071cf3719df7fd81ae85f3d1d", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 95, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    if (idx < 0)", "        return NULL;", "    if (idx < (int)X509_TRUST_COUNT)", "        return trstandard + idx;", "    return sk_X509_TRUST_value(trtable, idx - X509_TRUST_COUNT);", "}", "", "int X509_TRUST_get_by_id(int id)", "{", "    X509_TRUST tmp;"], "SrcStart": 90}, {"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 144, "Tip": "Function <b>X509_TRUST_get0</b> executes and stores the return value to <b>trtmp</b> (<b>trtmp</b> can be null)", "SrcLines": ["            X509err(X509_F_X509_TRUST_ADD, ERR_R_MALLOC_FAILURE);", "            return 0;", "        }", "        trtmp->flags = X509_TRUST_DYNAMIC;", "    } else", "        trtmp = X509_TRUST_get0(idx);", "", "    /* OPENSSL_free existing name if dynamic */", "    if (trtmp->flags & X509_TRUST_DYNAMIC_NAME)", "        OPENSSL_free(trtmp->name);"], "SrcStart": 139}, {"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 147, "Tip": "Load value from <b>trtmp-&gt;flags</b>", "SrcLines": ["        trtmp->flags = X509_TRUST_DYNAMIC;", "    } else", "        trtmp = X509_TRUST_get0(idx);", "", "    /* OPENSSL_free existing name if dynamic */", "    if (trtmp->flags & X509_TRUST_DYNAMIC_NAME)", "        OPENSSL_free(trtmp->name);", "    /* dup supplied name */", "    if ((trtmp->name = OPENSSL_strdup(name)) == NULL) {", "        X509err(X509_F_X509_TRUST_ADD, ERR_R_MALLOC_FAILURE);"], "SrcStart": 142}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_trs.c", "Line": 147}, {"HashID": "6e618ad72e79a2e1a01b5ee455ddf200", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 805, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["     * Note, that depths 0..num_untrusted-1 may also contain trusted", "     * certificates, but the caller is expected to have already checked those,", "     * and wants to incrementally check just any added since.", "     */", "    for (i = num_untrusted; i < num; i++) {", "        x = sk_X509_value(ctx->chain, i);", "        trust = X509_check_trust(x, ctx->param->trust, 0);", "        /* If explicitly trusted return trusted */", "        if (trust == X509_TRUST_TRUSTED)", "            goto trusted;"], "SrcStart": 800}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 806, "Tip": "<b>x</b> is used as the 1st parameter in function <b>X509_check_trust</b> (<b>x</b> can be null)", "SrcLines": ["     * certificates, but the caller is expected to have already checked those,", "     * and wants to incrementally check just any added since.", "     */", "    for (i = num_untrusted; i < num; i++) {", "        x = sk_X509_value(ctx->chain, i);", "        trust = X509_check_trust(x, ctx->param->trust, 0);", "        /* If explicitly trusted return trusted */", "        if (trust == X509_TRUST_TRUSTED)", "            goto trusted;", "        if (trust == X509_TRUST_REJECTED)"], "SrcStart": 801}, {"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 72, "Tip": "<b>x</b> is used as the 2nd parameter in function <b>obj_trust</b> (<b>x</b> can be null)", "SrcLines": ["    X509_TRUST *pt;", "    int idx;", "", "    /* We get this as a default value */", "    if (id == X509_TRUST_DEFAULT)", "        return obj_trust(NID_anyExtendedKeyUsage, x,", "                         flags | X509_TRUST_DO_SS_COMPAT);", "    idx = X509_TRUST_get_by_id(id);", "    if (idx == -1)", "        return default_trust(id, x, flags);"], "SrcStart": 67}, {"FileMD5": "80388f9a3447d279694e8c33e7fd5552.c", "FileName": "crypto/x509/x509_trs.c", "Line": 253, "Tip": "Load value from <b>x-&gt;aux</b> and assign to <b>ax</b>", "SrcLines": ["        return X509_TRUST_UNTRUSTED;", "}", "", "static int obj_trust(int id, X509 *x, int flags)", "{", "    X509_CERT_AUX *ax = x->aux;", "    int i;", "", "    if (ax && ax->reject) {", "        for (i = 0; i < sk_ASN1_OBJECT_num(ax->reject); i++) {"], "SrcStart": 248}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_trs.c", "Line": 253}, {"HashID": "7a96709ab09a490b82353dfc602b484d", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 3022, "Tip": "Store <b>null</b> to <b>xtmp</b>", "SrcLines": ["     */", "    depth = ctx->param->depth + 1;", "", "    while (search != 0) {", "        X509 *x;", "        X509 *xtmp = NULL;", "", "        /*", "         * Look in the trust store if enabled for first lookup, or we've run", "         * out of untrusted issuers and search here is not disabled.  When we"], "SrcStart": 3017}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 3114, "Tip": "Load value from <b>xtmp</b> and assign to <b>x</b>", "SrcLines": ["                /*", "                 * Self-signed untrusted certificates get replaced by their", "                 * trusted matching issuer.  Otherwise, grow the chain.", "                 */", "                if (ss == 0) {", "                    if (!sk_X509_push(ctx->chain, x = xtmp)) {", "                        X509_free(xtmp);", "                        X509err(X509_F_BUILD_CHAIN, ERR_R_MALLOC_FAILURE);", "                        trust = X509_TRUST_REJECTED;", "                        ctx->error = X509_V_ERR_OUT_OF_MEM;"], "SrcStart": 3109}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 3122, "Tip": "<b>x</b> is used as the 1st parameter in function <b>cert_self_signed</b> (<b>x</b> can be null)", "SrcLines": ["                        trust = X509_TRUST_REJECTED;", "                        ctx->error = X509_V_ERR_OUT_OF_MEM;", "                        search = 0;", "                        continue;", "                    }", "                    ss = cert_self_signed(x);", "                } else if (num == ctx->num_untrusted) {", "                    /*", "                     * We have a self-signed certificate that has the same", "                     * subject name (and perhaps keyid and/or serial number) as"], "SrcStart": 3117}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 118, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": [" */", "static int cert_self_signed(X509 *x)", "{", "    if (X509_check_purpose(x, -1, 0) != 1)", "        return 0;", "    if (x->ex_flags & EXFLAG_SS)", "        return 1;", "    else", "        return 0;", "}"], "SrcStart": 113}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 118}, {"HashID": "728782bd7b2dfce3acd9797a825f3921", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 487, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["        purpose = ctx->param->purpose;", "    }", "", "    for (i = 0; i < num; i++) {", "        int ret;", "        x = sk_X509_value(ctx->chain, i);", "        if (!(ctx->param->flags & X509_V_FLAG_IGNORE_CRITICAL)", "            && (x->ex_flags & EXFLAG_CRITICAL)) {", "            if (!verify_cb_cert(ctx, x, i,", "                                X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION))"], "SrcStart": 482}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 494, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": ["            && (x->ex_flags & EXFLAG_CRITICAL)) {", "            if (!verify_cb_cert(ctx, x, i,", "                                X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION))", "                return 0;", "        }", "        if (!allow_proxy_certs && (x->ex_flags & EXFLAG_PROXY)) {", "            if (!verify_cb_cert(ctx, x, i,", "                                X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED))", "                return 0;", "        }"], "SrcStart": 489}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 494}, {"HashID": "4f641625adcc108417444f5661ae2746", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "bca7eb7c72dbbf6d7fcda63514d9f27e.h", "FileName": "include/openssl/x509.h", "Line": 99, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 94}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 487, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["        purpose = ctx->param->purpose;", "    }", "", "    for (i = 0; i < num; i++) {", "        int ret;", "        x = sk_X509_value(ctx->chain, i);", "        if (!(ctx->param->flags & X509_V_FLAG_IGNORE_CRITICAL)", "            && (x->ex_flags & EXFLAG_CRITICAL)) {", "            if (!verify_cb_cert(ctx, x, i,", "                                X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION))"], "SrcStart": 482}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 539, "Tip": "Load value from <b>x-&gt;ex_flags</b>", "SrcLines": ["            } else if (ret == 0) {", "                ctx->error = X509_V_ERR_EC_KEY_EXPLICIT_PARAMS;", "            }", "        }", "        if (ret > 0", "            && (x->ex_flags & EXFLAG_CA) == 0", "            && x->ex_pathlen != -1", "            && (ctx->param->flags & X509_V_FLAG_X509_STRICT)) {", "            ctx->error = X509_V_ERR_INVALID_EXTENSION;", "            ret = 0;"], "SrcStart": 534}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/x509/x509_vfy.c", "Line": 539}]}, "start": 61, "end": 70, "page": 8, "total_pages": 12, "language": "en"}