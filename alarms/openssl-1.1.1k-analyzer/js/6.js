var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "cda4805a0daeae8eff2cfb906970ef9e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "75ebffad16e89306fda76d6551ed7b03.c", "FileName": "crypto/x509/x_pubkey.c", "Line": 167, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        X509err(X509_F_X509_PUBKEY_GET0, ERR_R_INTERNAL_ERROR);", "        EVP_PKEY_free(ret);", "    }", "", "    return NULL;", "}", "", "EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key)", "{", "    EVP_PKEY *ret = X509_PUBKEY_get0(key);"], "SrcStart": 162}, {"FileMD5": "7c9e4de7e709d5101ccb55eeaa778475.c", "FileName": "crypto/x509/x509_cmp.c", "Line": 277, "Tip": "Function <b>X509_PUBKEY_get0</b> executes and returns", "SrcLines": ["", "EVP_PKEY *X509_get0_pubkey(const X509 *x)", "{", "    if (x == NULL)", "        return NULL;", "    return X509_PUBKEY_get0(x->cert_info.key);", "}", "", "EVP_PKEY *X509_get_pubkey(X509 *x)", "{"], "SrcStart": 272}, {"FileMD5": "7c9e4de7e709d5101ccb55eeaa778475.c", "FileName": "crypto/x509/x509_cmp.c", "Line": 278, "Tip": "Return the return value of function <b>X509_PUBKEY_get0</b> to caller (The return value can be null)", "SrcLines": ["EVP_PKEY *X509_get0_pubkey(const X509 *x)", "{", "    if (x == NULL)", "        return NULL;", "    return X509_PUBKEY_get0(x->cert_info.key);", "}", "", "EVP_PKEY *X509_get_pubkey(X509 *x)", "{", "    if (x == NULL)"], "SrcStart": 273}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 1974, "Tip": "Function <b>X509_get0_pubkey</b> executes and stores the return value to <b>ktmp2</b> (<b>ktmp2</b> can be null)", "SrcLines": ["        return 0;", "    }", "", "    /* first, populate the other certs */", "    for (j = i - 1; j >= 0; j--) {", "        ktmp2 = X509_get0_pubkey(sk_X509_value(chain, j));", "        EVP_PKEY_copy_parameters(ktmp2, ktmp);", "    }", "", "    if (pkey != NULL)"], "SrcStart": 1969}, {"FileMD5": "87527097900edf976ffa31138e4c5ff9.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 1975, "Tip": "<b>ktmp2</b> is used as the 1st parameter in function <b>EVP_PKEY_copy_parameters</b> (<b>ktmp2</b> can be null)", "SrcLines": ["    }", "", "    /* first, populate the other certs */", "    for (j = i - 1; j >= 0; j--) {", "        ktmp2 = X509_get0_pubkey(sk_X509_value(chain, j));", "        EVP_PKEY_copy_parameters(ktmp2, ktmp);", "    }", "", "    if (pkey != NULL)", "        EVP_PKEY_copy_parameters(pkey, ktmp);"], "SrcStart": 1970}, {"FileMD5": "02f2c85919311cd447b1c72dcc9b9c5c.c", "FileName": "crypto/evp/p_lib.c", "Line": 77, "Tip": "Load value from <b>to-&gt;type</b>", "SrcLines": ["    return 0;", "}", "", "int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)", "{", "    if (to->type == EVP_PKEY_NONE) {", "        if (EVP_PKEY_set_type(to, from->type) == 0)", "            return 0;", "    } else if (to->type != from->type) {", "        EVPerr(EVP_F_EVP_PKEY_COPY_PARAMETERS, EVP_R_DIFFERENT_KEY_TYPES);"], "SrcStart": 72}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/evp/p_lib.c", "Line": 77}, {"HashID": "5e91f5ba00b84c28a61ac7a4fd1512a0", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "d4c7111779f0df5a7bff25b8b184afaa.c", "FileName": "crypto/x509/x509_req.c", "Line": 68, "Tip": "Return <b>null</b> to caller", "SrcLines": ["EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req)", "{", "    if (req == NULL)", "        return NULL;", "    return X509_PUBKEY_get(req->req_info.pubkey);", "}", "", "EVP_PKEY *X509_REQ_get0_pubkey(X509_REQ *req)", "{", "    if (req == NULL)"], "SrcStart": 63}, {"FileMD5": "d4c7111779f0df5a7bff25b8b184afaa.c", "FileName": "crypto/x509/x509_req.c", "Line": 87, "Tip": "Function <b>X509_REQ_get_pubkey</b> executes and stores the return value to <b>xk</b> (<b>xk</b> can be null)", "SrcLines": ["int X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k)", "{", "    EVP_PKEY *xk = NULL;", "    int ok = 0;", "", "    xk = X509_REQ_get_pubkey(x);", "    switch (EVP_PKEY_cmp(xk, k)) {", "    case 1:", "        ok = 1;", "        break;"], "SrcStart": 82}, {"FileMD5": "d4c7111779f0df5a7bff25b8b184afaa.c", "FileName": "crypto/x509/x509_req.c", "Line": 88, "Tip": "<b>xk</b> is used as the 1st parameter in function <b>EVP_PKEY_cmp</b> (<b>xk</b> can be null)", "SrcLines": ["{", "    EVP_PKEY *xk = NULL;", "    int ok = 0;", "", "    xk = X509_REQ_get_pubkey(x);", "    switch (EVP_PKEY_cmp(xk, k)) {", "    case 1:", "        ok = 1;", "        break;", "    case 0:"], "SrcStart": 83}, {"FileMD5": "02f2c85919311cd447b1c72dcc9b9c5c.c", "FileName": "crypto/evp/p_lib.c", "Line": 121, "Tip": "Load value from <b>a-&gt;type</b>", "SrcLines": ["    return -2;", "}", "", "int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)", "{", "    if (a->type != b->type)", "        return -1;", "", "    if (a->ameth) {", "        int ret;"], "SrcStart": 116}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/evp/p_lib.c", "Line": 121}, {"HashID": "ebef5329f1a2b1c7f04a76acb81c4e77", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "a63de7ebef5a8b5b04609e9b66076b4e.h", "FileName": "crypto/objects/obj_local.h", "Line": 11, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": [" * in the file LICENSE in the source distribution or at", " * https://www.openssl.org/source/license.html", " */", "", "typedef struct name_funcs_st NAME_FUNCS;", "DEFINE_STACK_OF(NAME_FUNCS)", "DEFINE_LHASH_OF(OBJ_NAME);", "typedef struct added_obj_st ADDED_OBJ;", "DEFINE_LHASH_OF(ADDED_OBJ);"], "SrcStart": 6}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 127, "Tip": "Function <b>sk_NAME_FUNCS_value</b> executes and stores the return value to <b>name_funcs</b> (<b>name_funcs</b> can be null)", "SrcLines": ["            OPENSSL_free(name_funcs);", "            ret = 0;", "            goto out;", "        }", "    }", "    name_funcs = sk_NAME_FUNCS_value(name_funcs_stack, ret);", "    if (hash_func != NULL)", "        name_funcs->hash_func = hash_func;", "    if (cmp_func != NULL)", "        name_funcs->cmp_func = cmp_func;"], "SrcStart": 122}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 129, "Tip": "Store <b>hash_func</b> to <b>name_funcs-&gt;hash_func</b>", "SrcLines": ["            goto out;", "        }", "    }", "    name_funcs = sk_NAME_FUNCS_value(name_funcs_stack, ret);", "    if (hash_func != NULL)", "        name_funcs->hash_func = hash_func;", "    if (cmp_func != NULL)", "        name_funcs->cmp_func = cmp_func;", "    if (free_func != NULL)", "        name_funcs->free_func = free_func;"], "SrcStart": 124}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/objects/o_names.c", "Line": 129}, {"HashID": "c0b42bb17d978e1f64b32b7bb5c9fb10", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "a63de7ebef5a8b5b04609e9b66076b4e.h", "FileName": "crypto/objects/obj_local.h", "Line": 11, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": [" * in the file LICENSE in the source distribution or at", " * https://www.openssl.org/source/license.html", " */", "", "typedef struct name_funcs_st NAME_FUNCS;", "DEFINE_STACK_OF(NAME_FUNCS)", "DEFINE_LHASH_OF(OBJ_NAME);", "typedef struct added_obj_st ADDED_OBJ;", "DEFINE_LHASH_OF(ADDED_OBJ);"], "SrcStart": 6}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 148, "Tip": "Function <b>sk_NAME_FUNCS_value</b> executes and returns", "SrcLines": ["", "    ret = a->type - b->type;", "    if (ret == 0) {", "        if ((name_funcs_stack != NULL)", "            && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {", "            ret = sk_NAME_FUNCS_value(name_funcs_stack,", "                                      a->type)->cmp_func(a->name, b->name);", "        } else", "            ret = strcasecmp(a->name, b->name);", "    }"], "SrcStart": 143}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 148, "Tip": "Load value from <b>sk_NAME_FUNCS_value(name_funcs_stack,a-&gt;type)-&gt;cmp_func</b>", "SrcLines": ["", "    ret = a->type - b->type;", "    if (ret == 0) {", "        if ((name_funcs_stack != NULL)", "            && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {", "            ret = sk_NAME_FUNCS_value(name_funcs_stack,", "                                      a->type)->cmp_func(a->name, b->name);", "        } else", "            ret = strcasecmp(a->name, b->name);", "    }"], "SrcStart": 143}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/objects/o_names.c", "Line": 148}, {"HashID": "6e5708ddd02e4ebb6ddceda0a58f30d5", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "a63de7ebef5a8b5b04609e9b66076b4e.h", "FileName": "crypto/objects/obj_local.h", "Line": 11, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": [" * in the file LICENSE in the source distribution or at", " * https://www.openssl.org/source/license.html", " */", "", "typedef struct name_funcs_st NAME_FUNCS;", "DEFINE_STACK_OF(NAME_FUNCS)", "DEFINE_LHASH_OF(OBJ_NAME);", "typedef struct added_obj_st ADDED_OBJ;", "DEFINE_LHASH_OF(ADDED_OBJ);"], "SrcStart": 6}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 163, "Tip": "Function <b>sk_NAME_FUNCS_value</b> executes and returns", "SrcLines": ["    unsigned long ret;", "", "    if ((name_funcs_stack != NULL)", "        && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {", "        ret =", "            sk_NAME_FUNCS_value(name_funcs_stack,", "                                a->type)->hash_func(a->name);", "    } else {", "        ret = openssl_lh_strcasehash(a->name);", "    }"], "SrcStart": 158}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 163, "Tip": "Load value from <b>sk_NAME_FUNCS_value(name_funcs_stack,a-&gt;type)-&gt;hash_func</b>", "SrcLines": ["    unsigned long ret;", "", "    if ((name_funcs_stack != NULL)", "        && (sk_NAME_FUNCS_num(name_funcs_stack) > a->type)) {", "        ret =", "            sk_NAME_FUNCS_value(name_funcs_stack,", "                                a->type)->hash_func(a->name);", "    } else {", "        ret = openssl_lh_strcasehash(a->name);", "    }"], "SrcStart": 158}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/objects/o_names.c", "Line": 163}, {"HashID": "95910c86444b53161d8adc406565488a", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "a63de7ebef5a8b5b04609e9b66076b4e.h", "FileName": "crypto/objects/obj_local.h", "Line": 11, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": [" * in the file LICENSE in the source distribution or at", " * https://www.openssl.org/source/license.html", " */", "", "typedef struct name_funcs_st NAME_FUNCS;", "DEFINE_STACK_OF(NAME_FUNCS)", "DEFINE_LHASH_OF(OBJ_NAME);", "typedef struct added_obj_st ADDED_OBJ;", "DEFINE_LHASH_OF(ADDED_OBJ);"], "SrcStart": 6}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 283, "Tip": "Function <b>sk_NAME_FUNCS_value</b> executes and returns", "SrcLines": ["            && (sk_NAME_FUNCS_num(name_funcs_stack) > ret->type)) {", "            /*", "             * XXX: I'm not sure I understand why the free function should", "             * get three arguments... -- Richard Levitte", "             */", "            sk_NAME_FUNCS_value(name_funcs_stack,", "                                ret->type)->free_func(ret->name, ret->type,", "                                                      ret->data);", "        }", "        OPENSSL_free(ret);"], "SrcStart": 278}, {"FileMD5": "3219fd391adca1208826150ab204bb92.c", "FileName": "crypto/objects/o_names.c", "Line": 283, "Tip": "Load value from <b>sk_NAME_FUNCS_value(name_funcs_stack,ret-&gt;type)-&gt;free_func</b>", "SrcLines": ["            && (sk_NAME_FUNCS_num(name_funcs_stack) > ret->type)) {", "            /*", "             * XXX: I'm not sure I understand why the free function should", "             * get three arguments... -- Richard Levitte", "             */", "            sk_NAME_FUNCS_value(name_funcs_stack,", "                                ret->type)->free_func(ret->name, ret->type,", "                                                      ret->data);", "        }", "        OPENSSL_free(ret);"], "SrcStart": 278}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/objects/o_names.c", "Line": 283}, {"HashID": "e928c7ce5db8614d1c4a8d1a0217d745", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "0045a647423b31a82aecf1b17443284c.c", "FileName": "crypto/objects/obj_dat.c", "Line": 245, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        else {", "            OBJerr(OBJ_F_OBJ_NID2OBJ, OBJ_R_UNKNOWN_NID);", "            return NULL;", "        }", "    }", "}", "", "const char *OBJ_nid2sn(int n)", "{", "    ADDED_OBJ ad, *adp;"], "SrcStart": 240}, {"FileMD5": "ea1fc5af4400615bc9fd52ae4af80773.c", "FileName": "crypto/cms/cms_sd.c", "Line": 152, "Tip": "Function <b>OBJ_nid2obj</b> executes and returns", "SrcLines": ["            continue;", "        if (OBJ_cmp(si->digestAlgorithm->algorithm,", "                    sitmp->digestAlgorithm->algorithm))", "            continue;", "        messageDigest = CMS_signed_get0_data_by_OBJ(sitmp,", "                                                    OBJ_nid2obj", "                                                    (NID_pkcs9_messageDigest),", "                                                    -3, V_ASN1_OCTET_STRING);", "        if (!messageDigest) {", "            CMSerr(CMS_F_CMS_COPY_MESSAGEDIGEST,"], "SrcStart": 147}, {"FileMD5": "ea1fc5af4400615bc9fd52ae4af80773.c", "FileName": "crypto/cms/cms_sd.c", "Line": 151, "Tip": "The return value of function <b>OBJ_nid2obj</b> is used as the 2nd parameter in function <b>CMS_signed_get0_data_by_OBJ</b> (the return value of function <b>OBJ_nid2obj</b> can be null)", "SrcLines": ["        if (CMS_signed_get_attr_count(sitmp) < 0)", "            continue;", "        if (OBJ_cmp(si->digestAlgorithm->algorithm,", "                    sitmp->digestAlgorithm->algorithm))", "            continue;", "        messageDigest = CMS_signed_get0_data_by_OBJ(sitmp,", "                                                    OBJ_nid2obj", "                                                    (NID_pkcs9_messageDigest),", "                                                    -3, V_ASN1_OCTET_STRING);", "        if (!messageDigest) {"], "SrcStart": 146}, {"FileMD5": "16aa3ccc76f6f2bad48b0e90091d025f.c", "FileName": "crypto/cms/cms_att.c", "Line": 131, "Tip": "<b>oid</b> is used as the 2nd parameter in function <b>X509at_get0_data_by_OBJ</b> (<b>oid</b> can be null)", "SrcLines": ["}", "", "void *CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,", "                                  int lastpos, int type)", "{", "    return X509at_get0_data_by_OBJ(si->signedAttrs, oid, lastpos, type);", "}", "", "int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si)", "{"], "SrcStart": 126}, {"FileMD5": "2e63aa1a7e1d10f4c04362012a244c01.c", "FileName": "crypto/x509/x509_att.c", "Line": 160, "Tip": "<b>obj</b> is used as the 2nd parameter in function <b>X509at_get_attr_by_OBJ</b> (<b>obj</b> can be null)", "SrcLines": ["    int i;", "    X509_ATTRIBUTE *at;", "    i = X509at_get_attr_by_OBJ(x, obj, lastpos);", "    if (i == -1)", "        return NULL;", "    if ((lastpos <= -2) && (X509at_get_attr_by_OBJ(x, obj, i) != -1))", "        return NULL;", "    at = X509at_get_attr(x, i);", "    if (lastpos <= -3 && (X509_ATTRIBUTE_count(at) != 1))", "        return NULL;"], "SrcStart": 155}, {"FileMD5": "2e63aa1a7e1d10f4c04362012a244c01.c", "FileName": "crypto/x509/x509_att.c", "Line": 49, "Tip": "<b>obj</b> is used as the 2nd parameter in function <b>OBJ_cmp</b> (<b>obj</b> can be null)", "SrcLines": ["    if (lastpos < 0)", "        lastpos = 0;", "    n = sk_X509_ATTRIBUTE_num(sk);", "    for (; lastpos < n; lastpos++) {", "        ex = sk_X509_ATTRIBUTE_value(sk, lastpos);", "        if (OBJ_cmp(ex->object, obj) == 0)", "            return lastpos;", "    }", "    return -1;", "}"], "SrcStart": 44}, {"FileMD5": "131c594327cfcf58e62602c54e26fa9d.c", "FileName": "crypto/objects/obj_lib.c", "Line": 61, "Tip": "Load value from <b>b-&gt;length</b>", "SrcLines": ["", "int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b)", "{", "    int ret;", "", "    ret = (a->length - b->length);", "    if (ret)", "        return ret;", "    return memcmp(a->data, b->data, a->length);", "}"], "SrcStart": 56}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/objects/obj_lib.c", "Line": 61}, {"HashID": "855de34009ff8ea2bc3943f3e6d339cc", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "d1834fecb601c24ce6aa57dc1ba2e0a2.h", "FileName": "include/openssl/ocsp.h", "Line": 106, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["#  define V_OCSP_CERTSTATUS_UNKNOWN 2", "", "typedef struct ocsp_cert_status_st OCSP_CERTSTATUS;", "typedef struct ocsp_single_response_st OCSP_SINGLERESP;", "", "DEFINE_STACK_OF(OCSP_SINGLERESP)", "", "typedef struct ocsp_response_data_st OCSP_RESPDATA;", "", "typedef struct ocsp_basic_response_st OCSP_BASICRESP;"], "SrcStart": 101}, {"FileMD5": "be7c41a9fa951e22306a7c3190180f24.c", "FileName": "crypto/ocsp/ocsp_cl.c", "Line": 263, "Tip": "Function <b>sk_OCSP_SINGLERESP_value</b> executes and stores the return value to <b>single</b> (<b>single</b> can be null)", "SrcLines": ["        last = 0;", "    else", "        last++;", "    sresp = bs->tbsResponseData.responses;", "    for (i = last; i < sk_OCSP_SINGLERESP_num(sresp); i++) {", "        single = sk_OCSP_SINGLERESP_value(sresp, i);", "        if (!OCSP_id_cmp(id, single->certId))", "            return i;", "    }", "    return -1;"], "SrcStart": 258}, {"FileMD5": "be7c41a9fa951e22306a7c3190180f24.c", "FileName": "crypto/ocsp/ocsp_cl.c", "Line": 264, "Tip": "Load value from <b>single-&gt;certId</b>", "SrcLines": ["    else", "        last++;", "    sresp = bs->tbsResponseData.responses;", "    for (i = last; i < sk_OCSP_SINGLERESP_num(sresp); i++) {", "        single = sk_OCSP_SINGLERESP_value(sresp, i);", "        if (!OCSP_id_cmp(id, single->certId))", "            return i;", "    }", "    return -1;", "}"], "SrcStart": 259}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/ocsp/ocsp_cl.c", "Line": 264}, {"HashID": "49863c06bfa4cfc7e6e0b0acce258ffa", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "75ebffad16e89306fda76d6551ed7b03.c", "FileName": "crypto/x509/x_pubkey.c", "Line": 378, "Tip": "Return <b>null</b> to caller", "SrcLines": ["ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x)", "{", "    if (x == NULL)", "        return NULL;", "    return x->cert_info.key->public_key;", "}"], "SrcStart": 373}, {"FileMD5": "c2f6f539d76d64f5cb83f1f712e2ade6.c", "FileName": "crypto/ocsp/ocsp_lib.c", "Line": 37, "Tip": "Function <b>X509_get0_pubkey_bitstr</b> executes and stores the return value to <b>ikey</b> (<b>ikey</b> can be null)", "SrcLines": ["        serial = X509_get0_serialNumber(subject);", "    } else {", "        iname = X509_get_subject_name(issuer);", "        serial = NULL;", "    }", "    ikey = X509_get0_pubkey_bitstr(issuer);", "    return OCSP_cert_id_new(dgst, iname, ikey, serial);", "}", "", "OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,"], "SrcStart": 32}, {"FileMD5": "c2f6f539d76d64f5cb83f1f712e2ade6.c", "FileName": "crypto/ocsp/ocsp_lib.c", "Line": 38, "Tip": "<b>ikey</b> is used as the 3rd parameter in function <b>OCSP_cert_id_new</b> (<b>ikey</b> can be null)", "SrcLines": ["    } else {", "        iname = X509_get_subject_name(issuer);", "        serial = NULL;", "    }", "    ikey = X509_get0_pubkey_bitstr(issuer);", "    return OCSP_cert_id_new(dgst, iname, ikey, serial);", "}", "", "OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,", "                              const X509_NAME *issuerName,"], "SrcStart": 33}, {"FileMD5": "c2f6f539d76d64f5cb83f1f712e2ade6.c", "FileName": "crypto/ocsp/ocsp_lib.c", "Line": 73, "Tip": "Load value from <b>issuerKey-&gt;data</b>", "SrcLines": ["        goto digerr;", "    if (!(ASN1_OCTET_STRING_set(&cid->issuerNameHash, md, i)))", "        goto err;", "", "    /* Calculate the issuerKey hash, excluding tag and length */", "    if (!EVP_Digest(issuerKey->data, issuerKey->length, md, &i, dgst, NULL))", "        goto err;", "", "    if (!(ASN1_OCTET_STRING_set(&cid->issuerKeyHash, md, i)))", "        goto err;"], "SrcStart": 68}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/ocsp/ocsp_lib.c", "Line": 73}, {"HashID": "ca35cd12431d101cae4413f8058f25e5", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f2272d8c3c73e81d46873146c8a9a7e1.c", "FileName": "crypto/stack/stack.c", "Line": 390, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 385}, {"FileMD5": "d9ef20ba0621a499a2a2cfbe5f9c86b7.h", "FileName": "include/openssl/pkcs7.h", "Line": 59, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["    X509_ALGOR *key_enc_algor;", "    ASN1_OCTET_STRING *enc_key;", "    X509 *cert;                 /* get the pub-key from this */", "} PKCS7_RECIP_INFO;", "", "DEFINE_STACK_OF(PKCS7_RECIP_INFO)", "", "typedef struct pkcs7_signed_st {", "    ASN1_INTEGER *version;      /* version 1 */", "    STACK_OF(X509_ALGOR) *md_algs; /* md used */"], "SrcStart": 54}, {"FileMD5": "161cb1882f6d12f106b664b3a8c048f2.c", "FileName": "crypto/pkcs7/pk7_doit.c", "Line": 1067, "Tip": "Function <b>sk_PKCS7_RECIP_INFO_value</b> executes and stores the return value to <b>ri</b> (<b>ri</b> can be null)", "SrcLines": ["    rsk = p7->d.signed_and_enveloped->recipientinfo;", "    if (rsk == NULL)", "        return NULL;", "    if (sk_PKCS7_RECIP_INFO_num(rsk) <= idx)", "        return NULL;", "    ri = sk_PKCS7_RECIP_INFO_value(rsk, idx);", "    return ri->issuer_and_serial;", "}", "", "ASN1_TYPE *PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid)"], "SrcStart": 1062}, {"FileMD5": "161cb1882f6d12f106b664b3a8c048f2.c", "FileName": "crypto/pkcs7/pk7_doit.c", "Line": 1068, "Tip": "Load value from <b>ri-&gt;issuer_and_serial</b>", "SrcLines": ["    if (rsk == NULL)", "        return NULL;", "    if (sk_PKCS7_RECIP_INFO_num(rsk) <= idx)", "        return NULL;", "    ri = sk_PKCS7_RECIP_INFO_value(rsk, idx);", "    return ri->issuer_and_serial;", "}", "", "ASN1_TYPE *PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid)", "{"], "SrcStart": 1063}], "Review": 80, "Time": 1630075710000, "DocID": "PE0001", "File": "crypto/pkcs7/pk7_doit.c", "Line": 1068}]}, "start": 41, "end": 50, "page": 6, "total_pages": 12, "language": "en"}