var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "59d759e5ef9b9d8f0a1bc2c7bdd43064", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "5b2e156f1814ba74e1beece99e15df89.c", "FileName": "libavformat/rdt.c", "Line": 338, "Tip": "Select the false branch at this point (<b>bufptr!=null</b> is false)", "SrcLines": ["", "int", "ff_rdt_parse_packet(RDTDemuxContext *s, AVPacket *pkt,", "                    uint8_t **bufptr, int len)", "{", "    uint8_t *buf = bufptr ? *bufptr : NULL;", "    int seq_no, flags = 0, stream_id, set_id, is_keyframe;", "    uint32_t timestamp;", "    int rv= 0;", ""], "SrcStart": 333}, {"FileMD5": "5b2e156f1814ba74e1beece99e15df89.c", "FileName": "libavformat/rdt.c", "Line": 338, "Tip": "<b>null</b> assigned to <b>buf</b> reaches here", "SrcLines": ["", "int", "ff_rdt_parse_packet(RDTDemuxContext *s, AVPacket *pkt,", "                    uint8_t **bufptr, int len)", "{", "    uint8_t *buf = bufptr ? *bufptr : NULL;", "    int seq_no, flags = 0, stream_id, set_id, is_keyframe;", "    uint32_t timestamp;", "    int rv= 0;", ""], "SrcStart": 333}, {"FileMD5": "5b2e156f1814ba74e1beece99e15df89.c", "FileName": "libavformat/rdt.c", "Line": 357, "Tip": "<b>null</b> is used as the 1st parameter in function <b>ff_rdt_parse_header</b>", "SrcLines": ["        return rv;", "    }", "", "    if (len < 12)", "        return -1;", "    rv = ff_rdt_parse_header(buf, len, &set_id, &seq_no, &stream_id, &is_keyframe, &timestamp);", "    if (rv < 0)", "        return rv;", "    if (is_keyframe &&", "        (set_id != s->prev_set_id || timestamp != s->prev_timestamp ||"], "SrcStart": 352}, {"FileMD5": "5b2e156f1814ba74e1beece99e15df89.c", "FileName": "libavformat/rdt.c", "Line": 203, "Tip": "Load value from <b>buf</b>", "SrcLines": ["", "    /* skip status packets */", "    while (len >= 5 && buf[1] == 0xFF /* status packet */) {", "        int pkt_len;", "", "        if (!(buf[0] & 0x80))", "            return -1; /* not followed by a data packet */", "", "        pkt_len = AV_RB16(buf+3);", "        buf += pkt_len;"], "SrcStart": 198}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavformat/rdt.c", "Line": 203}, {"HashID": "57f77a785e78a94fd46783c84a58caf2", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "90243ab598280afcf55c399dc39f880f.c", "FileName": "libavformat/rtmpproto.c", "Line": 1746, "Tip": "Select the false branch at this point (<b>cptr==null</b> is false)", "SrcLines": ["        snprintf(rt->auth_params, sizeof(rt->auth_params),", "                 \"?authmod=%s&user=%s\", authmod, rt->username);", "        return 0;", "    }", "", "    if (!(cptr = strstr(desc, \"?reason=needauth\"))) {", "        av_log(s, AV_LOG_ERROR, \"No auth parameters found\\n\");", "        return AVERROR_UNKNOWN;", "    }", ""], "SrcStart": 1741}, {"FileMD5": "90243ab598280afcf55c399dc39f880f.c", "FileName": "libavformat/rtmpproto.c", "Line": 1761, "Tip": "Select the true branch at this point (<b>strcmp(ptr,&quot;&quot;user&quot;&quot;)==0</b> is true)", "SrcLines": ["        char *value = strchr(ptr, '=');", "        if (next)", "            *next++ = '\\0';", "        if (value) {", "            *value++ = '\\0';", "            if (!strcmp(ptr, \"user\")) {", "                user = value;", "            } else if (!strcmp(ptr, \"salt\")) {", "                salt = value;", "            } else if (!strcmp(ptr, \"opaque\")) {"], "SrcStart": 1756}, {"FileMD5": "90243ab598280afcf55c399dc39f880f.c", "FileName": "libavformat/rtmpproto.c", "Line": 1754, "Tip": "Select the false branch at this point (<b>ptr!=null</b> is false)", "SrcLines": ["    }", "", "    av_strlcpy(buf, cptr + 1, sizeof(buf));", "    ptr = buf;", "", "    while (ptr) {", "        char *next  = strchr(ptr, '&');", "        char *value = strchr(ptr, '=');", "        if (next)", "            *next++ = '\\0';"], "SrcStart": 1749}, {"FileMD5": "90243ab598280afcf55c399dc39f880f.c", "FileName": "libavformat/rtmpproto.c", "Line": 1784, "Tip": "<b>null</b> is used as the 3rd parameter in function <b>do_llnw_auth</b>", "SrcLines": ["", "    if (!strcmp(authmod, \"adobe\")) {", "        if ((ret = do_adobe_auth(rt, user, salt, opaque, challenge)) < 0)", "            return ret;", "    } else {", "        if ((ret = do_llnw_auth(rt, user, nonce)) < 0)", "            return ret;", "    }", "", "    rt->auth_tried = 1;"], "SrcStart": 1779}, {"FileMD5": "90243ab598280afcf55c399dc39f880f.c", "FileName": "libavformat/rtmpproto.c", "Line": 1693, "Tip": "<b>nonce</b> is passed to function <b>snprintf</b> as a variadic argument (<b>nonce</b> can be null)", "SrcLines": ["    av_md5_update(md5, \":\", 1);", "    av_md5_update(md5, hashstr2, strlen(hashstr2));", "    av_md5_final(md5, hash);", "    ff_data_to_hex(hashstr1, hash, 16, 1);", "", "    snprintf(rt->auth_params, sizeof(rt->auth_params),", "             \"?authmod=%s&user=%s&nonce=%s&cnonce=%s&nc=%s&response=%s\",", "             \"llnw\", user, nonce, cnonce, nc, hashstr1);", "", "    av_free(md5);"], "SrcStart": 1688}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavformat/rtmpproto.c", "Line": 1693}, {"HashID": "88d1f2d9e29532218d9d26543b86c2ce", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "27d96bf45428b0c227f2c59d78357df6.c", "FileName": "libavformat/rtpdec.c", "Line": 783, "Tip": "Select the false branch at this point (<b>bufptr!=null</b> is false)", "SrcLines": ["}", "", "static int rtp_parse_one_packet(RTPDemuxContext *s, AVPacket *pkt,", "                                uint8_t **bufptr, int len)", "{", "    uint8_t *buf = bufptr ? *bufptr : NULL;", "    int flags = 0;", "    uint32_t timestamp;", "    int rv = 0;", ""], "SrcStart": 778}, {"FileMD5": "27d96bf45428b0c227f2c59d78357df6.c", "FileName": "libavformat/rtpdec.c", "Line": 783, "Tip": "<b>null</b> assigned to <b>buf</b> reaches here", "SrcLines": ["}", "", "static int rtp_parse_one_packet(RTPDemuxContext *s, AVPacket *pkt,", "                                uint8_t **bufptr, int len)", "{", "    uint8_t *buf = bufptr ? *bufptr : NULL;", "    int flags = 0;", "    uint32_t timestamp;", "    int rv = 0;", ""], "SrcStart": 778}, {"FileMD5": "27d96bf45428b0c227f2c59d78357df6.c", "FileName": "libavformat/rtpdec.c", "Line": 810, "Tip": "Load value from <b>*(buf)</b>", "SrcLines": ["    }", "", "    if (len < 12)", "        return -1;", "", "    if ((buf[0] & 0xc0) != (RTP_VERSION << 6))", "        return -1;", "    if (RTP_PT_IS_RTCP(buf[1])) {", "        return rtcp_parse_packet(s, buf, len);", "    }"], "SrcStart": 805}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavformat/rtpdec.c", "Line": 810}, {"HashID": "ef1fdb2600613b9ee96e88853835c5a4", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "8b62cc623655600de60135b3b83247b0.c", "FileName": "libavformat/segment.c", "Line": 247, "Tip": "Store <b>null</b> to <b>seg-&gt;avf</b>", "SrcLines": ["    AVFormatContext *oc = seg->avf;", "    int err = 0;", "", "    if (write_header) {", "        avformat_free_context(oc);", "        seg->avf = NULL;", "        if ((err = segment_mux_init(s)) < 0)", "            return err;", "        oc = seg->avf;", "    }"], "SrcStart": 242}, {"FileMD5": "8b62cc623655600de60135b3b83247b0.c", "FileName": "libavformat/segment.c", "Line": 250, "Tip": "Load value from <b>seg-&gt;avf</b> and assign to <b>oc</b>", "SrcLines": ["    if (write_header) {", "        avformat_free_context(oc);", "        seg->avf = NULL;", "        if ((err = segment_mux_init(s)) < 0)", "            return err;", "        oc = seg->avf;", "    }", "", "    seg->segment_idx++;", "    if ((seg->segment_idx_wrap) && (seg->segment_idx % seg->segment_idx_wrap == 0))"], "SrcStart": 245}, {"FileMD5": "8b62cc623655600de60135b3b83247b0.c", "FileName": "libavformat/segment.c", "Line": 260, "Tip": "Load value from <b>oc-&gt;url</b>", "SrcLines": ["        seg->segment_idx_wrap_nb++;", "", "    if ((err = set_segment_filename(s)) < 0)", "        return err;", "", "    if ((err = s->io_open(s, &oc->pb, oc->url, AVIO_FLAG_WRITE, NULL)) < 0) {", "        av_log(s, AV_LOG_ERROR, \"Failed to open segment '%s'\\n\", oc->url);", "        return err;", "    }", "    if (!seg->individual_header_trailer)"], "SrcStart": 255}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavformat/segment.c", "Line": 260}, {"HashID": "74bf428ebafd49870746ac55b3d179cb", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "0497f341c961db70505b973a086459b7.c", "FileName": "libavformat/hlsenc.c", "Line": 803, "Tip": "Select the false branch at this point (<b>vs-&gt;vtt_oformat!=null</b> is false)", "SrcLines": ["    oc->io_open                  = s->io_open;", "    oc->io_close                 = s->io_close;", "    oc->strict_std_compliance    = s->strict_std_compliance;", "    av_dict_copy(&oc->metadata, s->metadata, 0);", "", "    if (vs->vtt_oformat) {", "        ret = avformat_alloc_output_context2(&vs->vtt_avf, vs->vtt_oformat, NULL, NULL);", "        if (ret < 0)", "            return ret;", "        vtt_oc          = vs->vtt_avf;"], "SrcStart": 798}, {"FileMD5": "0497f341c961db70505b973a086459b7.c", "FileName": "libavformat/hlsenc.c", "Line": 811, "Tip": "<b>null</b> assigned to <b>loc</b> reaches here", "SrcLines": ["            return ret;", "        vtt_oc          = vs->vtt_avf;", "        av_dict_copy(&vtt_oc->metadata, s->metadata, 0);", "    }", "", "    for (i = 0; i < vs->nb_streams; i++) {", "        AVStream *st;", "        AVFormatContext *loc;", "        if (vs->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_SUBTITLE)", "            loc = vtt_oc;"], "SrcStart": 806}, {"FileMD5": "0497f341c961db70505b973a086459b7.c", "FileName": "libavformat/hlsenc.c", "Line": 814, "Tip": "Select the true branch at this point (<b>vs-&gt;streams[i]-&gt;codecpar-&gt;codec_type==3</b> is true)", "SrcLines": ["    }", "", "    for (i = 0; i < vs->nb_streams; i++) {", "        AVStream *st;", "        AVFormatContext *loc;", "        if (vs->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_SUBTITLE)", "            loc = vtt_oc;", "        else", "            loc = oc;", ""], "SrcStart": 809}, {"FileMD5": "0497f341c961db70505b973a086459b7.c", "FileName": "libavformat/hlsenc.c", "Line": 819, "Tip": "<b>loc</b> is used as the 1st parameter in function <b>avformat_new_stream</b> (<b>loc</b> can be null)", "SrcLines": ["        if (vs->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_SUBTITLE)", "            loc = vtt_oc;", "        else", "            loc = oc;", "", "        if (!(st = avformat_new_stream(loc, NULL)))", "            return AVERROR(ENOMEM);", "        avcodec_parameters_copy(st->codecpar, vs->streams[i]->codecpar);", "        if (!oc->oformat->codec_tag ||", "            av_codec_get_id (oc->oformat->codec_tag, vs->streams[i]->codecpar->codec_tag) == st->codecpar->codec_id ||"], "SrcStart": 814}, {"FileMD5": "a43621020024b19204a0ae51c552b849.c", "FileName": "libavformat/utils.c", "Line": 4525, "Tip": "Load value from <b>s-&gt;max_streams</b>", "SrcLines": ["{", "    AVStream *st;", "    int i;", "    AVStream **streams;", "", "    if (s->nb_streams >= FFMIN(s->max_streams, INT_MAX/sizeof(*streams))) {", "        if (s->max_streams < INT_MAX/sizeof(*streams))", "            av_log(s, AV_LOG_ERROR, \"Number of streams exceeds max_streams parameter (%d), see the documentation if you wish to increase it\\n\", s->max_streams);", "        return NULL;", "    }"], "SrcStart": 4520}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavformat/utils.c", "Line": 4525}, {"HashID": "4fa66b325b02dc739bef5444344358cd", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 132, "Tip": "Return <b>null</b> to caller", "SrcLines": ["#if CONFIG_MEMORY_POISONING", "    if (ptr)", "        memset(ptr, FF_MEMORY_POISON, size);", "#endif", "    return ptr;", "}", "", "void *av_realloc(void *ptr, size_t size)", "{", "    if (size > max_alloc_size)"], "SrcStart": 127}, {"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 239, "Tip": "Function <b>av_malloc</b> executes and stores the return value to <b>ptr</b> (<b>ptr</b> can be null)", "SrcLines": ["    av_free(val);", "}", "", "void *av_mallocz(size_t size)", "{", "    void *ptr = av_malloc(size);", "    if (ptr)", "        memset(ptr, 0, size);", "    return ptr;", "}"], "SrcStart": 234}, {"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 242, "Tip": "Return <b>ptr</b> to caller, which can be null (The return value can be null)", "SrcLines": ["void *av_mallocz(size_t size)", "{", "    void *ptr = av_malloc(size);", "    if (ptr)", "        memset(ptr, 0, size);", "    return ptr;", "}", "", "void *av_calloc(size_t nmemb, size_t size)", "{"], "SrcStart": 237}, {"FileMD5": "d02ba5c3a40fe2cf606e403259246480.c", "FileName": "libavutil/eval.c", "Line": 348, "Tip": "Store value to <b>d</b>", "SrcLines": ["    av_freep(&e);", "}", "", "static int parse_primary(AVExpr **e, Parser *p)", "{", "    AVExpr *d = av_mallocz(sizeof(AVExpr));", "    char *next = p->s, *s0 = p->s;", "    int ret, i;", "", "    if (!d)"], "SrcStart": 343}, {"FileMD5": "d02ba5c3a40fe2cf606e403259246480.c", "FileName": "libavutil/eval.c", "Line": 460, "Tip": "Load value from <b>d</b>", "SrcLines": ["    else if (strmatch(next, \"root\"  )) d->type = e_root;", "    else if (strmatch(next, \"floor\" )) d->type = e_floor;", "    else if (strmatch(next, \"ceil\"  )) d->type = e_ceil;", "    else if (strmatch(next, \"trunc\" )) d->type = e_trunc;", "    else if (strmatch(next, \"round\" )) d->type = e_round;", "    else if (strmatch(next, \"sqrt\"  )) d->type = e_sqrt;", "    else if (strmatch(next, \"not\"   )) d->type = e_not;", "    else if (strmatch(next, \"pow\"   )) d->type = e_pow;", "    else if (strmatch(next, \"print\" )) d->type = e_print;", "    else if (strmatch(next, \"random\")) d->type = e_random;"], "SrcStart": 455}, {"FileMD5": "d02ba5c3a40fe2cf606e403259246480.c", "FileName": "libavutil/eval.c", "Line": 460, "Tip": "Store <b>31</b> to <b>d-&gt;type</b>", "SrcLines": ["    else if (strmatch(next, \"root\"  )) d->type = e_root;", "    else if (strmatch(next, \"floor\" )) d->type = e_floor;", "    else if (strmatch(next, \"ceil\"  )) d->type = e_ceil;", "    else if (strmatch(next, \"trunc\" )) d->type = e_trunc;", "    else if (strmatch(next, \"round\" )) d->type = e_round;", "    else if (strmatch(next, \"sqrt\"  )) d->type = e_sqrt;", "    else if (strmatch(next, \"not\"   )) d->type = e_not;", "    else if (strmatch(next, \"pow\"   )) d->type = e_pow;", "    else if (strmatch(next, \"print\" )) d->type = e_print;", "    else if (strmatch(next, \"random\")) d->type = e_random;"], "SrcStart": 455}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavutil/eval.c", "Line": 460}, {"HashID": "9c7180dfd28f147c907d3c467f574f1e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "7b186286e96582189b5c273da69f8383.c", "FileName": "libavutil/hwcontext_vaapi.c", "Line": 495, "Tip": "Store <b>null</b> to <b>test_surface</b>", "SrcLines": ["    AVVAAPIFramesContext  *avfc = hwfc->hwctx;", "    VAAPIFramesContext     *ctx = hwfc->internal->priv;", "    AVVAAPIDeviceContext *hwctx = hwfc->device_ctx->hwctx;", "    const VAAPIFormatDescriptor *desc;", "    VAImageFormat *expected_format;", "    AVBufferRef *test_surface = NULL;", "    VASurfaceID test_surface_id;", "    VAImage test_image;", "    VAStatus vas;", "    int err, i;"], "SrcStart": 490}, {"FileMD5": "7b186286e96582189b5c273da69f8383.c", "FileName": "libavutil/hwcontext_vaapi.c", "Line": 601, "Tip": "Load value from <b>test_surface</b>", "SrcLines": ["                   \"internal buffer pool.\\n\");", "            err = AVERROR(ENOMEM);", "            goto fail;", "        }", "    }", "    test_surface_id = (VASurfaceID)(uintptr_t)test_surface->data;", "", "    ctx->derive_works = 0;", "", "    err = vaapi_get_image_format(hwfc->device_ctx,"], "SrcStart": 596}, {"FileMD5": "7b186286e96582189b5c273da69f8383.c", "FileName": "libavutil/hwcontext_vaapi.c", "Line": 601, "Tip": "Load value from <b>test_surface-&gt;data</b>", "SrcLines": ["                   \"internal buffer pool.\\n\");", "            err = AVERROR(ENOMEM);", "            goto fail;", "        }", "    }", "    test_surface_id = (VASurfaceID)(uintptr_t)test_surface->data;", "", "    ctx->derive_works = 0;", "", "    err = vaapi_get_image_format(hwfc->device_ctx,"], "SrcStart": 596}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavutil/hwcontext_vaapi.c", "Line": 601}]}, "start": 61, "end": 67, "page": 8, "total_pages": 9, "language": "en"}