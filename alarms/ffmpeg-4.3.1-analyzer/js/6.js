var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "abbf43a9c1cf2b62f0f41824874652d8", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1502, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1497}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1497, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1492}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1486, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>*(rframe)</b> to null, where <b>rframe</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    if (!ff_inlink_check_available_frame(link))", "        return 0;", "", "    if (link->fifo.samples_skipped) {", "        frame = ff_framequeue_peek(&link->fifo, 0);", "        return ff_inlink_consume_samples(link, frame->nb_samples, frame->nb_samples, rframe);", "    }", "", "    frame = ff_framequeue_take(&link->fifo);", "    consume_update(link, frame);"], "SrcStart": 1481}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1477, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    link->dst->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "    link->frame_count_out++;", "}", "", "int ff_inlink_consume_frame(AVFilterLink *link, AVFrame **rframe)", "{", "    AVFrame *frame;", "", "    *rframe = NULL;", "    if (!ff_inlink_check_available_frame(link))"], "SrcStart": 1472}, {"FileMD5": "7122abe17da9cc5708c0f2eabdd69fe7.c", "FileName": "libavfilter/vf_xfade.c", "Line": 1524, "Tip": "Function <b>ff_inlink_consume_frame</b> modifies the value <b>in</b> to null, where <b>&amp;(in)</b> is used as the 2nd parameter (<b>rframe</b>)", "SrcLines": ["            }", "            s->pts = s->xf[0]->pts;", "            if (s->first_pts + s->offset_pts > s->xf[0]->pts) {", "                s->xf[0] = NULL;", "                s->need_second = 0;", "                ff_inlink_consume_frame(ctx->inputs[0], &in);", "                return ff_filter_frame(outlink, in);", "            }", "", "            s->need_second = 1;"], "SrcStart": 1519}, {"FileMD5": "7122abe17da9cc5708c0f2eabdd69fe7.c", "FileName": "libavfilter/vf_xfade.c", "Line": 1525, "Tip": "<b>in</b> is used as the 2nd parameter in function <b>ff_filter_frame</b> (<b>in</b> can be null)", "SrcLines": ["            s->pts = s->xf[0]->pts;", "            if (s->first_pts + s->offset_pts > s->xf[0]->pts) {", "                s->xf[0] = NULL;", "                s->need_second = 0;", "                ff_inlink_consume_frame(ctx->inputs[0], &in);", "                return ff_filter_frame(outlink, in);", "            }", "", "            s->need_second = 1;", "        }"], "SrcStart": 1520}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1092, "Tip": "Load value from <b>frame</b>", "SrcLines": ["            av_assert1(frame->format                 == link->format);", "            av_assert1(frame->width               == link->w);", "            av_assert1(frame->height               == link->h);", "        }", "    } else {", "        if (frame->format != link->format) {", "            av_log(link->dst, AV_LOG_ERROR, \"Format change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channels != link->channels) {"], "SrcStart": 1087}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1092, "Tip": "Load value from <b>frame-&gt;format</b>", "SrcLines": ["            av_assert1(frame->format                 == link->format);", "            av_assert1(frame->width               == link->w);", "            av_assert1(frame->height               == link->h);", "        }", "    } else {", "        if (frame->format != link->format) {", "            av_log(link->dst, AV_LOG_ERROR, \"Format change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channels != link->channels) {"], "SrcStart": 1087}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1092}, {"HashID": "779a5d0340932ce42851d8faf7fd0ff7", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1502, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1497}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1497, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1492}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1486, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>*(rframe)</b> to null, where <b>rframe</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    if (!ff_inlink_check_available_frame(link))", "        return 0;", "", "    if (link->fifo.samples_skipped) {", "        frame = ff_framequeue_peek(&link->fifo, 0);", "        return ff_inlink_consume_samples(link, frame->nb_samples, frame->nb_samples, rframe);", "    }", "", "    frame = ff_framequeue_take(&link->fifo);", "    consume_update(link, frame);"], "SrcStart": 1481}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1477, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    link->dst->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "    link->frame_count_out++;", "}", "", "int ff_inlink_consume_frame(AVFilterLink *link, AVFrame **rframe)", "{", "    AVFrame *frame;", "", "    *rframe = NULL;", "    if (!ff_inlink_check_available_frame(link))"], "SrcStart": 1472}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1202, "Tip": "Function <b>ff_inlink_consume_frame</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 2nd parameter (<b>rframe</b>)", "SrcLines": ["    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);", "        return ret;"], "SrcStart": 1197}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1214, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1209}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1066, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))", "        filter_frame = default_filter_frame;", "    ret = filter_frame(link, frame);", "    link->frame_count_out++;", "    return ret;", "", "fail:"], "SrcStart": 1061}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1041, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    return pads[pad_idx].type;", "}", "", "static int default_filter_frame(AVFilterLink *link, AVFrame *frame)", "{", "    return ff_filter_frame(link->dst->outputs[0], frame);", "}", "", "static int ff_filter_frame_framed(AVFilterLink *link, AVFrame *frame)", "{"], "SrcStart": 1036}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1096, "Tip": "Load value from <b>frame</b>", "SrcLines": ["    } else {", "        if (frame->format != link->format) {", "            av_log(link->dst, AV_LOG_ERROR, \"Format change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channels != link->channels) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel count change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channel_layout != link->channel_layout) {"], "SrcStart": 1091}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1096, "Tip": "Load value from <b>frame-&gt;channels</b>", "SrcLines": ["    } else {", "        if (frame->format != link->format) {", "            av_log(link->dst, AV_LOG_ERROR, \"Format change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channels != link->channels) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel count change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channel_layout != link->channel_layout) {"], "SrcStart": 1091}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1096}, {"HashID": "5ec0564ff812a46afebb98b5db76d821", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1502, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1497}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1497, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1492}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1486, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>*(rframe)</b> to null, where <b>rframe</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    if (!ff_inlink_check_available_frame(link))", "        return 0;", "", "    if (link->fifo.samples_skipped) {", "        frame = ff_framequeue_peek(&link->fifo, 0);", "        return ff_inlink_consume_samples(link, frame->nb_samples, frame->nb_samples, rframe);", "    }", "", "    frame = ff_framequeue_take(&link->fifo);", "    consume_update(link, frame);"], "SrcStart": 1481}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1477, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    link->dst->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "    link->frame_count_out++;", "}", "", "int ff_inlink_consume_frame(AVFilterLink *link, AVFrame **rframe)", "{", "    AVFrame *frame;", "", "    *rframe = NULL;", "    if (!ff_inlink_check_available_frame(link))"], "SrcStart": 1472}, {"FileMD5": "7122abe17da9cc5708c0f2eabdd69fe7.c", "FileName": "libavfilter/vf_xfade.c", "Line": 1524, "Tip": "Function <b>ff_inlink_consume_frame</b> modifies the value <b>in</b> to null, where <b>&amp;(in)</b> is used as the 2nd parameter (<b>rframe</b>)", "SrcLines": ["            }", "            s->pts = s->xf[0]->pts;", "            if (s->first_pts + s->offset_pts > s->xf[0]->pts) {", "                s->xf[0] = NULL;", "                s->need_second = 0;", "                ff_inlink_consume_frame(ctx->inputs[0], &in);", "                return ff_filter_frame(outlink, in);", "            }", "", "            s->need_second = 1;"], "SrcStart": 1519}, {"FileMD5": "7122abe17da9cc5708c0f2eabdd69fe7.c", "FileName": "libavfilter/vf_xfade.c", "Line": 1525, "Tip": "<b>in</b> is used as the 2nd parameter in function <b>ff_filter_frame</b> (<b>in</b> can be null)", "SrcLines": ["            s->pts = s->xf[0]->pts;", "            if (s->first_pts + s->offset_pts > s->xf[0]->pts) {", "                s->xf[0] = NULL;", "                s->need_second = 0;", "                ff_inlink_consume_frame(ctx->inputs[0], &in);", "                return ff_filter_frame(outlink, in);", "            }", "", "            s->need_second = 1;", "        }"], "SrcStart": 1520}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1104, "Tip": "Load value from <b>frame</b>", "SrcLines": ["        }", "        if (frame->channel_layout != link->channel_layout) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel layout change is not supported\\n\");", "            goto error;", "        }", "        if (frame->sample_rate != link->sample_rate) {", "            av_log(link->dst, AV_LOG_ERROR, \"Sample rate change is not supported\\n\");", "            goto error;", "        }", "    }"], "SrcStart": 1099}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1104, "Tip": "Load value from <b>frame-&gt;sample_rate</b>", "SrcLines": ["        }", "        if (frame->channel_layout != link->channel_layout) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel layout change is not supported\\n\");", "            goto error;", "        }", "        if (frame->sample_rate != link->sample_rate) {", "            av_log(link->dst, AV_LOG_ERROR, \"Sample rate change is not supported\\n\");", "            goto error;", "        }", "    }"], "SrcStart": 1099}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1104}, {"HashID": "d2f746144805c1d059090d17680fa261", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1502, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1497}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1497, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1492}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1201, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    AVFilterContext *dst = link->dst;", "    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);"], "SrcStart": 1196}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1214, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1209}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1060, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_inlink_process_commands</b> (<b>frame</b> can be null)", "SrcLines": ["        ret = ff_inlink_make_frame_writable(link, &frame);", "        if (ret < 0)", "            goto fail;", "    }", "", "    ff_inlink_process_commands(link, frame);", "    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))"], "SrcStart": 1055}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1573, "Tip": "Load value from <b>frame-&gt;pts</b>", "SrcLines": ["", "int ff_inlink_process_commands(AVFilterLink *link, const AVFrame *frame)", "{", "    AVFilterCommand *cmd = link->dst->command_queue;", "", "    while(cmd && cmd->time <= frame->pts * av_q2d(link->time_base)){", "        av_log(link->dst, AV_LOG_DEBUG,", "               \"Processing command time:%f command:%s arg:%s\\n\",", "               cmd->time, cmd->command, cmd->arg);", "        avfilter_process_command(link->dst, cmd->command, cmd->arg, 0, 0, cmd->flags);"], "SrcStart": 1568}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1573}, {"HashID": "c4380182297bf50591835c9991bec75c", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1502, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1497}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1497, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1492}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1201, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    AVFilterContext *dst = link->dst;", "    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);"], "SrcStart": 1196}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1214, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1209}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1061, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_inlink_evaluate_timeline_at_frame</b> (<b>frame</b> can be null)", "SrcLines": ["        if (ret < 0)", "            goto fail;", "    }", "", "    ff_inlink_process_commands(link, frame);", "    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))", "        filter_frame = default_filter_frame;"], "SrcStart": 1056}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1587, "Tip": "Load value from <b>frame-&gt;pts</b> and assign to <b>pts</b>", "SrcLines": ["}", "", "int ff_inlink_evaluate_timeline_at_frame(AVFilterLink *link, const AVFrame *frame)", "{", "    AVFilterContext *dstctx = link->dst;", "    int64_t pts = frame->pts;", "    int64_t pos = frame->pkt_pos;", "", "    if (!dstctx->enable_str)", "        return 1;"], "SrcStart": 1582}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1587}, {"HashID": "17df7fce0faec629cfc74ae0cad6c857", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1502, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1497}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1497, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1492}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1486, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>*(rframe)</b> to null, where <b>rframe</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    if (!ff_inlink_check_available_frame(link))", "        return 0;", "", "    if (link->fifo.samples_skipped) {", "        frame = ff_framequeue_peek(&link->fifo, 0);", "        return ff_inlink_consume_samples(link, frame->nb_samples, frame->nb_samples, rframe);", "    }", "", "    frame = ff_framequeue_take(&link->fifo);", "    consume_update(link, frame);"], "SrcStart": 1481}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1477, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    link->dst->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "    link->frame_count_out++;", "}", "", "int ff_inlink_consume_frame(AVFilterLink *link, AVFrame **rframe)", "{", "    AVFrame *frame;", "", "    *rframe = NULL;", "    if (!ff_inlink_check_available_frame(link))"], "SrcStart": 1472}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1202, "Tip": "Function <b>ff_inlink_consume_frame</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 2nd parameter (<b>rframe</b>)", "SrcLines": ["    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);", "        return ret;"], "SrcStart": 1197}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1214, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1209}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1061, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_inlink_evaluate_timeline_at_frame</b> (<b>frame</b> can be null)", "SrcLines": ["        if (ret < 0)", "            goto fail;", "    }", "", "    ff_inlink_process_commands(link, frame);", "    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))", "        filter_frame = default_filter_frame;"], "SrcStart": 1056}, {"FileMD5": "40d67385f90d3439a9d7b3b6032e7c5a.c", "FileName": "libavfilter/avfilter.c", "Line": 1588, "Tip": "Load value from <b>frame-&gt;pkt_pos</b> and assign to <b>pos</b>", "SrcLines": ["", "int ff_inlink_evaluate_timeline_at_frame(AVFilterLink *link, const AVFrame *frame)", "{", "    AVFilterContext *dstctx = link->dst;", "    int64_t pts = frame->pts;", "    int64_t pos = frame->pkt_pos;", "", "    if (!dstctx->enable_str)", "        return 1;", ""], "SrcStart": 1583}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1588}, {"HashID": "a59df9e2b9e9a6279138b1be2a6fc2b6", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bc36c75700387f8c79dabb45050e3223.c", "FileName": "libavfilter/framesync.c", "Line": 255, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;", "", "    if (!fs->in[in].frame) {", "        *rframe = NULL;", "        return 0;", "    }", "    frame = fs->in[in].frame;", "    if (get) {"], "SrcStart": 250}, {"FileMD5": "bc36c75700387f8c79dabb45050e3223.c", "FileName": "libavfilter/framesync.c", "Line": 248, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    fs->in[in].have_next  = 1;", "}", "", "int ff_framesync_get_frame(FFFrameSync *fs, unsigned in, AVFrame **rframe,", "                            unsigned get)", "{", "    AVFrame *frame;", "    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;"], "SrcStart": 243}, {"FileMD5": "938f9dd2bc68ca55ac66efecd8fe23b2.c", "FileName": "libavfilter/vf_premultiply.c", "Line": 539, "Tip": "Function <b>ff_framesync_get_frame</b> modifies the value <b>base</b> to null, where <b>&amp;(base)</b> is used as the 3rd parameter (<b>rframe</b>)", "SrcLines": ["    PreMultiplyContext *s = fs->opaque;", "    AVFilterLink *outlink = ctx->outputs[0];", "    AVFrame *out = NULL, *base, *alpha;", "    int ret;", "", "    if ((ret = ff_framesync_get_frame(&s->fs, 0, &base,  0)) < 0 ||", "        (ret = ff_framesync_get_frame(&s->fs, 1, &alpha, 0)) < 0)", "        return ret;", "", "    if ((ret = filter_frame(ctx, &out, base, alpha)) < 0)"], "SrcStart": 534}, {"FileMD5": "938f9dd2bc68ca55ac66efecd8fe23b2.c", "FileName": "libavfilter/vf_premultiply.c", "Line": 543, "Tip": "<b>base</b> is used as the 3rd parameter in function <b>filter_frame</b> (<b>base</b> can be null)", "SrcLines": ["", "    if ((ret = ff_framesync_get_frame(&s->fs, 0, &base,  0)) < 0 ||", "        (ret = ff_framesync_get_frame(&s->fs, 1, &alpha, 0)) < 0)", "        return ret;", "", "    if ((ret = filter_frame(ctx, &out, base, alpha)) < 0)", "        return ret;", "", "    out->pts = av_rescale_q(base->pts, s->fs.time_base, outlink->time_base);", ""], "SrcStart": 538}, {"FileMD5": "938f9dd2bc68ca55ac66efecd8fe23b2.c", "FileName": "libavfilter/vf_premultiply.c", "Line": 423, "Tip": "Load value from <b>base-&gt;color_range</b>", "SrcLines": ["        if (!*out)", "            return AVERROR(ENOMEM);", "        av_frame_copy_props(*out, base);", "", "        full = base->color_range == AVCOL_RANGE_JPEG;", "        limited = base->color_range == AVCOL_RANGE_MPEG;", "", "        if (s->inverse) {", "            switch (outlink->format) {", "            case AV_PIX_FMT_YUV444P:"], "SrcStart": 418}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/vf_premultiply.c", "Line": 423}, {"HashID": "a9b2eed87552ba1607344223272c03ac", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bc36c75700387f8c79dabb45050e3223.c", "FileName": "libavfilter/framesync.c", "Line": 255, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;", "", "    if (!fs->in[in].frame) {", "        *rframe = NULL;", "        return 0;", "    }", "    frame = fs->in[in].frame;", "    if (get) {"], "SrcStart": 250}, {"FileMD5": "bc36c75700387f8c79dabb45050e3223.c", "FileName": "libavfilter/framesync.c", "Line": 248, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    fs->in[in].have_next  = 1;", "}", "", "int ff_framesync_get_frame(FFFrameSync *fs, unsigned in, AVFrame **rframe,", "                            unsigned get)", "{", "    AVFrame *frame;", "    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;"], "SrcStart": 243}, {"FileMD5": "938f9dd2bc68ca55ac66efecd8fe23b2.c", "FileName": "libavfilter/vf_premultiply.c", "Line": 539, "Tip": "Function <b>ff_framesync_get_frame</b> modifies the value <b>base</b> to null, where <b>&amp;(base)</b> is used as the 3rd parameter (<b>rframe</b>)", "SrcLines": ["    PreMultiplyContext *s = fs->opaque;", "    AVFilterLink *outlink = ctx->outputs[0];", "    AVFrame *out = NULL, *base, *alpha;", "    int ret;", "", "    if ((ret = ff_framesync_get_frame(&s->fs, 0, &base,  0)) < 0 ||", "        (ret = ff_framesync_get_frame(&s->fs, 1, &alpha, 0)) < 0)", "        return ret;", "", "    if ((ret = filter_frame(ctx, &out, base, alpha)) < 0)"], "SrcStart": 534}, {"FileMD5": "938f9dd2bc68ca55ac66efecd8fe23b2.c", "FileName": "libavfilter/vf_premultiply.c", "Line": 546, "Tip": "Load value from <b>base</b>", "SrcLines": ["        return ret;", "", "    if ((ret = filter_frame(ctx, &out, base, alpha)) < 0)", "        return ret;", "", "    out->pts = av_rescale_q(base->pts, s->fs.time_base, outlink->time_base);", "", "    return ff_filter_frame(outlink, out);", "}", ""], "SrcStart": 541}, {"FileMD5": "938f9dd2bc68ca55ac66efecd8fe23b2.c", "FileName": "libavfilter/vf_premultiply.c", "Line": 546, "Tip": "Load value from <b>base-&gt;pts</b>", "SrcLines": ["        return ret;", "", "    if ((ret = filter_frame(ctx, &out, base, alpha)) < 0)", "        return ret;", "", "    out->pts = av_rescale_q(base->pts, s->fs.time_base, outlink->time_base);", "", "    return ff_filter_frame(outlink, out);", "}", ""], "SrcStart": 541}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavfilter/vf_premultiply.c", "Line": 546}, {"HashID": "e247ae7617cbc2973dbe258f91c83e54", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f29e3e1cd9860377938b10bf145cabab.c", "FileName": "libavformat/aviobuf.c", "Line": 141, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    if (!s)", "        return NULL;", "    ffio_init_context(s, buffer, buffer_size, write_flag, opaque,", "                  read_packet, write_packet, seek);", "    return s;", "}", "", "void avio_context_free(AVIOContext **ps)", "{", "    av_freep(ps);"], "SrcStart": 136}, {"FileMD5": "b8ada2362a700d4502e1bb50f364fa44.c", "FileName": "libavformat/avidec.c", "Line": 1072, "Tip": "Store value to <b>pb</b>", "SrcLines": ["        int score      = AVPROBE_SCORE_EXTENSION, ret;", "        AVIStream *ast = st->priv_data;", "        ff_const59 AVInputFormat *sub_demuxer;", "        AVRational time_base;", "        int size;", "        AVIOContext *pb = avio_alloc_context(pkt->data + 7,", "                                             pkt->size - 7,", "                                             0, NULL, NULL, NULL, NULL);", "        AVProbeData pd;", "        unsigned int desc_len = avio_rl32(pb);"], "SrcStart": 1067}, {"FileMD5": "b8ada2362a700d4502e1bb50f364fa44.c", "FileName": "libavformat/avidec.c", "Line": 1078, "Tip": "Load value from <b>pb</b>", "SrcLines": ["                                             pkt->size - 7,", "                                             0, NULL, NULL, NULL, NULL);", "        AVProbeData pd;", "        unsigned int desc_len = avio_rl32(pb);", "", "        if (desc_len > pb->buf_end - pb->buf_ptr)", "            goto error;", "", "        ret = avio_get_str16le(pb, desc_len, desc, sizeof(desc));", "        avio_skip(pb, desc_len - ret);"], "SrcStart": 1073}, {"FileMD5": "b8ada2362a700d4502e1bb50f364fa44.c", "FileName": "libavformat/avidec.c", "Line": 1078, "Tip": "Load value from <b>pb-&gt;buf_ptr</b>", "SrcLines": ["                                             pkt->size - 7,", "                                             0, NULL, NULL, NULL, NULL);", "        AVProbeData pd;", "        unsigned int desc_len = avio_rl32(pb);", "", "        if (desc_len > pb->buf_end - pb->buf_ptr)", "            goto error;", "", "        ret = avio_get_str16le(pb, desc_len, desc, sizeof(desc));", "        avio_skip(pb, desc_len - ret);"], "SrcStart": 1073}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavformat/avidec.c", "Line": 1078}, {"HashID": "9ccaf7d286439dbc8bc7637c2ebdcb6c", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f29e3e1cd9860377938b10bf145cabab.c", "FileName": "libavformat/aviobuf.c", "Line": 141, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    if (!s)", "        return NULL;", "    ffio_init_context(s, buffer, buffer_size, write_flag, opaque,", "                  read_packet, write_packet, seek);", "    return s;", "}", "", "void avio_context_free(AVIOContext **ps)", "{", "    av_freep(ps);"], "SrcStart": 136}, {"FileMD5": "b8ada2362a700d4502e1bb50f364fa44.c", "FileName": "libavformat/avidec.c", "Line": 1072, "Tip": "Store value to <b>pb</b>", "SrcLines": ["        int score      = AVPROBE_SCORE_EXTENSION, ret;", "        AVIStream *ast = st->priv_data;", "        ff_const59 AVInputFormat *sub_demuxer;", "        AVRational time_base;", "        int size;", "        AVIOContext *pb = avio_alloc_context(pkt->data + 7,", "                                             pkt->size - 7,", "                                             0, NULL, NULL, NULL, NULL);", "        AVProbeData pd;", "        unsigned int desc_len = avio_rl32(pb);"], "SrcStart": 1067}, {"FileMD5": "b8ada2362a700d4502e1bb50f364fa44.c", "FileName": "libavformat/avidec.c", "Line": 1089, "Tip": "Load value from <b>pb</b>", "SrcLines": ["            av_dict_set(&st->metadata, \"title\", desc, 0);", "", "        avio_rl16(pb);   /* flags? */", "        avio_rl32(pb);   /* data size */", "", "        size = pb->buf_end - pb->buf_ptr;", "        pd = (AVProbeData) { .buf      = av_mallocz(size + AVPROBE_PADDING_SIZE),", "                             .buf_size = size };", "        if (!pd.buf)", "            goto error;"], "SrcStart": 1084}, {"FileMD5": "b8ada2362a700d4502e1bb50f364fa44.c", "FileName": "libavformat/avidec.c", "Line": 1089, "Tip": "Load value from <b>pb-&gt;buf_ptr</b>", "SrcLines": ["            av_dict_set(&st->metadata, \"title\", desc, 0);", "", "        avio_rl16(pb);   /* flags? */", "        avio_rl32(pb);   /* data size */", "", "        size = pb->buf_end - pb->buf_ptr;", "        pd = (AVProbeData) { .buf      = av_mallocz(size + AVPROBE_PADDING_SIZE),", "                             .buf_size = size };", "        if (!pd.buf)", "            goto error;"], "SrcStart": 1084}], "Review": 80, "Time": 1629218470000, "DocID": "PE0001", "File": "libavformat/avidec.c", "Line": 1089}]}, "start": 41, "end": 50, "page": 6, "total_pages": 9, "language": "en"}