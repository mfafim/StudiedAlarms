var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "3e9304826bf3e134e5aa89cdbe98619e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "5c15948175ab70f46bc099928c08bf06.c", "FileName": "crypto/async/async_wait.c", "Line": 151, "Tip": "Select the true branch at this point (<b>curr-&gt;key==key</b> is true)", "SrcLines": ["        if (curr->del == 1) {", "            /* This one has been marked deleted already so do nothing */", "            curr = curr->next;", "            continue;", "        }", "        if (curr->key == key) {", "            /* If fd has just been added, remove it from the list */", "            if (curr->add == 1) {", "                if (ctx->fds == curr) {", "                    ctx->fds = curr->next;"], "SrcStart": 146}, {"FileMD5": "5c15948175ab70f46bc099928c08bf06.c", "FileName": "crypto/async/async_wait.c", "Line": 157, "Tip": "Store value to <b>prev-&gt;next</b>", "SrcLines": ["            /* If fd has just been added, remove it from the list */", "            if (curr->add == 1) {", "                if (ctx->fds == curr) {", "                    ctx->fds = curr->next;", "                } else {", "                    prev->next = curr->next;", "                }", "", "                /* It is responsibility of the caller to cleanup before calling", "                 * ASYNC_WAIT_CTX_clear_fd"], "SrcStart": 152}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/async/async_wait.c", "Line": 157}, {"HashID": "d7ebca4ad4ee531c1eb15f2e9589880e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "95c3eeb8dadb153abfaa1aa15cf930e1.c", "FileName": "crypto/bio/b_addr.c", "Line": 412, "Tip": "Return <b>null</b> to caller", "SrcLines": ["const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)", "{", "    if (bai != NULL)", "        return (BIO_ADDR *)bai->bai_addr;", "    return NULL;", "}", "", "void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)", "{", "    if (bai == NULL)"], "SrcStart": 407}, {"FileMD5": "1bfb1626c602ba29307d9c14e3f44727.c", "FileName": "crypto/bio/b_sock.c", "Line": 230, "Tip": "The return value of function <b>BIO_ADDRINFO_address</b> is used as the 2nd parameter in function <b>BIO_listen</b> (the return value of function <b>BIO_ADDRINFO_address</b> can be null)", "SrcLines": ["                        BIO_ADDRINFO_protocol(res), 0)) == INVALID_SOCKET) {", "        s = INVALID_SOCKET;", "        goto err;", "    }", "", "    if (!BIO_listen(s, BIO_ADDRINFO_address(res),", "                    bind_mode ? BIO_SOCK_REUSEADDR : 0)) {", "        BIO_closesocket(s);", "        s = INVALID_SOCKET;", "    }"], "SrcStart": 225}, {"FileMD5": "43ff674254676815760958b3d8a79659.c", "FileName": "crypto/bio/b_sock2.c", "Line": 205, "Tip": "<b>addr</b> is used as the 1st parameter in function <b>BIO_ADDR_family</b> (<b>addr</b> can be null)", "SrcLines": ["            return 0;", "        }", "    }", "", "# ifdef IPV6_V6ONLY", "    if (BIO_ADDR_family(addr) == AF_INET6) {", "        /*", "         * Note: Windows default of IPV6_V6ONLY is ON, and Linux is OFF.", "         * Therefore we always have to use setsockopt here.", "         */"], "SrcStart": 200}, {"FileMD5": "95c3eeb8dadb153abfaa1aa15cf930e1.c", "FileName": "crypto/bio/b_addr.c", "Line": 128, "Tip": "Load value from <b>((sockaddr*)ap)-&gt;sa_family</b>", "SrcLines": ["    return 0;", "}", "", "int BIO_ADDR_family(const BIO_ADDR *ap)", "{", "    return ap->sa.sa_family;", "}", "", "int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)", "{"], "SrcStart": 123}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bio/b_addr.c", "Line": 128}, {"HashID": "511d9f05d8d0a2c0e78134e3d9849d08", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "95c3eeb8dadb153abfaa1aa15cf930e1.c", "FileName": "crypto/bio/b_addr.c", "Line": 412, "Tip": "Return <b>null</b> to caller", "SrcLines": ["const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)", "{", "    if (bai != NULL)", "        return (BIO_ADDR *)bai->bai_addr;", "    return NULL;", "}", "", "void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)", "{", "    if (bai == NULL)"], "SrcStart": 407}, {"FileMD5": "95cc559377c20746928d60161d8a46e6.c", "FileName": "crypto/bio/bss_conn.c", "Line": 150, "Tip": "The return value of function <b>BIO_ADDRINFO_address</b> is used as the 2nd parameter in function <b>BIO_connect</b> (the return value of function <b>BIO_ADDRINFO_address</b> can be null)", "SrcLines": ["            c->state = BIO_CONN_S_CONNECT;", "            break;", "", "        case BIO_CONN_S_CONNECT:", "            BIO_clear_retry_flags(b);", "            ret = BIO_connect(b->num, BIO_ADDRINFO_address(c->addr_iter),", "                              BIO_SOCK_KEEPALIVE | c->connect_mode);", "            b->retry_reason = 0;", "            if (ret == 0) {", "                if (BIO_sock_should_retry(ret)) {"], "SrcStart": 145}, {"FileMD5": "43ff674254676815760958b3d8a79659.c", "FileName": "crypto/bio/b_sock2.c", "Line": 106, "Tip": "<b>addr</b> is used as the 1st parameter in function <b>BIO_ADDR_sockaddr_size</b> (<b>addr</b> can be null)", "SrcLines": ["            return 0;", "        }", "    }", "", "    if (connect(sock, BIO_ADDR_sockaddr(addr),", "                BIO_ADDR_sockaddr_size(addr)) == -1) {", "        if (!BIO_sock_should_retry(-1)) {", "            SYSerr(SYS_F_CONNECT, get_last_socket_error());", "            BIOerr(BIO_F_BIO_CONNECT, BIO_R_CONNECT_ERROR);", "        }"], "SrcStart": 101}, {"FileMD5": "95c3eeb8dadb153abfaa1aa15cf930e1.c", "FileName": "crypto/bio/b_addr.c", "Line": 322, "Tip": "Load value from <b>((sockaddr*)ap)-&gt;sa_family</b>", "SrcLines": [" * isn't set or is something other than AF_INET, AF_INET6 or AF_UNIX,", " * the size of the BIO_ADDR type is returned.", " */", "socklen_t BIO_ADDR_sockaddr_size(const BIO_ADDR *ap)", "{", "    if (ap->sa.sa_family == AF_INET)", "        return sizeof(ap->s_in);", "#ifdef AF_INET6", "    if (ap->sa.sa_family == AF_INET6)", "        return sizeof(ap->s_in6);"], "SrcStart": 317}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bio/b_addr.c", "Line": 322}, {"HashID": "36f9845d797248c53194019fbdfbc4d1", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bb6e5fbd7187922b84dca292e0afd919.c", "FileName": "crypto/bn/bn_ctx.c", "Line": 235, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    /* clear BN_FLG_CONSTTIME if leaked from previous frames */", "    ret->flags &= (\u203eBN_FLG_CONSTTIME);", "    ctx->used++;", "    CTXDBG_RET(ctx, ret);", "    return ret;", "}", "", "/************/", "/* BN_STACK */", "/************/"], "SrcStart": 230}, {"FileMD5": "62a1f3b532d845688c81c1d990f6d282.c", "FileName": "crypto/rsa/rsa_x931g.c", "Line": 154, "Tip": "Function <b>BN_CTX_get</b> executes and stores the return value to <b>Xp</b> (<b>Xp</b> can be null)", "SrcLines": ["    ctx = BN_CTX_new();", "    if (ctx == NULL)", "        goto error;", "", "    BN_CTX_start(ctx);", "    Xp = BN_CTX_get(ctx);", "    Xq = BN_CTX_get(ctx);", "    if (Xq == NULL)", "        goto error;", "    if (!BN_X931_generate_Xpq(Xp, Xq, bits, ctx))"], "SrcStart": 149}, {"FileMD5": "62a1f3b532d845688c81c1d990f6d282.c", "FileName": "crypto/rsa/rsa_x931g.c", "Line": 158, "Tip": "<b>Xp</b> is used as the 1st parameter in function <b>BN_X931_generate_Xpq</b> (<b>Xp</b> can be null)", "SrcLines": ["    BN_CTX_start(ctx);", "    Xp = BN_CTX_get(ctx);", "    Xq = BN_CTX_get(ctx);", "    if (Xq == NULL)", "        goto error;", "    if (!BN_X931_generate_Xpq(Xp, Xq, bits, ctx))", "        goto error;", "", "    rsa->p = BN_new();", "    rsa->q = BN_new();"], "SrcStart": 153}, {"FileMD5": "a4095fac6914bd0d905f384304fa4a53.c", "FileName": "crypto/bn/bn_x931p.c", "Line": 189, "Tip": "<b>Xp</b> is used as the 2nd parameter in function <b>BN_sub</b> (<b>Xp</b> can be null)", "SrcLines": ["    for (i = 0; i < 1000; i++) {", "        if (!BN_rand(Xq, nbits, BN_RAND_TOP_TWO, BN_RAND_BOTTOM_ANY))", "            goto err;", "", "        /* Check that |Xp - Xq| > 2^(nbits - 100) */", "        if (!BN_sub(t, Xp, Xq))", "            goto err;", "        if (BN_num_bits(t) > (nbits - 100))", "            break;", "    }"], "SrcStart": 184}, {"FileMD5": "32bcceee39041010510d0d365ee478fb.c", "FileName": "crypto/bn/bn_add.c", "Line": 168, "Tip": "Load value from <b>b-&gt;neg</b>", "SrcLines": ["     *  a -  b      a-b", "     *  a - -b      a+b", "     * -a -  b      -(a+b)", "     * -a - -b      b-a", "     */", "    if (a->neg) {", "        if (b->neg) {", "            const BIGNUM *tmp;", "", "            tmp = a;"], "SrcStart": 163}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bn/bn_add.c", "Line": 168}, {"HashID": "e81555cfd7a871f9812b216d6ee16404", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bb6e5fbd7187922b84dca292e0afd919.c", "FileName": "crypto/bn/bn_ctx.c", "Line": 235, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    /* clear BN_FLG_CONSTTIME if leaked from previous frames */", "    ret->flags &= (\u203eBN_FLG_CONSTTIME);", "    ctx->used++;", "    CTXDBG_RET(ctx, ret);", "    return ret;", "}", "", "/************/", "/* BN_STACK */", "/************/"], "SrcStart": 230}, {"FileMD5": "ab71c154fe1b08458610476a5dfaf787.c", "FileName": "crypto/ec/ecp_oct.c", "Line": 209, "Tip": "Function <b>BN_CTX_get</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["                return 0;", "        }", "", "        BN_CTX_start(ctx);", "        used_ctx = 1;", "        x = BN_CTX_get(ctx);", "        y = BN_CTX_get(ctx);", "        if (y == NULL)", "            goto err;", ""], "SrcStart": 204}, {"FileMD5": "ab71c154fe1b08458610476a5dfaf787.c", "FileName": "crypto/ec/ecp_oct.c", "Line": 234, "Tip": "<b>x</b> is used as the 1st parameter in function <b>BN_bn2bin</b> (<b>x</b> can be null)", "SrcLines": ["        }", "        while (skip > 0) {", "            buf[i++] = 0;", "            skip--;", "        }", "        skip = BN_bn2bin(x, buf + i);", "        i += skip;", "        if (i != 1 + field_len) {", "            ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, ERR_R_INTERNAL_ERROR);", "            goto err;"], "SrcStart": 229}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 608, "Tip": "<b>a</b> is used as the 1st parameter in function <b>bn2binpad</b> (<b>a</b> can be null)", "SrcLines": ["    return bn2binpad(a, to, tolen, big);", "}", "", "int BN_bn2bin(const BIGNUM *a, unsigned char *to)", "{", "    return bn2binpad(a, to, -1, big);", "}", "", "BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)", "{"], "SrcStart": 603}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 561, "Tip": "<b>a</b> is used as the 1st parameter in function <b>BN_num_bits</b> (<b>a</b> can be null)", "SrcLines": ["    /*", "     * In case |a| is fixed-top, BN_num_bytes can return bogus length,", "     * but it's assumed that fixed-top inputs ought to be \"nominated\"", "     * even for padded output, so it works out...", "     */", "    n = BN_num_bytes(a);", "    if (tolen == -1) {", "        tolen = n;", "    } else if (tolen < n) {     /* uncommon/unlike case */", "        BIGNUM temp = *a;"], "SrcStart": 556}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 167, "Tip": "Load value from <b>a-&gt;top</b>", "SrcLines": ["    return ret & mask;", "}", "", "int BN_num_bits(const BIGNUM *a)", "{", "    int i = a->top - 1;", "    bn_check_top(a);", "", "    if (a->flags & BN_FLG_CONSTTIME) {", "        /*"], "SrcStart": 162}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bn/bn_lib.c", "Line": 167}, {"HashID": "cb7c2f454a54614e3ad04d9d67cd8e40", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bb6e5fbd7187922b84dca292e0afd919.c", "FileName": "crypto/bn/bn_ctx.c", "Line": 235, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    /* clear BN_FLG_CONSTTIME if leaked from previous frames */", "    ret->flags &= (\u203eBN_FLG_CONSTTIME);", "    ctx->used++;", "    CTXDBG_RET(ctx, ret);", "    return ret;", "}", "", "/************/", "/* BN_STACK */", "/************/"], "SrcStart": 230}, {"FileMD5": "178859e07d5440055395cdf1f49cc9be.c", "FileName": "crypto/ec/ec2_smpl.c", "Line": 638, "Tip": "Function <b>BN_CTX_get</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["        if (ctx == NULL)", "            return 0;", "    }", "", "    BN_CTX_start(ctx);", "    x = BN_CTX_get(ctx);", "    y = BN_CTX_get(ctx);", "    if (y == NULL)", "        goto err;", ""], "SrcStart": 633}, {"FileMD5": "178859e07d5440055395cdf1f49cc9be.c", "FileName": "crypto/ec/ec2_smpl.c", "Line": 645, "Tip": "<b>x</b> is used as the 2nd parameter in function <b>BN_copy</b> (<b>x</b> can be null)", "SrcLines": ["    if (y == NULL)", "        goto err;", "", "    if (!EC_POINT_get_affine_coordinates_GF2m(group, point, x, y, ctx))", "        goto err;", "    if (!BN_copy(point->X, x))", "        goto err;", "    if (!BN_copy(point->Y, y))", "        goto err;", "    if (!BN_one(point->Z))"], "SrcStart": 640}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 388, "Tip": "Load value from <b>b-&gt;top</b>", "SrcLines": ["", "    bn_check_top(b);", "", "    if (a == b)", "        return (a);", "    if (bn_wexpand(a, b->top) == NULL)", "        return (NULL);", "", "#if 1", "    A = a->d;"], "SrcStart": 383}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bn/bn_lib.c", "Line": 388}, {"HashID": "90e6cf0884c41083fe61c2e1ebde5561", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bb6e5fbd7187922b84dca292e0afd919.c", "FileName": "crypto/bn/bn_ctx.c", "Line": 235, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    /* clear BN_FLG_CONSTTIME if leaked from previous frames */", "    ret->flags &= (\u203eBN_FLG_CONSTTIME);", "    ctx->used++;", "    CTXDBG_RET(ctx, ret);", "    return ret;", "}", "", "/************/", "/* BN_STACK */", "/************/"], "SrcStart": 230}, {"FileMD5": "ab71c154fe1b08458610476a5dfaf787.c", "FileName": "crypto/ec/ecp_oct.c", "Line": 209, "Tip": "Function <b>BN_CTX_get</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["                return 0;", "        }", "", "        BN_CTX_start(ctx);", "        used_ctx = 1;", "        x = BN_CTX_get(ctx);", "        y = BN_CTX_get(ctx);", "        if (y == NULL)", "            goto err;", ""], "SrcStart": 204}, {"FileMD5": "ab71c154fe1b08458610476a5dfaf787.c", "FileName": "crypto/ec/ecp_oct.c", "Line": 234, "Tip": "<b>x</b> is used as the 1st parameter in function <b>BN_bn2bin</b> (<b>x</b> can be null)", "SrcLines": ["        }", "        while (skip > 0) {", "            buf[i++] = 0;", "            skip--;", "        }", "        skip = BN_bn2bin(x, buf + i);", "        i += skip;", "        if (i != 1 + field_len) {", "            ECerr(EC_F_EC_GFP_SIMPLE_POINT2OCT, ERR_R_INTERNAL_ERROR);", "            goto err;"], "SrcStart": 229}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 608, "Tip": "<b>a</b> is used as the 1st parameter in function <b>bn2binpad</b> (<b>a</b> can be null)", "SrcLines": ["    return bn2binpad(a, to, tolen, big);", "}", "", "int BN_bn2bin(const BIGNUM *a, unsigned char *to)", "{", "    return bn2binpad(a, to, -1, big);", "}", "", "BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)", "{"], "SrcStart": 603}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 574, "Tip": "Load value from <b>a-&gt;dmax</b>", "SrcLines": ["        if (tolen < n)", "            return -1;", "    }", "", "    /* Swipe through whole available data and don't give away padded zero. */", "    atop = a->dmax * BN_BYTES;", "    if (atop == 0) {", "        OPENSSL_cleanse(to, tolen);", "        return tolen;", "    }"], "SrcStart": 569}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bn/bn_lib.c", "Line": 574}, {"HashID": "ea8481a4b4c1b6f0c9cfdd0533f312b9", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bb6e5fbd7187922b84dca292e0afd919.c", "FileName": "crypto/bn/bn_ctx.c", "Line": 235, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    /* clear BN_FLG_CONSTTIME if leaked from previous frames */", "    ret->flags &= (\u203eBN_FLG_CONSTTIME);", "    ctx->used++;", "    CTXDBG_RET(ctx, ret);", "    return ret;", "}", "", "/************/", "/* BN_STACK */", "/************/"], "SrcStart": 230}, {"FileMD5": "460e3f6aeca723415080e60babba446b.c", "FileName": "crypto/ec/ecp_smpl.c", "Line": 520, "Tip": "Function <b>BN_CTX_get</b> executes and stores the return value to <b>Z_</b> (<b>Z_</b> can be null)", "SrcLines": ["        if (ctx == NULL)", "            return 0;", "    }", "", "    BN_CTX_start(ctx);", "    Z = BN_CTX_get(ctx);", "    Z_1 = BN_CTX_get(ctx);", "    Z_2 = BN_CTX_get(ctx);", "    Z_3 = BN_CTX_get(ctx);", "    if (Z_3 == NULL)"], "SrcStart": 515}, {"FileMD5": "460e3f6aeca723415080e60babba446b.c", "FileName": "crypto/ec/ecp_smpl.c", "Line": 530, "Tip": "Select the false branch at this point (<b>group-&gt;meth-&gt;field_decode(group,Z_,point-&gt;Z,ctx)==0</b> is false)", "SrcLines": ["        goto err;", "", "    /* transform  (X, Y, Z)  into  (x, y) := (X/Z^2, Y/Z^3) */", "", "    if (group->meth->field_decode) {", "        if (!group->meth->field_decode(group, Z, point->Z, ctx))", "            goto err;", "        Z_ = Z;", "    } else {", "        Z_ = point->Z;"], "SrcStart": 525}, {"FileMD5": "460e3f6aeca723415080e60babba446b.c", "FileName": "crypto/ec/ecp_smpl.c", "Line": 537, "Tip": "<b>Z_</b> is used as the 1st parameter in function <b>BN_is_one</b> (<b>Z_</b> can be null)", "SrcLines": ["        Z_ = Z;", "    } else {", "        Z_ = point->Z;", "    }", "", "    if (BN_is_one(Z_)) {", "        if (group->meth->field_decode) {", "            if (x != NULL) {", "                if (!group->meth->field_decode(group, x, point->X, ctx))", "                    goto err;"], "SrcStart": 532}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 1006, "Tip": "<b>a</b> is used as the 1st parameter in function <b>BN_abs_is_word</b> (<b>a</b> can be null)", "SrcLines": ["    return a->top == 0;", "}", "", "int BN_is_one(const BIGNUM *a)", "{", "    return BN_abs_is_word(a, 1) && !a->neg;", "}", "", "int BN_is_word(const BIGNUM *a, const BN_ULONG w)", "{"], "SrcStart": 1001}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 996, "Tip": "Load value from <b>a-&gt;top</b>", "SrcLines": ["    a->flags &= ~BN_FLG_FIXED_TOP;", "}", "", "int BN_abs_is_word(const BIGNUM *a, const BN_ULONG w)", "{", "    return ((a->top == 1) && (a->d[0] == w)) || ((w == 0) && (a->top == 0));", "}", "", "int BN_is_zero(const BIGNUM *a)", "{"], "SrcStart": 991}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bn/bn_lib.c", "Line": 996}, {"HashID": "589617d8a83f6ef25cda1f161ebda0ff", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bb6e5fbd7187922b84dca292e0afd919.c", "FileName": "crypto/bn/bn_ctx.c", "Line": 235, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    /* clear BN_FLG_CONSTTIME if leaked from previous frames */", "    ret->flags &= (\u203eBN_FLG_CONSTTIME);", "    ctx->used++;", "    CTXDBG_RET(ctx, ret);", "    return ret;", "}", "", "/************/", "/* BN_STACK */", "/************/"], "SrcStart": 230}, {"FileMD5": "cc6d261653d40bb09e62034fc2ab546d.c", "FileName": "crypto/ec/ec2_oct.c", "Line": 177, "Tip": "Function <b>BN_CTX_get</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["                return 0;", "        }", "", "        BN_CTX_start(ctx);", "        used_ctx = 1;", "        x = BN_CTX_get(ctx);", "        y = BN_CTX_get(ctx);", "        yxi = BN_CTX_get(ctx);", "        if (yxi == NULL)", "            goto err;"], "SrcStart": 172}, {"FileMD5": "cc6d261653d40bb09e62034fc2ab546d.c", "FileName": "crypto/ec/ec2_oct.c", "Line": 187, "Tip": "<b>x</b> is used as the 1st parameter in function <b>BN_is_zero</b> (<b>x</b> can be null)", "SrcLines": ["", "        if (!EC_POINT_get_affine_coordinates_GF2m(group, point, x, y, ctx))", "            goto err;", "", "        buf[0] = form;", "        if ((form != POINT_CONVERSION_UNCOMPRESSED) && !BN_is_zero(x)) {", "            if (!group->meth->field_div(group, yxi, y, x, ctx))", "                goto err;", "            if (BN_is_odd(yxi))", "                buf[0]++;"], "SrcStart": 182}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 1001, "Tip": "Load value from <b>a-&gt;top</b>", "SrcLines": ["    return ((a->top == 1) && (a->d[0] == w)) || ((w == 0) && (a->top == 0));", "}", "", "int BN_is_zero(const BIGNUM *a)", "{", "    return a->top == 0;", "}", "", "int BN_is_one(const BIGNUM *a)", "{"], "SrcStart": 996}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bn/bn_lib.c", "Line": 1001}, {"HashID": "96e7eccdba3fa3e0826113b5e32a009b", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bb6e5fbd7187922b84dca292e0afd919.c", "FileName": "crypto/bn/bn_ctx.c", "Line": 235, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    /* clear BN_FLG_CONSTTIME if leaked from previous frames */", "    ret->flags &= (\u203eBN_FLG_CONSTTIME);", "    ctx->used++;", "    CTXDBG_RET(ctx, ret);", "    return ret;", "}", "", "/************/", "/* BN_STACK */", "/************/"], "SrcStart": 230}, {"FileMD5": "fc6290a2e7439f2d5d5e068284486025.c", "FileName": "crypto/bn/bn_kron.c", "Line": 36, "Tip": "Function <b>BN_CTX_get</b> executes and stores the return value to <b>A</b> (<b>A</b> can be null)", "SrcLines": ["", "    bn_check_top(a);", "    bn_check_top(b);", "", "    BN_CTX_start(ctx);", "    A = BN_CTX_get(ctx);", "    B = BN_CTX_get(ctx);", "    if (B == NULL)", "        goto end;", ""], "SrcStart": 31}, {"FileMD5": "fc6290a2e7439f2d5d5e068284486025.c", "FileName": "crypto/bn/bn_kron.c", "Line": 41, "Tip": "<b>A</b> is used as the 1st parameter in function <b>BN_copy</b> (<b>A</b> can be null)", "SrcLines": ["    A = BN_CTX_get(ctx);", "    B = BN_CTX_get(ctx);", "    if (B == NULL)", "        goto end;", "", "    err = !BN_copy(A, a);", "    if (err)", "        goto end;", "    err = !BN_copy(B, b);", "    if (err)"], "SrcStart": 36}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 388, "Tip": "<b>a</b> is used as the 1st parameter in function <b>bn_wexpand</b> (<b>a</b> can be null)", "SrcLines": ["", "    bn_check_top(b);", "", "    if (a == b)", "        return (a);", "    if (bn_wexpand(a, b->top) == NULL)", "        return (NULL);", "", "#if 1", "    A = a->d;"], "SrcStart": 383}, {"FileMD5": "0ac2afd7963f3ad0139299afd2c6bde6.c", "FileName": "crypto/bn/bn_lib.c", "Line": 1097, "Tip": "Load value from <b>a-&gt;dmax</b>", "SrcLines": ["    return cb->arg;", "}", "", "BIGNUM *bn_wexpand(BIGNUM *a, int words)", "{", "    return (words <= a->dmax) ? a : bn_expand2(a, words);", "}", "", "void bn_correct_top(BIGNUM *a)", "{"], "SrcStart": 1092}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/bn/bn_lib.c", "Line": 1097}]}, "start": 11, "end": 20, "page": 3, "total_pages": 11, "language": "en"}