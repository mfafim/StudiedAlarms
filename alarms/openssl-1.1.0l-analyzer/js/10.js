var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "6f6999b5dc2512d5513d7709617174d4", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f6246a8734eae86d7256801a0a4fd7db.c", "FileName": "ssl/s3_lib.c", "Line": 3178, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>ssl_build_cert_chain</b>", "SrcLines": ["        if (!s->server)", "            return 0;", "        return ssl3_set_req_cert_type(s->cert, parg, larg);", "", "    case SSL_CTRL_BUILD_CERT_CHAIN:", "        return ssl_build_cert_chain(s, NULL, larg);", "", "    case SSL_CTRL_SET_VERIFY_CERT_STORE:", "        return ssl_cert_set_cert_store(s->cert, parg, 0, larg);", ""], "SrcStart": 3173}, {"FileMD5": "5ccfe02258a3cc1e4373179ee0271987.c", "FileName": "ssl/ssl_cert.c", "Line": 907, "Tip": "Load value from <b>ctx-&gt;cert_store</b> and assign to <b>chain_store</b>", "SrcLines": ["        if (c->chain_store)", "            chain_store = c->chain_store;", "        else if (s)", "            chain_store = s->ctx->cert_store;", "        else", "            chain_store = ctx->cert_store;", "", "        if (flags & SSL_BUILD_CHAIN_FLAG_UNTRUSTED)", "            untrusted = cpk->chain;", "    }"], "SrcStart": 902}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_cert.c", "Line": 907}, {"HashID": "50f6dddfec0fc53e0be6309d689f5c6e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4245, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>ssl_security_cert</b>", "SrcLines": ["    if (rv != 1)", "        return rv;", "", "    for (i = start_idx; i < sk_X509_num(sk); i++) {", "        x = sk_X509_value(sk, i);", "        rv = ssl_security_cert(s, NULL, x, vfy, 0);", "        if (rv != 1)", "            return rv;", "    }", "    return 1;"], "SrcStart": 4240}, {"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4216, "Tip": "<b>ctx</b> is used as the 2nd parameter in function <b>ssl_security_cert_key</b> (<b>ctx</b> can be null)", "SrcLines": ["        vfy = SSL_SECOP_PEER;", "    if (is_ee) {", "        if (!ssl_security_cert_key(s, ctx, x, SSL_SECOP_EE_KEY | vfy))", "            return SSL_R_EE_KEY_TOO_SMALL;", "    } else {", "        if (!ssl_security_cert_key(s, ctx, x, SSL_SECOP_CA_KEY | vfy))", "            return SSL_R_CA_KEY_TOO_SMALL;", "    }", "    if (!ssl_security_cert_sig(s, ctx, x, SSL_SECOP_CA_MD | vfy))", "        return SSL_R_CA_MD_TOO_WEAK;"], "SrcStart": 4211}, {"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4183, "Tip": "<b>ctx</b> is used as the 1st parameter in function <b>ssl_ctx_security</b> (<b>ctx</b> can be null)", "SrcLines": ["        secbits = EVP_PKEY_security_bits(pkey);", "    }", "    if (s)", "        return ssl_security(s, op, secbits, 0, x);", "    else", "        return ssl_ctx_security(ctx, op, secbits, 0, x);", "}", "", "static int ssl_security_cert_sig(SSL *s, SSL_CTX *ctx, X509 *x, int op)", "{"], "SrcStart": 4178}, {"FileMD5": "5ccfe02258a3cc1e4373179ee0271987.c", "FileName": "ssl/ssl_cert.c", "Line": 1085, "Tip": "Load value from <b>ctx-&gt;cert</b>", "SrcLines": ["    return s->cert->sec_cb(s, NULL, op, bits, nid, other, s->cert->sec_ex);", "}", "", "int ssl_ctx_security(const SSL_CTX *ctx, int op, int bits, int nid, void *other)", "{", "    return ctx->cert->sec_cb(NULL, ctx, op, bits, nid, other,", "                             ctx->cert->sec_ex);", "}"], "SrcStart": 1080}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_cert.c", "Line": 1085}, {"HashID": "70240b220eeb99e0125400575333d260", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4245, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>ssl_security_cert</b>", "SrcLines": ["    if (rv != 1)", "        return rv;", "", "    for (i = start_idx; i < sk_X509_num(sk); i++) {", "        x = sk_X509_value(sk, i);", "        rv = ssl_security_cert(s, NULL, x, vfy, 0);", "        if (rv != 1)", "            return rv;", "    }", "    return 1;"], "SrcStart": 4240}, {"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4219, "Tip": "<b>ctx</b> is used as the 2nd parameter in function <b>ssl_security_cert_sig</b> (<b>ctx</b> can be null)", "SrcLines": ["            return SSL_R_EE_KEY_TOO_SMALL;", "    } else {", "        if (!ssl_security_cert_key(s, ctx, x, SSL_SECOP_CA_KEY | vfy))", "            return SSL_R_CA_KEY_TOO_SMALL;", "    }", "    if (!ssl_security_cert_sig(s, ctx, x, SSL_SECOP_CA_MD | vfy))", "        return SSL_R_CA_MD_TOO_WEAK;", "    return 1;", "}", ""], "SrcStart": 4214}, {"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4205, "Tip": "<b>ctx</b> is used as the 1st parameter in function <b>ssl_ctx_security</b> (<b>ctx</b> can be null)", "SrcLines": ["            secbits = EVP_MD_size(md) * 4;", "    }", "    if (s)", "        return ssl_security(s, op, secbits, md_nid, x);", "    else", "        return ssl_ctx_security(ctx, op, secbits, md_nid, x);", "}", "", "int ssl_security_cert(SSL *s, SSL_CTX *ctx, X509 *x, int vfy, int is_ee)", "{"], "SrcStart": 4200}, {"FileMD5": "5ccfe02258a3cc1e4373179ee0271987.c", "FileName": "ssl/ssl_cert.c", "Line": 1086, "Tip": "Load value from <b>ctx-&gt;cert</b>", "SrcLines": ["}", "", "int ssl_ctx_security(const SSL_CTX *ctx, int op, int bits, int nid, void *other)", "{", "    return ctx->cert->sec_cb(NULL, ctx, op, bits, nid, other,", "                             ctx->cert->sec_ex);", "}"], "SrcStart": 1081}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_cert.c", "Line": 1086}, {"HashID": "b4af3eb7ecafe5be4f60bb6d13dfd36a", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "0c1ce7ee8925e63ba9c0449f1a0dd154.c", "FileName": "ssl/ssl_rsa.c", "Line": 682, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>use_certificate_chain_file</b>", "SrcLines": ["    return (ret);", "}", "", "int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file)", "{", "    return use_certificate_chain_file(ctx, NULL, file);", "}", "", "int SSL_use_certificate_chain_file(SSL *ssl, const char *file)", "{"], "SrcStart": 677}, {"FileMD5": "0c1ce7ee8925e63ba9c0449f1a0dd154.c", "FileName": "ssl/ssl_rsa.c", "Line": 623, "Tip": "<b>ssl</b> is used as the 1st parameter in function <b>SSL_use_certificate</b> (<b>ssl</b> can be null)", "SrcLines": ["    }", "", "    if (ctx)", "        ret = SSL_CTX_use_certificate(ctx, x);", "    else", "        ret = SSL_use_certificate(ssl, x);", "", "    if (ERR_peek_error() != 0)", "        ret = 0;                /* Key/certificate mismatch doesn't imply", "                                 * ret==0 ... */"], "SrcStart": 618}, {"FileMD5": "0c1ce7ee8925e63ba9c0449f1a0dd154.c", "FileName": "ssl/ssl_rsa.c", "Line": 33, "Tip": "Load value from <b>ssl-&gt;cert</b>", "SrcLines": ["    if (rv != 1) {", "        SSLerr(SSL_F_SSL_USE_CERTIFICATE, rv);", "        return 0;", "    }", "", "    return (ssl_set_cert(ssl->cert, x));", "}", "", "int SSL_use_certificate_file(SSL *ssl, const char *file, int type)", "{"], "SrcStart": 28}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_rsa.c", "Line": 33}, {"HashID": "26563379c6f3571098b419f50d6da4e5", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "0c1ce7ee8925e63ba9c0449f1a0dd154.c", "FileName": "ssl/ssl_rsa.c", "Line": 682, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>use_certificate_chain_file</b>", "SrcLines": ["    return (ret);", "}", "", "int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file)", "{", "    return use_certificate_chain_file(ctx, NULL, file);", "}", "", "int SSL_use_certificate_chain_file(SSL *ssl, const char *file)", "{"], "SrcStart": 677}, {"FileMD5": "0c1ce7ee8925e63ba9c0449f1a0dd154.c", "FileName": "ssl/ssl_rsa.c", "Line": 598, "Tip": "Load value from <b>ssl-&gt;default_passwd_callback</b> and assign to <b>passwd_callback</b>", "SrcLines": ["", "    if (ctx != NULL) {", "        passwd_callback = ctx->default_passwd_callback;", "        passwd_callback_userdata = ctx->default_passwd_callback_userdata;", "    } else {", "        passwd_callback = ssl->default_passwd_callback;", "        passwd_callback_userdata = ssl->default_passwd_callback_userdata;", "    }", "", "    in = BIO_new(BIO_s_file());"], "SrcStart": 593}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_rsa.c", "Line": 598}, {"HashID": "686bf189061e95f44412eee983f1bb64", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f9a52835ec0b055c332831f87cdd8a0f.c", "FileName": "ssl/ssl_lib.c", "Line": 2982, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    if (i < 0)", "        return NULL;", "", "    /* May be NULL. */", "    return &c->pkeys[i];", "}", "", "EVP_PKEY *ssl_get_sign_pkey(SSL *s, const SSL_CIPHER *cipher,", "                            const EVP_MD **pmd)", "{"], "SrcStart": 2977}, {"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4134, "Tip": "Function <b>ssl_get_server_send_pkey</b> executes and stores the return value to <b>cpk</b> (<b>cpk</b> can be null)", "SrcLines": ["        if (s->s3->tmp.new_cipher->strength_bits == 256)", "            dh_secbits = 128;", "        else", "            dh_secbits = 80;", "    } else {", "        CERT_PKEY *cpk = ssl_get_server_send_pkey(s);", "        dh_secbits = EVP_PKEY_security_bits(cpk->privatekey);", "    }", "", "    if (dh_secbits >= 128) {"], "SrcStart": 4129}, {"FileMD5": "e9e26a68b8ef79009407b5f883218feb.c", "FileName": "ssl/t1_lib.c", "Line": 4135, "Tip": "Load value from <b>cpk-&gt;privatekey</b>", "SrcLines": ["            dh_secbits = 128;", "        else", "            dh_secbits = 80;", "    } else {", "        CERT_PKEY *cpk = ssl_get_server_send_pkey(s);", "        dh_secbits = EVP_PKEY_security_bits(cpk->privatekey);", "    }", "", "    if (dh_secbits >= 128) {", "        DH *dhp = DH_new();"], "SrcStart": 4130}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/t1_lib.c", "Line": 4135}, {"HashID": "4da4183f105c93c38099af736392447d", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "eade9ded9e2087c6f7ce17da51a3d92b.c", "FileName": "test/ssl_test_ctx.c", "Line": 661, "Tip": "Return <b>null</b> to caller", "SrcLines": ["", " err:", "    SSL_TEST_CTX_free(ctx);", "    ctx = NULL;", " done:", "    return ctx;", "}"], "SrcStart": 656}, {"FileMD5": "aba47943cb986b46291a22c153810902.c", "FileName": "test/ssl_test_ctx_test.c", "Line": 202, "Tip": "Function <b>SSL_TEST_CTX_create</b> executes and stores the return value to <b>ctx</b> (<b>ctx</b> can be null)", "SrcLines": ["", "static int execute_test(SSL_TEST_CTX_TEST_FIXTURE fixture)", "{", "    int success = 0;", "", "    SSL_TEST_CTX *ctx = SSL_TEST_CTX_create(conf, fixture.test_section);", "", "    if (ctx == NULL) {", "        fprintf(stderr, \"Failed to parse good configuration %s.\\n\",", "                fixture.test_section);"], "SrcStart": 197}, {"FileMD5": "aba47943cb986b46291a22c153810902.c", "FileName": "test/ssl_test_ctx_test.c", "Line": 215, "Tip": "<b>ctx</b> is used as the 1st parameter in function <b>SSL_TEST_CTX_free</b> (<b>ctx</b> can be null)", "SrcLines": ["    if (!SSL_TEST_CTX_equal(ctx, fixture.expected_ctx))", "        goto err;", "", "    success = 1;", " err:", "    SSL_TEST_CTX_free(ctx);", "    return success;", "}", "", "static int execute_failure_test(SSL_TEST_CTX_TEST_FIXTURE fixture)"], "SrcStart": 210}, {"FileMD5": "eade9ded9e2087c6f7ce17da51a3d92b.c", "FileName": "test/ssl_test_ctx.c", "Line": 522, "Tip": "Load value from <b>ctx-&gt;expected_npn_protocol</b>", "SrcLines": ["}", "", "void SSL_TEST_CTX_free(SSL_TEST_CTX *ctx)", "{", "    ssl_test_ctx_free_extra_data(ctx);", "    OPENSSL_free(ctx->expected_npn_protocol);", "    OPENSSL_free(ctx->expected_alpn_protocol);", "    OPENSSL_free(ctx);", "}", ""], "SrcStart": 517}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "test/ssl_test_ctx.c", "Line": 522}]}, "start": 81, "end": 87, "page": 10, "total_pages": 11, "language": "en"}