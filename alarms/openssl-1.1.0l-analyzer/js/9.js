var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "4b82cc6a12fc91ef7a5399980c62b3b7", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "4ddf5a7d24a35418334876e0a621eeae.c", "FileName": "crypto/x509/x509name.c", "Line": 92, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    if (name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc", "        || loc < 0)", "        return (NULL);", "    else", "        return (sk_X509_NAME_ENTRY_value(name->entries, loc));", "}", "", "X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc)", "{", "    X509_NAME_ENTRY *ret;"], "SrcStart": 87}, {"FileMD5": "59a9b59273169ca11c8c5ce21773f8c5.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 628, "Tip": "The return value of function <b>X509_NAME_get_entry</b> is used as the 1st parameter in function <b>X509_NAME_ENTRY_set</b> (the return value of function <b>X509_NAME_get_entry</b> can be null)", "SrcLines": ["", "            /*", "             * Check that the last subject component isn't part of a", "             * multivalued RDN", "             */", "            if (X509_NAME_ENTRY_set(X509_NAME_get_entry(tmpsubject,", "                                                        last_object_loc))", "                == X509_NAME_ENTRY_set(X509_NAME_get_entry(tmpsubject,", "                                                           last_object_loc - 1))) {", "                err = X509_V_ERR_PROXY_SUBJECT_NAME_VIOLATION;"], "SrcStart": 623}, {"FileMD5": "4ddf5a7d24a35418334876e0a621eeae.c", "FileName": "crypto/x509/x509name.c", "Line": 355, "Tip": "Load value from <b>ne-&gt;set</b>", "SrcLines": ["    return (ne->value);", "}", "", "int X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne)", "{", "    return ne->set;", "}"], "SrcStart": 350}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/x509/x509name.c", "Line": 355}, {"HashID": "8823ffc41a9befed4b010e6adba14515", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "ca1bcbeb340dcd3309559e910e85ed73.c", "FileName": "crypto/stack/stack.c", "Line": 289, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 284}, {"FileMD5": "bfba7e508f0613ec8f80e4651fe7d8ae.h", "FileName": "include/openssl/x509.h", "Line": 97, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 92}, {"FileMD5": "59a9b59273169ca11c8c5ce21773f8c5.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 188, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>cert</b> (<b>cert</b> can be null)", "SrcLines": ["", "    if (ctx->param->auth_level <= 0)", "        return 1;", "", "    for (i = 0; i < num; ++i) {", "        X509 *cert = sk_X509_value(ctx->chain, i);", "", "        /*", "         * We've already checked the security of the leaf key, so here we only", "         * check the security of issuer keys."], "SrcStart": 183}, {"FileMD5": "59a9b59273169ca11c8c5ce21773f8c5.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 201, "Tip": "<b>cert</b> is used as the 2nd parameter in function <b>check_sig_level</b> (<b>cert</b> can be null)", "SrcLines": ["            return 0;", "        /*", "         * We also check the signature algorithm security of all certificates", "         * except those of the trust anchor at index num-1.", "         */", "        if (i < num - 1 && !check_sig_level(ctx, cert) &&", "            verify_cb_cert(ctx, cert, i, X509_V_ERR_CA_MD_TOO_WEAK) == 0)", "            return 0;", "    }", "    return 1;"], "SrcStart": 196}, {"FileMD5": "59a9b59273169ca11c8c5ce21773f8c5.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 3231, "Tip": "<b>cert</b> is used as the 1st parameter in function <b>X509_get_signature_nid</b> (<b>cert</b> can be null)", "SrcLines": [" *", " * Returns 1 on success, 0 otherwise.", " */", "static int check_sig_level(X509_STORE_CTX *ctx, X509 *cert)", "{", "    int nid = X509_get_signature_nid(cert);", "    int mdnid = NID_undef;", "    int secbits = -1;", "    int level = ctx->param->auth_level;", ""], "SrcStart": 3226}, {"FileMD5": "e10e4f860d025c81b86978f20488f894.c", "FileName": "crypto/x509/x_x509.c", "Line": 223, "Tip": "Load value from <b>x-&gt;sig_alg.algorithm</b>", "SrcLines": ["        *palg = &x->sig_alg;", "}", "", "int X509_get_signature_nid(const X509 *x)", "{", "    return OBJ_obj2nid(x->sig_alg.algorithm);", "}"], "SrcStart": 218}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/x509/x_x509.c", "Line": 223}, {"HashID": "bd3060b30e5fb58290e711b97537b804", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "ca1bcbeb340dcd3309559e910e85ed73.c", "FileName": "crypto/stack/stack.c", "Line": 289, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 284}, {"FileMD5": "bfba7e508f0613ec8f80e4651fe7d8ae.h", "FileName": "include/openssl/x509.h", "Line": 97, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 92}, {"FileMD5": "92bcec0abe7c5b1e8d07dbb872654315.c", "FileName": "crypto/x509v3/pcy_tree.c", "Line": 115, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>x</b> (<b>x</b> can be null)", "SrcLines": ["     * First setup the policy cache in all n non-TA certificates, this will be", "     * used in X509_verify_cert() which will invoke the verify callback for all", "     * certificates with invalid policy extensions.", "     */", "    for (i = n - 1; i >= 0; i--) {", "        X509 *x = sk_X509_value(certs, i);", "", "        /* Call for side-effect of computing hash and caching extensions */", "        X509_check_purpose(x, -1, 0);", ""], "SrcStart": 110}, {"FileMD5": "92bcec0abe7c5b1e8d07dbb872654315.c", "FileName": "crypto/x509v3/pcy_tree.c", "Line": 121, "Tip": "<b>x</b> is used as the 1st parameter in function <b>policy_cache_set</b> (<b>x</b> can be null)", "SrcLines": ["", "        /* Call for side-effect of computing hash and caching extensions */", "        X509_check_purpose(x, -1, 0);", "", "        /* If cache is NULL, likely ENOMEM: return immediately */", "        if (policy_cache_set(x) == NULL)", "            return X509_PCY_TREE_INTERNAL;", "    }", "", "    /*"], "SrcStart": 116}, {"FileMD5": "27a84086cd689ab1c13d6a5a5dc576be.c", "FileName": "crypto/x509v3/pcy_cache.c", "Line": 180, "Tip": "Load value from <b>x-&gt;policy_cache</b>", "SrcLines": ["}", "", "const X509_POLICY_CACHE *policy_cache_set(X509 *x)", "{", "", "    if (x->policy_cache == NULL) {", "        CRYPTO_THREAD_write_lock(x->lock);", "        policy_cache_new(x);", "        CRYPTO_THREAD_unlock(x->lock);", "    }"], "SrcStart": 175}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/x509v3/pcy_cache.c", "Line": 180}, {"HashID": "6ff710b0e6badcc7257bbba9f9759ae1", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "ca1bcbeb340dcd3309559e910e85ed73.c", "FileName": "crypto/stack/stack.c", "Line": 289, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 284}, {"FileMD5": "a8acda810a664c9b0e6d25c1caf509b9.h", "FileName": "include/openssl/x509v3.h", "Line": 717, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["ASN1_OCTET_STRING *a2i_IPADDRESS_NC(const char *ipasc);", "int X509V3_NAME_from_section(X509_NAME *nm, STACK_OF(CONF_VALUE) *dn_sk,", "                             unsigned long chtype);", "", "void X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent);", "DEFINE_STACK_OF(X509_POLICY_NODE)", "", "#ifndef OPENSSL_NO_RFC3779", "typedef struct ASRange_st {", "    ASN1_INTEGER *min, *max;"], "SrcStart": 712}, {"FileMD5": "92bcec0abe7c5b1e8d07dbb872654315.c", "FileName": "crypto/x509v3/pcy_tree.c", "Line": 396, "Tip": "Function <b>sk_X509_POLICY_NODE_value</b> executes and stores the return value to <b>node</b> (<b>node</b> can be null)", "SrcLines": ["    X509_POLICY_NODE *node;", "    int i;", "    nodes = curr->nodes;", "    if (curr->flags & X509_V_FLAG_INHIBIT_MAP) {", "        for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--) {", "            node = sk_X509_POLICY_NODE_value(nodes, i);", "            /* Delete any mapped data: see RFC3280 XXXX */", "            if (node->data->flags & POLICY_DATA_FLAG_MAP_MASK) {", "                node->parent->nchild--;", "                OPENSSL_free(node);"], "SrcStart": 391}, {"FileMD5": "92bcec0abe7c5b1e8d07dbb872654315.c", "FileName": "crypto/x509v3/pcy_tree.c", "Line": 398, "Tip": "Load value from <b>node-&gt;data</b>", "SrcLines": ["    nodes = curr->nodes;", "    if (curr->flags & X509_V_FLAG_INHIBIT_MAP) {", "        for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--) {", "            node = sk_X509_POLICY_NODE_value(nodes, i);", "            /* Delete any mapped data: see RFC3280 XXXX */", "            if (node->data->flags & POLICY_DATA_FLAG_MAP_MASK) {", "                node->parent->nchild--;", "                OPENSSL_free(node);", "                (void)sk_X509_POLICY_NODE_delete(nodes, i);", "            }"], "SrcStart": 393}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/x509v3/pcy_tree.c", "Line": 398}, {"HashID": "d523e13d2db88163ef35fee4c7a7a8cc", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "ca1bcbeb340dcd3309559e910e85ed73.c", "FileName": "crypto/stack/stack.c", "Line": 289, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 284}, {"FileMD5": "a8acda810a664c9b0e6d25c1caf509b9.h", "FileName": "include/openssl/x509v3.h", "Line": 717, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["ASN1_OCTET_STRING *a2i_IPADDRESS_NC(const char *ipasc);", "int X509V3_NAME_from_section(X509_NAME *nm, STACK_OF(CONF_VALUE) *dn_sk,", "                             unsigned long chtype);", "", "void X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent);", "DEFINE_STACK_OF(X509_POLICY_NODE)", "", "#ifndef OPENSSL_NO_RFC3779", "typedef struct ASRange_st {", "    ASN1_INTEGER *min, *max;"], "SrcStart": 712}, {"FileMD5": "92bcec0abe7c5b1e8d07dbb872654315.c", "FileName": "crypto/x509v3/pcy_tree.c", "Line": 410, "Tip": "Function <b>sk_X509_POLICY_NODE_value</b> executes and stores the return value to <b>node</b> (<b>node</b> can be null)", "SrcLines": ["", "    for (;;) {", "        --curr;", "        nodes = curr->nodes;", "        for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--) {", "            node = sk_X509_POLICY_NODE_value(nodes, i);", "            if (node->nchild == 0) {", "                node->parent->nchild--;", "                OPENSSL_free(node);", "                (void)sk_X509_POLICY_NODE_delete(nodes, i);"], "SrcStart": 405}, {"FileMD5": "92bcec0abe7c5b1e8d07dbb872654315.c", "FileName": "crypto/x509v3/pcy_tree.c", "Line": 411, "Tip": "Load value from <b>node-&gt;nchild</b>", "SrcLines": ["    for (;;) {", "        --curr;", "        nodes = curr->nodes;", "        for (i = sk_X509_POLICY_NODE_num(nodes) - 1; i >= 0; i--) {", "            node = sk_X509_POLICY_NODE_value(nodes, i);", "            if (node->nchild == 0) {", "                node->parent->nchild--;", "                OPENSSL_free(node);", "                (void)sk_X509_POLICY_NODE_delete(nodes, i);", "            }"], "SrcStart": 406}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/x509v3/pcy_tree.c", "Line": 411}, {"HashID": "8cfe5896b9bc4226ee6f18ac556d7a50", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "ca1bcbeb340dcd3309559e910e85ed73.c", "FileName": "crypto/stack/stack.c", "Line": 289, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 284}, {"FileMD5": "a8acda810a664c9b0e6d25c1caf509b9.h", "FileName": "include/openssl/x509v3.h", "Line": 446, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["# define X509V3_ADD_REPLACE_EXISTING     3L", "# define X509V3_ADD_KEEP_EXISTING        4L", "# define X509V3_ADD_DELETE               5L", "# define X509V3_ADD_SILENT               0x10", "", "DEFINE_STACK_OF(X509_PURPOSE)", "", "DECLARE_ASN1_FUNCTIONS(BASIC_CONSTRAINTS)", "", "DECLARE_ASN1_FUNCTIONS(SXNET)"], "SrcStart": 441}, {"FileMD5": "275e2a08c0dedb2b56f9f36df0ea0b65.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 117, "Tip": "Function <b>sk_X509_PURPOSE_value</b> executes and returns", "SrcLines": ["{", "    if (idx < 0)", "        return NULL;", "    if (idx < (int)X509_PURPOSE_COUNT)", "        return xstandard + idx;", "    return sk_X509_PURPOSE_value(xptable, idx - X509_PURPOSE_COUNT);", "}", "", "int X509_PURPOSE_get_by_sname(const char *sname)", "{"], "SrcStart": 112}, {"FileMD5": "275e2a08c0dedb2b56f9f36df0ea0b65.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 118, "Tip": "Return the return value of function <b>sk_X509_PURPOSE_value</b> to caller (The return value can be null)", "SrcLines": ["    if (idx < 0)", "        return NULL;", "    if (idx < (int)X509_PURPOSE_COUNT)", "        return xstandard + idx;", "    return sk_X509_PURPOSE_value(xptable, idx - X509_PURPOSE_COUNT);", "}", "", "int X509_PURPOSE_get_by_sname(const char *sname)", "{", "    int i;"], "SrcStart": 113}, {"FileMD5": "275e2a08c0dedb2b56f9f36df0ea0b65.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 169, "Tip": "Function <b>X509_PURPOSE_get0</b> executes and stores the return value to <b>ptmp</b> (<b>ptmp</b> can be null)", "SrcLines": ["            X509V3err(X509V3_F_X509_PURPOSE_ADD, ERR_R_MALLOC_FAILURE);", "            return 0;", "        }", "        ptmp->flags = X509_PURPOSE_DYNAMIC;", "    } else", "        ptmp = X509_PURPOSE_get0(idx);", "", "    /* OPENSSL_free existing name if dynamic */", "    if (ptmp->flags & X509_PURPOSE_DYNAMIC_NAME) {", "        OPENSSL_free(ptmp->name);"], "SrcStart": 164}, {"FileMD5": "275e2a08c0dedb2b56f9f36df0ea0b65.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 172, "Tip": "Load value from <b>ptmp-&gt;flags</b>", "SrcLines": ["        ptmp->flags = X509_PURPOSE_DYNAMIC;", "    } else", "        ptmp = X509_PURPOSE_get0(idx);", "", "    /* OPENSSL_free existing name if dynamic */", "    if (ptmp->flags & X509_PURPOSE_DYNAMIC_NAME) {", "        OPENSSL_free(ptmp->name);", "        OPENSSL_free(ptmp->sname);", "    }", "    /* dup supplied name */"], "SrcStart": 167}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/x509v3/v3_purp.c", "Line": 172}, {"HashID": "3dfa7d8cf063f0cf21d07276c47da457", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "ca1bcbeb340dcd3309559e910e85ed73.c", "FileName": "crypto/stack/stack.c", "Line": 289, "Tip": "Return <b>null</b> to caller", "SrcLines": ["void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)", "{", "    if (st == NULL || i < 0 || i >= st->num)", "        return NULL;", "    return (void *)st->data[i];", "}", "", "void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)", "{", "    if (st == NULL || i < 0 || i >= st->num)"], "SrcStart": 284}, {"FileMD5": "bfba7e508f0613ec8f80e4651fe7d8ae.h", "FileName": "include/openssl/x509.h", "Line": 97, "Tip": "Return the return value of function <b>OPENSSL_sk_value</b> to caller", "SrcLines": ["", "typedef struct x509_cert_aux_st X509_CERT_AUX;", "", "typedef struct x509_cinf_st X509_CINF;", "", "DEFINE_STACK_OF(X509)", "", "/* This is used for a table of trust checking functions */", "", "typedef struct x509_trust_st {"], "SrcStart": 92}, {"FileMD5": "59a9b59273169ca11c8c5ce21773f8c5.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 1220, "Tip": "Function <b>sk_X509_value</b> executes and stores the return value to <b>crl_issuer</b> (<b>crl_issuer</b> can be null)", "SrcLines": ["    int i;", "", "    if (cidx != sk_X509_num(ctx->chain) - 1)", "        cidx++;", "", "    crl_issuer = sk_X509_value(ctx->chain, cidx);", "", "    if (X509_check_akid(crl_issuer, crl->akid) == X509_V_OK) {", "        if (*pcrl_score & CRL_SCORE_ISSUER_NAME) {", "            *pcrl_score |= CRL_SCORE_AKID | CRL_SCORE_ISSUER_CERT;"], "SrcStart": 1215}, {"FileMD5": "59a9b59273169ca11c8c5ce21773f8c5.c", "FileName": "crypto/x509/x509_vfy.c", "Line": 1222, "Tip": "<b>crl_issuer</b> is used as the 1st parameter in function <b>X509_check_akid</b> (<b>crl_issuer</b> can be null)", "SrcLines": ["    if (cidx != sk_X509_num(ctx->chain) - 1)", "        cidx++;", "", "    crl_issuer = sk_X509_value(ctx->chain, cidx);", "", "    if (X509_check_akid(crl_issuer, crl->akid) == X509_V_OK) {", "        if (*pcrl_score & CRL_SCORE_ISSUER_NAME) {", "            *pcrl_score |= CRL_SCORE_AKID | CRL_SCORE_ISSUER_CERT;", "            *pissuer = crl_issuer;", "            return;"], "SrcStart": 1217}, {"FileMD5": "275e2a08c0dedb2b56f9f36df0ea0b65.c", "FileName": "crypto/x509v3/v3_purp.c", "Line": 796, "Tip": "Load value from <b>issuer-&gt;skid</b>", "SrcLines": ["", "    if (!akid)", "        return X509_V_OK;", "", "    /* Check key ids (if present) */", "    if (akid->keyid && issuer->skid &&", "        ASN1_OCTET_STRING_cmp(akid->keyid, issuer->skid))", "        return X509_V_ERR_AKID_SKID_MISMATCH;", "    /* Check serial number */", "    if (akid->serial &&"], "SrcStart": 791}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "crypto/x509v3/v3_purp.c", "Line": 796}, {"HashID": "d04ff7ebe10a7e48e9726f239ca25a54", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f6246a8734eae86d7256801a0a4fd7db.c", "FileName": "ssl/s3_lib.c", "Line": 3068, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>ssl_cert_set1_chain</b>", "SrcLines": ["        break;", "#endif", "", "    case SSL_CTRL_CHAIN:", "        if (larg)", "            return ssl_cert_set1_chain(s, NULL, (STACK_OF(X509) *)parg);", "        else", "            return ssl_cert_set0_chain(s, NULL, (STACK_OF(X509) *)parg);", "", "    case SSL_CTRL_CHAIN_CERT:"], "SrcStart": 3063}, {"FileMD5": "5ccfe02258a3cc1e4373179ee0271987.c", "FileName": "ssl/ssl_cert.c", "Line": 283, "Tip": "<b>ctx</b> is used as the 2nd parameter in function <b>ssl_cert_set0_chain</b> (<b>ctx</b> can be null)", "SrcLines": ["", "int ssl_cert_set1_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)", "{", "    STACK_OF(X509) *dchain;", "    if (!chain)", "        return ssl_cert_set0_chain(s, ctx, NULL);", "    dchain = X509_chain_up_ref(chain);", "    if (!dchain)", "        return 0;", "    if (!ssl_cert_set0_chain(s, ctx, dchain)) {"], "SrcStart": 278}, {"FileMD5": "5ccfe02258a3cc1e4373179ee0271987.c", "FileName": "ssl/ssl_cert.c", "Line": 264, "Tip": "Load value from <b>ctx-&gt;cert</b>", "SrcLines": ["}", "", "int ssl_cert_set0_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)", "{", "    int i, r;", "    CERT_PKEY *cpk = s ? s->cert->key : ctx->cert->key;", "    if (!cpk)", "        return 0;", "    for (i = 0; i < sk_X509_num(chain); i++) {", "        r = ssl_security_cert(s, ctx, sk_X509_value(chain, i), 0, 0);"], "SrcStart": 259}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_cert.c", "Line": 264}, {"HashID": "45e15a1c942f8f19965a1d133be73d42", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f6246a8734eae86d7256801a0a4fd7db.c", "FileName": "ssl/s3_lib.c", "Line": 3076, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>ssl_cert_add0_chain_cert</b>", "SrcLines": ["", "    case SSL_CTRL_CHAIN_CERT:", "        if (larg)", "            return ssl_cert_add1_chain_cert(s, NULL, (X509 *)parg);", "        else", "            return ssl_cert_add0_chain_cert(s, NULL, (X509 *)parg);", "", "    case SSL_CTRL_GET_CHAIN_CERTS:", "        *(STACK_OF(X509) **)parg = s->cert->key->chain;", "        break;"], "SrcStart": 3071}, {"FileMD5": "5ccfe02258a3cc1e4373179ee0271987.c", "FileName": "ssl/ssl_cert.c", "Line": 297, "Tip": "Load value from <b>ctx-&gt;cert</b>", "SrcLines": ["}", "", "int ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)", "{", "    int r;", "    CERT_PKEY *cpk = s ? s->cert->key : ctx->cert->key;", "    if (!cpk)", "        return 0;", "    r = ssl_security_cert(s, ctx, x, 0, 0);", "    if (r != 1) {"], "SrcStart": 292}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_cert.c", "Line": 297}, {"HashID": "ca0e8a518802e5a347ce69a265abf80a", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "f6246a8734eae86d7256801a0a4fd7db.c", "FileName": "ssl/s3_lib.c", "Line": 3178, "Tip": "<b>null</b> is used as the 2nd parameter in function <b>ssl_build_cert_chain</b>", "SrcLines": ["        if (!s->server)", "            return 0;", "        return ssl3_set_req_cert_type(s->cert, parg, larg);", "", "    case SSL_CTRL_BUILD_CERT_CHAIN:", "        return ssl_build_cert_chain(s, NULL, larg);", "", "    case SSL_CTRL_SET_VERIFY_CERT_STORE:", "        return ssl_cert_set_cert_store(s->cert, parg, 0, larg);", ""], "SrcStart": 3173}, {"FileMD5": "5ccfe02258a3cc1e4373179ee0271987.c", "FileName": "ssl/ssl_cert.c", "Line": 865, "Tip": "Load value from <b>ctx-&gt;cert</b>", "SrcLines": ["}", "", "/* Build a certificate chain for current certificate */", "int ssl_build_cert_chain(SSL *s, SSL_CTX *ctx, int flags)", "{", "    CERT *c = s ? s->cert : ctx->cert;", "    CERT_PKEY *cpk = c->key;", "    X509_STORE *chain_store = NULL;", "    X509_STORE_CTX *xs_ctx = NULL;", "    STACK_OF(X509) *chain = NULL, *untrusted = NULL;"], "SrcStart": 860}], "Review": 80, "Time": 1630075188000, "DocID": "PE0001", "File": "ssl/ssl_cert.c", "Line": 865}]}, "start": 71, "end": 80, "page": 9, "total_pages": 11, "language": "en"}