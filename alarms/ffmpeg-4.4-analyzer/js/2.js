var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "DocHTML": "<div class=\"toc\">\n<ul>\n<li><a href=\"#description\">Description</a></li>\n<li><a href=\"#vulnerability-and-risk\">Vulnerability and Risk</a><ul>\n<li><a href=\"#dos-crash-exit-restart\">DoS / crash / exit / restart</a></li>\n<li><a href=\"#execute-unauthorized-code-or-commands\">Execute unauthorized code or commands</a></li>\n</ul>\n</li>\n<li><a href=\"#likelihood-of-exploit\">Likelihood of Exploit</a></li>\n<li><a href=\"#potential-mitigations\">Potential Mitigations</a></li>\n<li><a href=\"#demonstrative-examples\">Demonstrative Examples</a><ul>\n<li><a href=\"#vulnerable-code-example-1\">Vulnerable code Example 1</a></li>\n<li><a href=\"#fixed-code-example-1\">Fixed Code Example 1</a></li>\n<li><a href=\"#vulnerable-code-example-2\">Vulnerable code Example 2</a></li>\n<li><a href=\"#fixed-code-example-2\">Fixed code example 2</a></li>\n<li><a href=\"#vulnerable-code-example-3\">Vulnerable code Example 3</a></li>\n<li><a href=\"#fixed-code-example-3\">Fixed code example 3</a></li>\n</ul>\n</li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n</div>\n\n  <div>\n    \n<h1 id=\"description\">Description</h1>\n<p>An attempt to access data using a null pointer causes a runtime error. When a program dereferences a pointer that is expected to be valid but turns out to be null, a null pointer dereference occurs. Null-pointer dereference defects often occur due to ineffective error handling or race conditions, and typically cause abnormal program termination. Before a pointer is dereferenced in C/C++ code, it must be checked to confirm that it is not equal to null.</p>\n<h1 id=\"vulnerability-and-risk\">Vulnerability and Risk</h1>\n<h4 id=\"dos-crash-exit-restart\">DoS / crash / exit / restart</h4>\n<p>NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.</p>\n<h4 id=\"execute-unauthorized-code-or-commands\">Execute unauthorized code or commands</h4>\n<p>In very rare circumstances and environments, code execution is possible.</p>\n<h1 id=\"likelihood-of-exploit\">Likelihood of Exploit</h1>\n<p>Critical</p>\n<h1 id=\"potential-mitigations\">Potential Mitigations</h1>\n<ul>\n<li>Check for a null value in the results of all functions that return values</li>\n<li>Make sure all external inputs are validated</li>\n<li>Explicitly initialize variables</li>\n<li>Make sure that unusual exceptions are handled correctly</li>\n</ul>\n<h1 id=\"demonstrative-examples\">Demonstrative Examples</h1>\n<h3 id=\"vulnerable-code-example-1\">Vulnerable code Example 1</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">reassign</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">goodEnough</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"o\">*</span><span class=\"n\">argument</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">npd_check_call_must</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">getValue</span><span class=\"p\">();</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">reassign</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>Although *p is checked for null at line 8, it's then passed to function reassign, in which it is dereferenced without being checked for null. This type of vulnerability can produce unexpected and unintended results.</p>\n<h3 id=\"fixed-code-example-1\">Fixed Code Example 1</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">reassign</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">goodEnough</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">))</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"o\">*</span><span class=\"n\">argument</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">npd_check_call_must</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">argument</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">getValue</span><span class=\"p\">();</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">reassign</span><span class=\"p\">(</span><span class=\"n\">argument</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>In the fixed version of the code, a second check for null has been put in line 11.</p>\n<h3 id=\"vulnerable-code-example-2\">Vulnerable code Example 2</h3>\n<p>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</p>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">host_lookup</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">){</span>\n  <span class=\"k\">struct</span> <span class=\"n\">hostent</span> <span class=\"o\">*</span><span class=\"n\">hp</span><span class=\"p\">;</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"o\">*</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">hostname</span><span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">];</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// routine that ensures user_supplied_addr is in the right format for conversion </span>\n  <span class=\"n\">validate_addr_form</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">hp</span> <span class=\"o\">=</span> <span class=\"n\">gethostbyaddr</span><span class=\"p\">(</span> <span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">),</span> <span class=\"n\">AF_INET</span><span class=\"p\">);</span>\n  <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"n\">hp</span><span class=\"o\">-&gt;</span><span class=\"n\">h_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr, a NULL pointer dereference would then occur in the call to strcpy().</p>\n<h3 id=\"fixed-code-example-2\">Fixed code example 2</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">host_lookup</span><span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">){</span>\n  <span class=\"k\">struct</span> <span class=\"n\">hostent</span> <span class=\"o\">*</span><span class=\"n\">hp</span><span class=\"p\">;</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"o\">*</span><span class=\"n\">addr</span><span class=\"p\">;</span>\n  <span class=\"kt\">char</span> <span class=\"n\">hostname</span><span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">];</span>\n  <span class=\"n\">in_addr_t</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">cp</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// routine that ensures user_supplied_addr is in the right format for conversion </span>\n  <span class=\"n\">validate_addr_form</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">addr</span> <span class=\"o\">=</span> <span class=\"n\">inet_addr</span><span class=\"p\">(</span><span class=\"n\">user_supplied_addr</span><span class=\"p\">);</span>\n  <span class=\"n\">hp</span> <span class=\"o\">=</span> <span class=\"n\">gethostbyaddr</span><span class=\"p\">(</span> <span class=\"n\">addr</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">in_addr</span><span class=\"p\">),</span> <span class=\"n\">AF_INET</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">hp</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">hostname</span><span class=\"p\">,</span> <span class=\"n\">hp</span><span class=\"o\">-&gt;</span><span class=\"n\">h_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table>\n<p>In the fixed version of the code, another null check was added on line 11.</p>\n<h3 id=\"vulnerable-code-example-3\">Vulnerable code Example 3</h3>\n<p>This java example illustrates missing check of returned value might lead to crash of a program.</p>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Example</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">File</span> <span class=\"n\">file</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"n\">FileReader</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileReader</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"o\">[(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">io</span><span class=\"o\">.</span><span class=\"na\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">String</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n    <span class=\"c1\">// config might be null. If so, main exits.</span>\n    <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\\n\"</span><span class=\"o\">);</span>\n    <span class=\"o\">...</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</td></tr></table>\n<h3 id=\"fixed-code-example-3\">Fixed code example 3</h3>\n<table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Example</span> <span class=\"o\">{</span>\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">File</span> <span class=\"n\">file</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"n\">FileReader</span> <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">FileReader</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n      <span class=\"kt\">char</span><span class=\"o\">[]</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">char</span><span class=\"o\">[(</span><span class=\"kt\">int</span><span class=\"o\">)</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()];</span>\n      <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n      <span class=\"o\">}</span>\n      <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">String</span><span class=\"o\">(</span><span class=\"n\">buffer</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"n\">java</span><span class=\"o\">.</span><span class=\"na\">io</span><span class=\"o\">.</span><span class=\"na\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">String</span> <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">readConfigFromFile</span><span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">err</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Can't read config from \"</span> <span class=\"o\">+</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]);</span>\n      <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">exit</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">split</span><span class=\"o\">(</span><span class=\"s\">\"\\n\"</span><span class=\"o\">);</span>\n    <span class=\"o\">...</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</td></tr></table>\n<h1 id=\"references\">References</h1>\n<div class=\"footnote\">\n<hr>\n<ol>\n<li id=\"fn-CWE\">\n<p>https://cwe.mitre.org/data/definitions/476.html\u00a0<a class=\"footnote-backref\" href=\"#fnref-CWE\" title=\"Jump back to footnote 1 in the text\">\u21a9</a></p>\n</li>\n<li id=\"fn-CERT1\">\n<p>https://wiki.sei.cmu.edu/confluence/display/c/EXP34-C.+Do+not+dereference+null+pointers\u00a0<a class=\"footnote-backref\" href=\"#fnref-CERT1\" title=\"Jump back to footnote 2 in the text\">\u21a9</a></p>\n</li>\n<li id=\"fn-CERT2\">\n<p>https://wiki.sei.cmu.edu/confluence/display/java/EXP00-J.+Do+not+ignore+values+returned+by+methods\u00a0<a class=\"footnote-backref\" href=\"#fnref-CERT2\" title=\"Jump back to footnote 3 in the text\">\u21a9</a></p>\n</li>\n</ol>\n</div>\n  </div>\n  ", "CaseList": [{"HashID": "24e9f0c529d16037f4075e8f41de13ed", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2ba34fe9865b5fb9db5b02f0d680e0e6.c", "FileName": "libavcodec/ac3enc.c", "Line": 349, "Tip": "Select the false branch at this point (<b>s-&gt;rematrixing_enabled==0</b> is false)", "SrcLines": ["    int nb_coefs;", "    int blk, bnd, i;", "    int start, end;", "    uint8_t *flags = NULL;", "", "    if (!s->rematrixing_enabled)", "        return;", "", "    for (blk = 0; blk < s->num_blocks; blk++) {", "        AC3Block *block = &s->blocks[blk];"], "SrcStart": 344}, {"FileMD5": "2ba34fe9865b5fb9db5b02f0d680e0e6.c", "FileName": "libavcodec/ac3enc.c", "Line": 354, "Tip": "Select the false branch at this point (<b>s-&gt;blocks[i].new_rematrixing_strategy!=0</b> is false)", "SrcLines": ["    if (!s->rematrixing_enabled)", "        return;", "", "    for (blk = 0; blk < s->num_blocks; blk++) {", "        AC3Block *block = &s->blocks[blk];", "        if (block->new_rematrixing_strategy)", "            flags = block->rematrixing_flags;", "        nb_coefs = FFMIN(block->end_freq[1], block->end_freq[2]);", "        for (bnd = 0; bnd < block->num_rematrixing_bands; bnd++) {", "            if (flags[bnd]) {"], "SrcStart": 349}, {"FileMD5": "2ba34fe9865b5fb9db5b02f0d680e0e6.c", "FileName": "libavcodec/ac3enc.c", "Line": 357, "Tip": "Select the false branch at this point (<b>i&lt;s-&gt;blocks[i].num_rematrixing_bands</b> is false)", "SrcLines": ["    for (blk = 0; blk < s->num_blocks; blk++) {", "        AC3Block *block = &s->blocks[blk];", "        if (block->new_rematrixing_strategy)", "            flags = block->rematrixing_flags;", "        nb_coefs = FFMIN(block->end_freq[1], block->end_freq[2]);", "        for (bnd = 0; bnd < block->num_rematrixing_bands; bnd++) {", "            if (flags[bnd]) {", "                start = ff_ac3_rematrix_band_tab[bnd];", "                end   = FFMIN(nb_coefs, ff_ac3_rematrix_band_tab[bnd+1]);", "                for (i = start; i < end; i++) {"], "SrcStart": 352}, {"FileMD5": "2ba34fe9865b5fb9db5b02f0d680e0e6.c", "FileName": "libavcodec/ac3enc.c", "Line": 354, "Tip": "Select the false branch at this point (<b>s-&gt;blocks[i].new_rematrixing_strategy!=0</b> is false)", "SrcLines": ["    if (!s->rematrixing_enabled)", "        return;", "", "    for (blk = 0; blk < s->num_blocks; blk++) {", "        AC3Block *block = &s->blocks[blk];", "        if (block->new_rematrixing_strategy)", "            flags = block->rematrixing_flags;", "        nb_coefs = FFMIN(block->end_freq[1], block->end_freq[2]);", "        for (bnd = 0; bnd < block->num_rematrixing_bands; bnd++) {", "            if (flags[bnd]) {"], "SrcStart": 349}, {"FileMD5": "2ba34fe9865b5fb9db5b02f0d680e0e6.c", "FileName": "libavcodec/ac3enc.c", "Line": 358, "Tip": "Load value from <b>flags[i]</b>", "SrcLines": ["        AC3Block *block = &s->blocks[blk];", "        if (block->new_rematrixing_strategy)", "            flags = block->rematrixing_flags;", "        nb_coefs = FFMIN(block->end_freq[1], block->end_freq[2]);", "        for (bnd = 0; bnd < block->num_rematrixing_bands; bnd++) {", "            if (flags[bnd]) {", "                start = ff_ac3_rematrix_band_tab[bnd];", "                end   = FFMIN(nb_coefs, ff_ac3_rematrix_band_tab[bnd+1]);", "                for (i = start; i < end; i++) {", "                    int32_t lt = block->fixed_coef[1][i];"], "SrcStart": 353}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ac3enc.c", "Line": 358}, {"HashID": "0cbed92a12ac2bbe9146b1ed38de6bb3", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 636, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["{", "    static const int8_t row_map[] = {", "        11, -1, 1, 2, 3, 4, 12, 13, 14, 15, 5, 6, 7, 8, 9, 10", "    };", "    const int index = ( (hi<<1) & 0x0e) | ( (lo>>5) & 0x01 );", "    struct Screen *screen = get_writing_screen(ctx);", "    int indent, i;", "", "    if (row_map[index] <= 0) {", "        av_log(ctx, AV_LOG_DEBUG, \"Invalid pac index encountered\\n\");"], "SrcStart": 631}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 653, "Tip": "<b>screen</b> is used as the 2nd parameter in function <b>write_char</b> (<b>screen</b> can be null)", "SrcLines": ["    ctx->cursor_font = pac2_attribs[lo][1];", "    ctx->cursor_charset = CCSET_BASIC_AMERICAN;", "    ctx->cursor_column = 0;", "    indent = pac2_attribs[lo][2];", "    for (i = 0; i < indent; i++) {", "        write_char(ctx, screen, ' ');", "    }", "}", "", "static int handle_edm(CCaptionSubContext *ctx)"], "SrcStart": 648}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 336, "Tip": "Store <b>ctx-&gt;cursor_font</b> to <b>screen-&gt;fonts[ctx-&gt;cursor_row][0][col]</b>", "SrcLines": ["    char *bg = screen->bgs[ctx->cursor_row];", "    char *charset = screen->charsets[ctx->cursor_row];", "", "    if (col < SCREEN_COLUMNS) {", "        row[col] = ch;", "        font[col] = ctx->cursor_font;", "        color[col] = ctx->cursor_color;", "        bg[col] = ctx->bg_color;", "        charset[col] = ctx->cursor_charset;", "        ctx->cursor_charset = CCSET_BASIC_AMERICAN;"], "SrcStart": 331}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 336}, {"HashID": "57fa7f490094b15f5fedb3e543ca9fa3", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 701, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["    return ret;", "}", "", "static void handle_delete_end_of_row(CCaptionSubContext *ctx)", "{", "    struct Screen *screen = get_writing_screen(ctx);", "    write_char(ctx, screen, 0);", "}", "", "static void handle_char(CCaptionSubContext *ctx, char hi, char lo)"], "SrcStart": 696}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 702, "Tip": "<b>screen</b> is used as the 2nd parameter in function <b>write_char</b> (<b>screen</b> can be null)", "SrcLines": ["}", "", "static void handle_delete_end_of_row(CCaptionSubContext *ctx)", "{", "    struct Screen *screen = get_writing_screen(ctx);", "    write_char(ctx, screen, 0);", "}", "", "static void handle_char(CCaptionSubContext *ctx, char hi, char lo)", "{"], "SrcStart": 697}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 337, "Tip": "Store <b>ctx-&gt;cursor_color</b> to <b>screen-&gt;colors[ctx-&gt;cursor_row][0][col]</b>", "SrcLines": ["    char *charset = screen->charsets[ctx->cursor_row];", "", "    if (col < SCREEN_COLUMNS) {", "        row[col] = ch;", "        font[col] = ctx->cursor_font;", "        color[col] = ctx->cursor_color;", "        bg[col] = ctx->bg_color;", "        charset[col] = ctx->cursor_charset;", "        ctx->cursor_charset = CCSET_BASIC_AMERICAN;", "        if (ch) ctx->cursor_column++;"], "SrcStart": 332}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 337}, {"HashID": "4c79f30250fd1a9209bd984af7b0624b", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 618, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["}", "", "static void handle_textattr(CCaptionSubContext *ctx, uint8_t hi, uint8_t lo)", "{", "    int i = lo - 0x20;", "    struct Screen *screen = get_writing_screen(ctx);", "", "    if (i >= 32)", "        return;", ""], "SrcStart": 613}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 627, "Tip": "<b>screen</b> is used as the 2nd parameter in function <b>write_char</b> (<b>screen</b> can be null)", "SrcLines": ["", "    ctx->cursor_color = pac2_attribs[i][0];", "    ctx->cursor_font = pac2_attribs[i][1];", "", "    SET_FLAG(screen->row_used, ctx->cursor_row);", "    write_char(ctx, screen, ' ');", "}", "", "static void handle_pac(CCaptionSubContext *ctx, uint8_t hi, uint8_t lo)", "{"], "SrcStart": 622}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 339, "Tip": "Store <b>ctx-&gt;cursor_charset</b> to <b>screen-&gt;charsets[ctx-&gt;cursor_row][0][col]</b>", "SrcLines": ["    if (col < SCREEN_COLUMNS) {", "        row[col] = ch;", "        font[col] = ctx->cursor_font;", "        color[col] = ctx->cursor_color;", "        bg[col] = ctx->bg_color;", "        charset[col] = ctx->cursor_charset;", "        ctx->cursor_charset = CCSET_BASIC_AMERICAN;", "        if (ch) ctx->cursor_column++;", "        return;", "    }"], "SrcStart": 334}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 339}, {"HashID": "92ecaab4e14fc57e231ba477fd066418", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 701, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["    return ret;", "}", "", "static void handle_delete_end_of_row(CCaptionSubContext *ctx)", "{", "    struct Screen *screen = get_writing_screen(ctx);", "    write_char(ctx, screen, 0);", "}", "", "static void handle_char(CCaptionSubContext *ctx, char hi, char lo)"], "SrcStart": 696}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 702, "Tip": "<b>screen</b> is used as the 2nd parameter in function <b>write_char</b> (<b>screen</b> can be null)", "SrcLines": ["}", "", "static void handle_delete_end_of_row(CCaptionSubContext *ctx)", "{", "    struct Screen *screen = get_writing_screen(ctx);", "    write_char(ctx, screen, 0);", "}", "", "static void handle_char(CCaptionSubContext *ctx, char hi, char lo)", "{"], "SrcStart": 697}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 346, "Tip": "Store <b>ch</b> to <b>screen-&gt;characters[ctx-&gt;cursor_row][0][col]</b>", "SrcLines": ["        if (ch) ctx->cursor_column++;", "        return;", "    }", "    /* We have extra space at end only for null character */", "    else if (col == SCREEN_COLUMNS && ch == 0) {", "        row[col] = ch;", "        return;", "    }", "    else {", "        av_log(ctx, AV_LOG_WARNING, \"Data Ignored since exceeding screen width\\n\");"], "SrcStart": 341}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 346}, {"HashID": "2a964eedaa122f19a1b54d46c9f5ed50", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 418, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["    int i, keep_lines;", "", "    if (ctx->mode == CCMODE_TEXT)", "        return;", "", "    screen = get_writing_screen(ctx);", "", "    /* +1 signify cursor_row starts from 0", "     * Can't keep lines less then row cursor pos", "     */"], "SrcStart": 413}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 428, "Tip": "Load value from <b>screen-&gt;row_used</b>", "SrcLines": ["    keep_lines = FFMIN(ctx->cursor_row + 1, ctx->rollup);", "", "    for (i = 0; i < SCREEN_ROWS; i++) {", "        if (i > ctx->cursor_row - keep_lines && i <= ctx->cursor_row)", "            continue;", "        UNSET_FLAG(screen->row_used, i);", "    }", "", "    for (i = 0; i < keep_lines && screen->row_used; i++) {", "        const int i_row = ctx->cursor_row - keep_lines + i + 1;"], "SrcStart": 423}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 428}, {"HashID": "258af516747138f2ba85770b8431f0cb", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 418, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["    int i, keep_lines;", "", "    if (ctx->mode == CCMODE_TEXT)", "        return;", "", "    screen = get_writing_screen(ctx);", "", "    /* +1 signify cursor_row starts from 0", "     * Can't keep lines less then row cursor pos", "     */"], "SrcStart": 413}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 431, "Tip": "Load value from <b>screen-&gt;row_used</b>", "SrcLines": ["        if (i > ctx->cursor_row - keep_lines && i <= ctx->cursor_row)", "            continue;", "        UNSET_FLAG(screen->row_used, i);", "    }", "", "    for (i = 0; i < keep_lines && screen->row_used; i++) {", "        const int i_row = ctx->cursor_row - keep_lines + i + 1;", "", "        memcpy(screen->characters[i_row], screen->characters[i_row+1], SCREEN_COLUMNS);", "        memcpy(screen->colors[i_row], screen->colors[i_row+1], SCREEN_COLUMNS);"], "SrcStart": 426}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 431}, {"HashID": "f10bbb38909a32bc2290ff660197b093", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 418, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["    int i, keep_lines;", "", "    if (ctx->mode == CCMODE_TEXT)", "        return;", "", "    screen = get_writing_screen(ctx);", "", "    /* +1 signify cursor_row starts from 0", "     * Can't keep lines less then row cursor pos", "     */"], "SrcStart": 413}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 438, "Tip": "Copy data to <b>&amp;(&amp;(screen-&gt;charsets)[i_row])</b> (<b>&amp;(&amp;(screen-&gt;charsets)[i_row])</b> can be null)", "SrcLines": ["", "        memcpy(screen->characters[i_row], screen->characters[i_row+1], SCREEN_COLUMNS);", "        memcpy(screen->colors[i_row], screen->colors[i_row+1], SCREEN_COLUMNS);", "        memcpy(screen->bgs[i_row], screen->bgs[i_row+1], SCREEN_COLUMNS);", "        memcpy(screen->fonts[i_row], screen->fonts[i_row+1], SCREEN_COLUMNS);", "        memcpy(screen->charsets[i_row], screen->charsets[i_row+1], SCREEN_COLUMNS);", "        if (CHECK_FLAG(screen->row_used, i_row + 1))", "            SET_FLAG(screen->row_used, i_row);", "    }", ""], "SrcStart": 433}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 438}, {"HashID": "fce3c40fbcbd70a76d17559f6fabb393", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 418, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["    int i, keep_lines;", "", "    if (ctx->mode == CCMODE_TEXT)", "        return;", "", "    screen = get_writing_screen(ctx);", "", "    /* +1 signify cursor_row starts from 0", "     * Can't keep lines less then row cursor pos", "     */"], "SrcStart": 413}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 443, "Tip": "Load value from <b>screen-&gt;row_used</b>", "SrcLines": ["        memcpy(screen->charsets[i_row], screen->charsets[i_row+1], SCREEN_COLUMNS);", "        if (CHECK_FLAG(screen->row_used, i_row + 1))", "            SET_FLAG(screen->row_used, i_row);", "    }", "", "    UNSET_FLAG(screen->row_used, ctx->cursor_row);", "}", "", "static int capture_screen(CCaptionSubContext *ctx)", "{"], "SrcStart": 438}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 443}, {"HashID": "e0f28692c33646cc38d22e313eb067dc", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 408, "Tip": "Return <b>null</b> to caller", "SrcLines": ["        // use active screen", "        return ctx->screen + ctx->active_screen;", "    }", "    /* It was never an option */", "    return NULL;", "}", "", "static void roll_up(CCaptionSubContext *ctx)", "{", "    struct Screen *screen;"], "SrcStart": 403}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 618, "Tip": "Function <b>get_writing_screen</b> executes and stores the return value to <b>screen</b> (<b>screen</b> can be null)", "SrcLines": ["}", "", "static void handle_textattr(CCaptionSubContext *ctx, uint8_t hi, uint8_t lo)", "{", "    int i = lo - 0x20;", "    struct Screen *screen = get_writing_screen(ctx);", "", "    if (i >= 32)", "        return;", ""], "SrcStart": 613}, {"FileMD5": "571459d78fd842f0d7505912ebf852dd.c", "FileName": "libavcodec/ccaption_dec.c", "Line": 626, "Tip": "Load value from <b>screen-&gt;row_used</b>", "SrcLines": ["        return;", "", "    ctx->cursor_color = pac2_attribs[i][0];", "    ctx->cursor_font = pac2_attribs[i][1];", "", "    SET_FLAG(screen->row_used, ctx->cursor_row);", "    write_char(ctx, screen, ' ');", "}", "", "static void handle_pac(CCaptionSubContext *ctx, uint8_t hi, uint8_t lo)"], "SrcStart": 621}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavcodec/ccaption_dec.c", "Line": 626}]}, "start": 1, "end": 10, "page": 2, "total_pages": 8, "language": "en"}