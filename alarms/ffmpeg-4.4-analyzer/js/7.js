var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "88d1f2d9e29532218d9d26543b86c2ce", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "d61be06ca0bbf282592db505af1d6d9e.c", "FileName": "libavformat/rtpdec.c", "Line": 822, "Tip": "Select the false branch at this point (<b>bufptr!=null</b> is false)", "SrcLines": ["}", "", "static int rtp_parse_one_packet(RTPDemuxContext *s, AVPacket *pkt,", "                                uint8_t **bufptr, int len)", "{", "    uint8_t *buf = bufptr ? *bufptr : NULL;", "    int flags = 0;", "    uint32_t timestamp;", "    int rv = 0;", ""], "SrcStart": 817}, {"FileMD5": "d61be06ca0bbf282592db505af1d6d9e.c", "FileName": "libavformat/rtpdec.c", "Line": 822, "Tip": "<b>null</b> assigned to <b>buf</b> reaches here", "SrcLines": ["}", "", "static int rtp_parse_one_packet(RTPDemuxContext *s, AVPacket *pkt,", "                                uint8_t **bufptr, int len)", "{", "    uint8_t *buf = bufptr ? *bufptr : NULL;", "    int flags = 0;", "    uint32_t timestamp;", "    int rv = 0;", ""], "SrcStart": 817}, {"FileMD5": "d61be06ca0bbf282592db505af1d6d9e.c", "FileName": "libavformat/rtpdec.c", "Line": 849, "Tip": "Load value from <b>*(buf)</b>", "SrcLines": ["    }", "", "    if (len < 12)", "        return -1;", "", "    if ((buf[0] & 0xc0) != (RTP_VERSION << 6))", "        return -1;", "    if (RTP_PT_IS_RTCP(buf[1])) {", "        return rtcp_parse_packet(s, buf, len);", "    }"], "SrcStart": 844}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavformat/rtpdec.c", "Line": 849}, {"HashID": "ef1fdb2600613b9ee96e88853835c5a4", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "bd32de9120278d14c8335f92d3f07ce7.c", "FileName": "libavformat/segment.c", "Line": 247, "Tip": "Store <b>null</b> to <b>seg-&gt;avf</b>", "SrcLines": ["    AVFormatContext *oc = seg->avf;", "    int err = 0;", "", "    if (write_header) {", "        avformat_free_context(oc);", "        seg->avf = NULL;", "        if ((err = segment_mux_init(s)) < 0)", "            return err;", "        oc = seg->avf;", "    }"], "SrcStart": 242}, {"FileMD5": "bd32de9120278d14c8335f92d3f07ce7.c", "FileName": "libavformat/segment.c", "Line": 250, "Tip": "Load value from <b>seg-&gt;avf</b> and assign to <b>oc</b>", "SrcLines": ["    if (write_header) {", "        avformat_free_context(oc);", "        seg->avf = NULL;", "        if ((err = segment_mux_init(s)) < 0)", "            return err;", "        oc = seg->avf;", "    }", "", "    seg->segment_idx++;", "    if ((seg->segment_idx_wrap) && (seg->segment_idx % seg->segment_idx_wrap == 0))"], "SrcStart": 245}, {"FileMD5": "bd32de9120278d14c8335f92d3f07ce7.c", "FileName": "libavformat/segment.c", "Line": 260, "Tip": "Load value from <b>oc-&gt;url</b>", "SrcLines": ["        seg->segment_idx_wrap_nb++;", "", "    if ((err = set_segment_filename(s)) < 0)", "        return err;", "", "    if ((err = s->io_open(s, &oc->pb, oc->url, AVIO_FLAG_WRITE, NULL)) < 0) {", "        av_log(s, AV_LOG_ERROR, \"Failed to open segment '%s'\\n\", oc->url);", "        return err;", "    }", "    if (!seg->individual_header_trailer)"], "SrcStart": 255}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavformat/segment.c", "Line": 260}, {"HashID": "c531b28e6fb6f6a9c1e67e0c0ff9acf6", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 87, "Tip": "Store <b>null</b> to <b>ptr</b>", "SrcLines": ["        return NULL;", "", "#if HAVE_POSIX_MEMALIGN", "    if (size) //OS X on SDK 10.6 has a broken posix_memalign implementation", "    if (posix_memalign(&ptr, ALIGN, size))", "        ptr = NULL;", "#elif HAVE_ALIGNED_MALLOC", "    ptr = _aligned_malloc(size, ALIGN);", "#elif HAVE_MEMALIGN", "#ifndef __DJGPP__"], "SrcStart": 82}, {"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 131, "Tip": "Load value from <b>ptr</b>", "SrcLines": ["    }", "#if CONFIG_MEMORY_POISONING", "    if (ptr)", "        memset(ptr, FF_MEMORY_POISON, size);", "#endif", "    return ptr;", "}", "", "void *av_realloc(void *ptr, size_t size)", "{"], "SrcStart": 126}, {"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 132, "Tip": "Return <b>ptr</b> to caller (The return value can be null)", "SrcLines": ["#if CONFIG_MEMORY_POISONING", "    if (ptr)", "        memset(ptr, FF_MEMORY_POISON, size);", "#endif", "    return ptr;", "}", "", "void *av_realloc(void *ptr, size_t size)", "{", "    if (size > max_alloc_size)"], "SrcStart": 127}, {"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 239, "Tip": "Function <b>av_malloc</b> executes and stores the return value to <b>ptr</b> (<b>ptr</b> can be null)", "SrcLines": ["    av_free(val);", "}", "", "void *av_mallocz(size_t size)", "{", "    void *ptr = av_malloc(size);", "    if (ptr)", "        memset(ptr, 0, size);", "    return ptr;", "}"], "SrcStart": 234}, {"FileMD5": "53b0899b13077386329d1d71cb63e94f.c", "FileName": "libavutil/mem.c", "Line": 242, "Tip": "Return <b>ptr</b> to caller, which can be null (The return value can be null)", "SrcLines": ["void *av_mallocz(size_t size)", "{", "    void *ptr = av_malloc(size);", "    if (ptr)", "        memset(ptr, 0, size);", "    return ptr;", "}", "", "void *av_calloc(size_t nmemb, size_t size)", "{"], "SrcStart": 237}, {"FileMD5": "7c9f8e07d42c6cc637c1a8b38d3e56f3.c", "FileName": "libavutil/eval.c", "Line": 348, "Tip": "Store value to <b>d</b>", "SrcLines": ["    av_freep(&e);", "}", "", "static int parse_primary(AVExpr **e, Parser *p)", "{", "    AVExpr *d = av_mallocz(sizeof(AVExpr));", "    char *next = p->s, *s0 = p->s;", "    int ret, i;", "", "    if (!d)"], "SrcStart": 343}, {"FileMD5": "7c9f8e07d42c6cc637c1a8b38d3e56f3.c", "FileName": "libavutil/eval.c", "Line": 461, "Tip": "Load value from <b>d</b>", "SrcLines": ["    else if (strmatch(next, \"floor\" )) d->type = e_floor;", "    else if (strmatch(next, \"ceil\"  )) d->type = e_ceil;", "    else if (strmatch(next, \"trunc\" )) d->type = e_trunc;", "    else if (strmatch(next, \"round\" )) d->type = e_round;", "    else if (strmatch(next, \"sqrt\"  )) d->type = e_sqrt;", "    else if (strmatch(next, \"not\"   )) d->type = e_not;", "    else if (strmatch(next, \"pow\"   )) d->type = e_pow;", "    else if (strmatch(next, \"print\" )) d->type = e_print;", "    else if (strmatch(next, \"random\")) d->type = e_random;", "    else if (strmatch(next, \"hypot\" )) d->type = e_hypot;"], "SrcStart": 456}, {"FileMD5": "7c9f8e07d42c6cc637c1a8b38d3e56f3.c", "FileName": "libavutil/eval.c", "Line": 461, "Tip": "Store <b>32</b> to <b>d-&gt;type</b>", "SrcLines": ["    else if (strmatch(next, \"floor\" )) d->type = e_floor;", "    else if (strmatch(next, \"ceil\"  )) d->type = e_ceil;", "    else if (strmatch(next, \"trunc\" )) d->type = e_trunc;", "    else if (strmatch(next, \"round\" )) d->type = e_round;", "    else if (strmatch(next, \"sqrt\"  )) d->type = e_sqrt;", "    else if (strmatch(next, \"not\"   )) d->type = e_not;", "    else if (strmatch(next, \"pow\"   )) d->type = e_pow;", "    else if (strmatch(next, \"print\" )) d->type = e_print;", "    else if (strmatch(next, \"random\")) d->type = e_random;", "    else if (strmatch(next, \"hypot\" )) d->type = e_hypot;"], "SrcStart": 456}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavutil/eval.c", "Line": 461}, {"HashID": "9c7180dfd28f147c907d3c467f574f1e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "e466c583c10011c37d5d3a51dfa63c13.c", "FileName": "libavutil/hwcontext_vaapi.c", "Line": 518, "Tip": "Store <b>null</b> to <b>test_surface</b>", "SrcLines": ["    AVVAAPIFramesContext  *avfc = hwfc->hwctx;", "    VAAPIFramesContext     *ctx = hwfc->internal->priv;", "    AVVAAPIDeviceContext *hwctx = hwfc->device_ctx->hwctx;", "    const VAAPIFormatDescriptor *desc;", "    VAImageFormat *expected_format;", "    AVBufferRef *test_surface = NULL;", "    VASurfaceID test_surface_id;", "    VAImage test_image;", "    VAStatus vas;", "    int err, i;"], "SrcStart": 513}, {"FileMD5": "e466c583c10011c37d5d3a51dfa63c13.c", "FileName": "libavutil/hwcontext_vaapi.c", "Line": 624, "Tip": "Load value from <b>test_surface</b>", "SrcLines": ["                   \"internal buffer pool.\\n\");", "            err = AVERROR(ENOMEM);", "            goto fail;", "        }", "    }", "    test_surface_id = (VASurfaceID)(uintptr_t)test_surface->data;", "", "    ctx->derive_works = 0;", "", "    err = vaapi_get_image_format(hwfc->device_ctx,"], "SrcStart": 619}, {"FileMD5": "e466c583c10011c37d5d3a51dfa63c13.c", "FileName": "libavutil/hwcontext_vaapi.c", "Line": 624, "Tip": "Load value from <b>test_surface-&gt;data</b>", "SrcLines": ["                   \"internal buffer pool.\\n\");", "            err = AVERROR(ENOMEM);", "            goto fail;", "        }", "    }", "    test_surface_id = (VASurfaceID)(uintptr_t)test_surface->data;", "", "    ctx->derive_works = 0;", "", "    err = vaapi_get_image_format(hwfc->device_ctx,"], "SrcStart": 619}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavutil/hwcontext_vaapi.c", "Line": 624}, {"HashID": "7f84eb6e2904211ecf3e0cdbfba7403e", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "5eb6946133e8e9ac9ac1888c3d7f18d1.c", "FileName": "libswscale/utils.c", "Line": 348, "Tip": "Store <b>null</b> to <b>filter</b>", "SrcLines": ["{", "    int i;", "    int filterSize;", "    int filter2Size;", "    int minFilterSize;", "    int64_t *filter    = NULL;", "    int64_t *filter2   = NULL;", "    const int64_t fone = 1LL << (54 - FFMIN(av_log2(srcW/dstW), 8));", "    int ret            = -1;", ""], "SrcStart": 343}, {"FileMD5": "5eb6946133e8e9ac9ac1888c3d7f18d1.c", "FileName": "libswscale/utils.c", "Line": 538, "Tip": "Load value from <b>filter</b>", "SrcLines": ["", "        if (srcFilter) {", "            for (k = 0; k < srcFilter->length; k++) {", "                for (j = 0; j < filterSize; j++)", "                    filter2[i * filter2Size + k + j] +=", "                        srcFilter->coeff[k] * filter[i * filterSize + j];", "            }", "        } else {", "            for (j = 0; j < filterSize; j++)", "                filter2[i * filter2Size + j] = filter[i * filterSize + j];"], "SrcStart": 533}, {"FileMD5": "5eb6946133e8e9ac9ac1888c3d7f18d1.c", "FileName": "libswscale/utils.c", "Line": 538, "Tip": "Load value from <b>filter[(i*filter2Size)+i]</b>", "SrcLines": ["", "        if (srcFilter) {", "            for (k = 0; k < srcFilter->length; k++) {", "                for (j = 0; j < filterSize; j++)", "                    filter2[i * filter2Size + k + j] +=", "                        srcFilter->coeff[k] * filter[i * filterSize + j];", "            }", "        } else {", "            for (j = 0; j < filterSize; j++)", "                filter2[i * filter2Size + j] = filter[i * filterSize + j];"], "SrcStart": 533}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libswscale/utils.c", "Line": 538}]}, "start": 51, "end": 55, "page": 7, "total_pages": 8, "language": "en"}