var data = {"bug_cases": {"BugType": "NULL pointer dereference", "Severity": 12, "CaseList": [{"HashID": "b374fccd5a320aa061bb4f6ca9ea96f5", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2886ee59333d5aa0474968134c674844.c", "FileName": "libavfilter/audio.c", "Line": 84, "Tip": "Return <b>null</b> to caller", "SrcLines": ["    frame->sample_rate = link->sample_rate;", "", "    av_samples_set_silence(frame->extended_data, 0, nb_samples, channels, link->format);", "", "    return frame;", "}", "", "AVFrame *ff_get_audio_buffer(AVFilterLink *link, int nb_samples)", "{", "    AVFrame *ret = NULL;"], "SrcStart": 79}, {"FileMD5": "2886ee59333d5aa0474968134c674844.c", "FileName": "libavfilter/audio.c", "Line": 94, "Tip": "Function <b>ff_default_get_audio_buffer</b> executes and stores the return value to <b>ret</b> (<b>ret</b> can be null)", "SrcLines": ["", "    if (link->dstpad->get_audio_buffer)", "        ret = link->dstpad->get_audio_buffer(link, nb_samples);", "", "    if (!ret)", "        ret = ff_default_get_audio_buffer(link, nb_samples);", "", "    return ret;", "}"], "SrcStart": 89}, {"FileMD5": "2886ee59333d5aa0474968134c674844.c", "FileName": "libavfilter/audio.c", "Line": 96, "Tip": "Return <b>ret</b> to caller, which can be null (The return value can be null)", "SrcLines": ["        ret = link->dstpad->get_audio_buffer(link, nb_samples);", "", "    if (!ret)", "        ret = ff_default_get_audio_buffer(link, nb_samples);", "", "    return ret;", "}"], "SrcStart": 91}, {"FileMD5": "2e37a4b6191e2d9e58d6ad6af80cb600.c", "FileName": "libavfilter/af_mcompand.c", "Line": 599, "Tip": "Store the return value of function <b>ff_get_audio_buffer</b> to <b>s-&gt;band_buf1</b>", "SrcLines": ["    if (s->band_samples < in->nb_samples) {", "        av_frame_free(&s->band_buf1);", "        av_frame_free(&s->band_buf2);", "        av_frame_free(&s->band_buf3);", "", "        s->band_buf1 = ff_get_audio_buffer(outlink, in->nb_samples);", "        s->band_buf2 = ff_get_audio_buffer(outlink, in->nb_samples);", "        s->band_buf3 = ff_get_audio_buffer(outlink, in->nb_samples);", "        s->band_samples = in->nb_samples;", "    }"], "SrcStart": 594}, {"FileMD5": "2e37a4b6191e2d9e58d6ad6af80cb600.c", "FileName": "libavfilter/af_mcompand.c", "Line": 611, "Tip": "Select the false branch at this point (<b>s-&gt;bands[i].topfreq!=0</b> is false)", "SrcLines": ["        double *a, *dst = (double *)out->extended_data[ch];", "", "        for (band = 0, abuf = in, bbuf = s->band_buf2, cbuf = s->band_buf1; band < s->nb_bands; band++) {", "            CompBand *b = &s->bands[band];", "", "            if (b->topfreq) {", "                crossover(ch, &b->filter, (double *)abuf->extended_data[ch],", "                          (double *)bbuf->extended_data[ch], (double *)cbuf->extended_data[ch], in->nb_samples);", "            } else {", "                bbuf = abuf;"], "SrcStart": 606}, {"FileMD5": "2e37a4b6191e2d9e58d6ad6af80cb600.c", "FileName": "libavfilter/af_mcompand.c", "Line": 619, "Tip": "Select the false branch at this point (<b>abuf==in</b> is false)", "SrcLines": ["            } else {", "                bbuf = abuf;", "                abuf = cbuf;", "            }", "", "            if (abuf == in)", "                abuf = s->band_buf3;", "            mcompand_channel(s, b, (double *)bbuf->extended_data[ch], (double *)abuf->extended_data[ch], out->nb_samples, ch);", "            a = (double *)abuf->extended_data[ch];", "            for (i = 0; i < out->nb_samples; i++) {"], "SrcStart": 614}, {"FileMD5": "2e37a4b6191e2d9e58d6ad6af80cb600.c", "FileName": "libavfilter/af_mcompand.c", "Line": 622, "Tip": "Load value from <b>cbuf-&gt;extended_data</b>", "SrcLines": ["            }", "", "            if (abuf == in)", "                abuf = s->band_buf3;", "            mcompand_channel(s, b, (double *)bbuf->extended_data[ch], (double *)abuf->extended_data[ch], out->nb_samples, ch);", "            a = (double *)abuf->extended_data[ch];", "            for (i = 0; i < out->nb_samples; i++) {", "                dst[i] += a[i];", "            }", ""], "SrcStart": 617}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/af_mcompand.c", "Line": 622}, {"HashID": "558e30069eb6e52deb24c937fb18cfd2", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1518, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1513}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1513, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1508}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1502, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>*(rframe)</b> to null, where <b>rframe</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    if (!ff_inlink_check_available_frame(link))", "        return 0;", "", "    if (link->fifo.samples_skipped) {", "        frame = ff_framequeue_peek(&link->fifo, 0);", "        return ff_inlink_consume_samples(link, frame->nb_samples, frame->nb_samples, rframe);", "    }", "", "    frame = ff_framequeue_take(&link->fifo);", "    consume_update(link, frame);"], "SrcStart": 1497}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1493, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    link->dst->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "    link->frame_count_out++;", "}", "", "int ff_inlink_consume_frame(AVFilterLink *link, AVFrame **rframe)", "{", "    AVFrame *frame;", "", "    *rframe = NULL;", "    if (!ff_inlink_check_available_frame(link))"], "SrcStart": 1488}, {"FileMD5": "ab36f1e22ef250b5d37a2f910c407ca7.c", "FileName": "libavfilter/vf_xfade.c", "Line": 1885, "Tip": "Function <b>ff_inlink_consume_frame</b> modifies the value <b>in</b> to null, where <b>&amp;(in)</b> is used as the 2nd parameter (<b>rframe</b>)", "SrcLines": ["            }", "            s->pts = s->xf[0]->pts;", "            if (s->first_pts + s->offset_pts > s->xf[0]->pts) {", "                s->xf[0] = NULL;", "                s->need_second = 0;", "                ff_inlink_consume_frame(ctx->inputs[0], &in);", "                return ff_filter_frame(outlink, in);", "            }", "", "            s->need_second = 1;"], "SrcStart": 1880}, {"FileMD5": "ab36f1e22ef250b5d37a2f910c407ca7.c", "FileName": "libavfilter/vf_xfade.c", "Line": 1886, "Tip": "<b>in</b> is used as the 2nd parameter in function <b>ff_filter_frame</b> (<b>in</b> can be null)", "SrcLines": ["            s->pts = s->xf[0]->pts;", "            if (s->first_pts + s->offset_pts > s->xf[0]->pts) {", "                s->xf[0] = NULL;", "                s->need_second = 0;", "                ff_inlink_consume_frame(ctx->inputs[0], &in);", "                return ff_filter_frame(outlink, in);", "            }", "", "            s->need_second = 1;", "        }"], "SrcStart": 1881}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1097, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_tlog_ref</b> (<b>frame</b> can be null)", "SrcLines": ["}", "", "int ff_filter_frame(AVFilterLink *link, AVFrame *frame)", "{", "    int ret;", "    FF_TPRINTF_START(NULL, filter_frame); ff_tlog_link(NULL, link, 1); ff_tlog(NULL, \" \"); ff_tlog_ref(NULL, frame, 1);", "", "    /* Consistency checks */", "    if (link->type == AVMEDIA_TYPE_VIDEO) {", "        if (strcmp(link->dst->filter->name, \"buffersink\") &&"], "SrcStart": 1092}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 58, "Tip": "Load value from <b>ref-&gt;width</b>", "SrcLines": ["            \"ref[%p buf:%p data:%p linesize[%d, %d, %d, %d] pts:%\"PRId64\" pos:%\"PRId64,", "            ref, ref->buf, ref->data[0],", "            ref->linesize[0], ref->linesize[1], ref->linesize[2], ref->linesize[3],", "            ref->pts, ref->pkt_pos);", "", "    if (ref->width) {", "        ff_tlog(ctx, \" a:%d/%d s:%dx%d i:%c iskey:%d type:%c\",", "                ref->sample_aspect_ratio.num, ref->sample_aspect_ratio.den,", "                ref->width, ref->height,", "                !ref->interlaced_frame     ? 'P' :         /* Progressive  */"], "SrcStart": 53}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 58}, {"HashID": "4686b1bb9f7bc4d52571a0055b3b8044", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1518, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1513}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1513, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1508}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1220, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    AVFilterContext *dst = link->dst;", "    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);"], "SrcStart": 1215}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1233, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1228}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1085, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))", "        filter_frame = default_filter_frame;", "    ret = filter_frame(link, frame);", "    link->frame_count_out++;", "    return ret;", "", "fail:"], "SrcStart": 1080}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1060, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    return pads[pad_idx].type;", "}", "", "static int default_filter_frame(AVFilterLink *link, AVFrame *frame)", "{", "    return ff_filter_frame(link->dst->outputs[0], frame);", "}", "", "static int ff_filter_frame_framed(AVFilterLink *link, AVFrame *frame)", "{"], "SrcStart": 1055}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1111, "Tip": "Load value from <b>frame</b>", "SrcLines": ["            av_assert1(frame->format                 == link->format);", "            av_assert1(frame->width               == link->w);", "            av_assert1(frame->height               == link->h);", "        }", "    } else {", "        if (frame->format != link->format) {", "            av_log(link->dst, AV_LOG_ERROR, \"Format change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channels != link->channels) {"], "SrcStart": 1106}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1111, "Tip": "Load value from <b>frame-&gt;format</b>", "SrcLines": ["            av_assert1(frame->format                 == link->format);", "            av_assert1(frame->width               == link->w);", "            av_assert1(frame->height               == link->h);", "        }", "    } else {", "        if (frame->format != link->format) {", "            av_log(link->dst, AV_LOG_ERROR, \"Format change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channels != link->channels) {"], "SrcStart": 1106}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1111}, {"HashID": "779a5d0340932ce42851d8faf7fd0ff7", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1518, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1513}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1513, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1508}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1220, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    AVFilterContext *dst = link->dst;", "    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);"], "SrcStart": 1215}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1233, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1228}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1085, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))", "        filter_frame = default_filter_frame;", "    ret = filter_frame(link, frame);", "    link->frame_count_out++;", "    return ret;", "", "fail:"], "SrcStart": 1080}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1060, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    return pads[pad_idx].type;", "}", "", "static int default_filter_frame(AVFilterLink *link, AVFrame *frame)", "{", "    return ff_filter_frame(link->dst->outputs[0], frame);", "}", "", "static int ff_filter_frame_framed(AVFilterLink *link, AVFrame *frame)", "{"], "SrcStart": 1055}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1119, "Tip": "Load value from <b>frame</b>", "SrcLines": ["        }", "        if (frame->channels != link->channels) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel count change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channel_layout != link->channel_layout) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel layout change is not supported\\n\");", "            goto error;", "        }", "        if (frame->sample_rate != link->sample_rate) {"], "SrcStart": 1114}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1119, "Tip": "Load value from <b>frame-&gt;channel_layout</b>", "SrcLines": ["        }", "        if (frame->channels != link->channels) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel count change is not supported\\n\");", "            goto error;", "        }", "        if (frame->channel_layout != link->channel_layout) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel layout change is not supported\\n\");", "            goto error;", "        }", "        if (frame->sample_rate != link->sample_rate) {"], "SrcStart": 1114}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1119}, {"HashID": "2854179f7e6427ec4ebc621c1cd32642", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1518, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1513}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1513, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1508}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1220, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    AVFilterContext *dst = link->dst;", "    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);"], "SrcStart": 1215}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1233, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1228}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1085, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))", "        filter_frame = default_filter_frame;", "    ret = filter_frame(link, frame);", "    link->frame_count_out++;", "    return ret;", "", "fail:"], "SrcStart": 1080}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1060, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame</b> (<b>frame</b> can be null)", "SrcLines": ["    return pads[pad_idx].type;", "}", "", "static int default_filter_frame(AVFilterLink *link, AVFrame *frame)", "{", "    return ff_filter_frame(link->dst->outputs[0], frame);", "}", "", "static int ff_filter_frame_framed(AVFilterLink *link, AVFrame *frame)", "{"], "SrcStart": 1055}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1123, "Tip": "Load value from <b>frame</b>", "SrcLines": ["        }", "        if (frame->channel_layout != link->channel_layout) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel layout change is not supported\\n\");", "            goto error;", "        }", "        if (frame->sample_rate != link->sample_rate) {", "            av_log(link->dst, AV_LOG_ERROR, \"Sample rate change is not supported\\n\");", "            goto error;", "        }", "    }"], "SrcStart": 1118}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1123, "Tip": "Load value from <b>frame-&gt;sample_rate</b>", "SrcLines": ["        }", "        if (frame->channel_layout != link->channel_layout) {", "            av_log(link->dst, AV_LOG_ERROR, \"Channel layout change is not supported\\n\");", "            goto error;", "        }", "        if (frame->sample_rate != link->sample_rate) {", "            av_log(link->dst, AV_LOG_ERROR, \"Sample rate change is not supported\\n\");", "            goto error;", "        }", "    }"], "SrcStart": 1118}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1123}, {"HashID": "d2f746144805c1d059090d17680fa261", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1518, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1513}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1513, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1508}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1220, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    AVFilterContext *dst = link->dst;", "    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);"], "SrcStart": 1215}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1233, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1228}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1079, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_inlink_process_commands</b> (<b>frame</b> can be null)", "SrcLines": ["        ret = ff_inlink_make_frame_writable(link, &frame);", "        if (ret < 0)", "            goto fail;", "    }", "", "    ff_inlink_process_commands(link, frame);", "    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))"], "SrcStart": 1074}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1589, "Tip": "Load value from <b>frame-&gt;pts</b>", "SrcLines": ["", "int ff_inlink_process_commands(AVFilterLink *link, const AVFrame *frame)", "{", "    AVFilterCommand *cmd = link->dst->command_queue;", "", "    while(cmd && cmd->time <= frame->pts * av_q2d(link->time_base)){", "        av_log(link->dst, AV_LOG_DEBUG,", "               \"Processing command time:%f command:%s arg:%s\\n\",", "               cmd->time, cmd->command, cmd->arg);", "        avfilter_process_command(link->dst, cmd->command, cmd->arg, 0, 0, cmd->flags);"], "SrcStart": 1584}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1589}, {"HashID": "c4380182297bf50591835c9991bec75c", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1518, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);", "    *rframe = NULL;", "    if (!ff_inlink_check_available_samples(link, min))", "        return 0;", "    if (link->status_in)", "        min = FFMIN(min, ff_framequeue_queued_samples(&link->fifo));"], "SrcStart": 1513}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1513, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    return 1;", "}", "", "int ff_inlink_consume_samples(AVFilterLink *link, unsigned min, unsigned max,", "                            AVFrame **rframe)", "{", "    AVFrame *frame;", "    int ret;", "", "    av_assert1(min);"], "SrcStart": 1508}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1220, "Tip": "Function <b>ff_inlink_consume_samples</b> modifies the value <b>frame</b> to null, where <b>&amp;(frame)</b> is used as the 4th parameter (<b>rframe</b>)", "SrcLines": ["    AVFilterContext *dst = link->dst;", "    int ret;", "", "    av_assert1(ff_framequeue_queued_frames(&link->fifo));", "    ret = link->min_samples ?", "          ff_inlink_consume_samples(link, link->min_samples, link->max_samples, &frame) :", "          ff_inlink_consume_frame(link, &frame);", "    av_assert1(ret);", "    if (ret < 0) {", "        av_assert1(!frame);"], "SrcStart": 1215}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1233, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_filter_frame_framed</b> (<b>frame</b> can be null)", "SrcLines": ["       produce one or more: unblock its outputs. */", "    filter_unblock(dst);", "    /* AVFilterPad.filter_frame() expect frame_count_out to have the value", "       before the frame; ff_filter_frame_framed() will re-increment it. */", "    link->frame_count_out--;", "    ret = ff_filter_frame_framed(link, frame);", "    if (ret < 0 && ret != link->status_out) {", "        ff_avfilter_link_set_out_status(link, ret, AV_NOPTS_VALUE);", "    } else {", "        /* Run once again, to see if several frames were available, or if"], "SrcStart": 1228}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1080, "Tip": "<b>frame</b> is used as the 2nd parameter in function <b>ff_inlink_evaluate_timeline_at_frame</b> (<b>frame</b> can be null)", "SrcLines": ["        if (ret < 0)", "            goto fail;", "    }", "", "    ff_inlink_process_commands(link, frame);", "    dstctx->is_disabled = !ff_inlink_evaluate_timeline_at_frame(link, frame);", "", "    if (dstctx->is_disabled &&", "        (dstctx->filter->flags & AVFILTER_FLAG_SUPPORT_TIMELINE_GENERIC))", "        filter_frame = default_filter_frame;"], "SrcStart": 1075}, {"FileMD5": "2135c2eb8415b2c91141823103973221.c", "FileName": "libavfilter/avfilter.c", "Line": 1604, "Tip": "Load value from <b>frame-&gt;pkt_pos</b> and assign to <b>pos</b>", "SrcLines": ["", "int ff_inlink_evaluate_timeline_at_frame(AVFilterLink *link, const AVFrame *frame)", "{", "    AVFilterContext *dstctx = link->dst;", "    int64_t pts = frame->pts;", "    int64_t pos = frame->pkt_pos;", "", "    if (!dstctx->enable_str)", "        return 1;", ""], "SrcStart": 1599}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/avfilter.c", "Line": 1604}, {"HashID": "6d7c0d4632a5abc91b4e17555b32dfcd", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "7e69d33baeb7d35bd78528fe21180640.c", "FileName": "libavfilter/f_metadata.c", "Line": 265, "Tip": "Store <b>null</b> to <b>s-&gt;avio_context</b>", "SrcLines": ["        s->print = print_file;", "    } else {", "        s->print = print_log;", "    }", "", "    s->avio_context = NULL;", "    if (s->file_str) {", "        if (!strcmp(\"-\", s->file_str)) {", "            ret = avio_open(&s->avio_context, \"pipe:1\", AVIO_FLAG_WRITE);", "        } else {"], "SrcStart": 260}, {"FileMD5": "7e69d33baeb7d35bd78528fe21180640.c", "FileName": "libavfilter/f_metadata.c", "Line": 282, "Tip": "Load value from <b>s-&gt;avio_context</b>", "SrcLines": ["                   s->file_str, buf);", "            return ret;", "        }", "", "        if (s->direct)", "            s->avio_context->direct = AVIO_FLAG_DIRECT;", "    }", "", "    return 0;", "}"], "SrcStart": 277}, {"FileMD5": "7e69d33baeb7d35bd78528fe21180640.c", "FileName": "libavfilter/f_metadata.c", "Line": 282, "Tip": "Store <b>32768</b> to <b>s-&gt;avio_context-&gt;direct</b>", "SrcLines": ["                   s->file_str, buf);", "            return ret;", "        }", "", "        if (s->direct)", "            s->avio_context->direct = AVIO_FLAG_DIRECT;", "    }", "", "    return 0;", "}"], "SrcStart": 277}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/f_metadata.c", "Line": 282}, {"HashID": "b62f4aec2c1b374e7012bd125b0d66ca", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "d14766da37af90e60fb96aa3cbdc058f.c", "FileName": "libavfilter/framesync.c", "Line": 262, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;", "", "    if (!fs->in[in].frame) {", "        *rframe = NULL;", "        return 0;", "    }", "    frame = fs->in[in].frame;", "    if (get) {"], "SrcStart": 257}, {"FileMD5": "d14766da37af90e60fb96aa3cbdc058f.c", "FileName": "libavfilter/framesync.c", "Line": 255, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    fs->in[in].have_next  = 1;", "}", "", "int ff_framesync_get_frame(FFFrameSync *fs, unsigned in, AVFrame **rframe,", "                            unsigned get)", "{", "    AVFrame *frame;", "    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;"], "SrcStart": 250}, {"FileMD5": "3feec83c295ea0b12c06a8df33660237.c", "FileName": "libavfilter/f_streamselect.c", "Line": 61, "Tip": "Function <b>ff_framesync_get_frame</b> modifies the value <b>in[i]</b> to null, where <b>&amp;(in[i])</b> is used as the 3rd parameter (<b>rframe</b>)", "SrcLines": ["    StreamSelectContext *s = fs->opaque;", "    AVFrame **in = s->frames;", "    int i, j, ret = 0, have_out = 0;", "", "    for (i = 0; i < ctx->nb_inputs; i++) {", "        if ((ret = ff_framesync_get_frame(&s->fs, i, &in[i], 0)) < 0)", "            return ret;", "    }", "", "    for (j = 0; j < ctx->nb_inputs; j++) {"], "SrcStart": 56}, {"FileMD5": "3feec83c295ea0b12c06a8df33660237.c", "FileName": "libavfilter/f_streamselect.c", "Line": 70, "Tip": "Load value from <b>in[i]</b>", "SrcLines": ["    for (j = 0; j < ctx->nb_inputs; j++) {", "        for (i = 0; i < s->nb_map; i++) {", "            if (s->map[i] == j) {", "                AVFrame *out;", "", "                if (s->is_audio && s->last_pts[j] == in[j]->pts &&", "                    ctx->outputs[i]->frame_count_in > 0)", "                    continue;", "                out = av_frame_clone(in[j]);", "                if (!out)"], "SrcStart": 65}, {"FileMD5": "3feec83c295ea0b12c06a8df33660237.c", "FileName": "libavfilter/f_streamselect.c", "Line": 70, "Tip": "Load value from <b>in[i]-&gt;pts</b>", "SrcLines": ["    for (j = 0; j < ctx->nb_inputs; j++) {", "        for (i = 0; i < s->nb_map; i++) {", "            if (s->map[i] == j) {", "                AVFrame *out;", "", "                if (s->is_audio && s->last_pts[j] == in[j]->pts &&", "                    ctx->outputs[i]->frame_count_in > 0)", "                    continue;", "                out = av_frame_clone(in[j]);", "                if (!out)"], "SrcStart": 65}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/f_streamselect.c", "Line": 70}, {"HashID": "e64428a2fe76579e36ab87ef5e7320e3", "ReportChecker": "PSA NULL Pointer Dereference Checker", "Score": 60, "Steps": [{"FileMD5": "d14766da37af90e60fb96aa3cbdc058f.c", "FileName": "libavfilter/framesync.c", "Line": 262, "Tip": "Store <b>null</b> to <b>rframe</b>", "SrcLines": ["    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;", "", "    if (!fs->in[in].frame) {", "        *rframe = NULL;", "        return 0;", "    }", "    frame = fs->in[in].frame;", "    if (get) {"], "SrcStart": 257}, {"FileMD5": "d14766da37af90e60fb96aa3cbdc058f.c", "FileName": "libavfilter/framesync.c", "Line": 255, "Tip": "Program reaches the return point, modifying the value <b>*(rframe)</b> to null", "SrcLines": ["    fs->in[in].have_next  = 1;", "}", "", "int ff_framesync_get_frame(FFFrameSync *fs, unsigned in, AVFrame **rframe,", "                            unsigned get)", "{", "    AVFrame *frame;", "    unsigned need_copy = 0, i;", "    int64_t pts_next;", "    int ret;"], "SrcStart": 250}, {"FileMD5": "3feec83c295ea0b12c06a8df33660237.c", "FileName": "libavfilter/f_streamselect.c", "Line": 61, "Tip": "Function <b>ff_framesync_get_frame</b> modifies the value <b>in[i]</b> to null, where <b>&amp;(in[i])</b> is used as the 3rd parameter (<b>rframe</b>)", "SrcLines": ["    StreamSelectContext *s = fs->opaque;", "    AVFrame **in = s->frames;", "    int i, j, ret = 0, have_out = 0;", "", "    for (i = 0; i < ctx->nb_inputs; i++) {", "        if ((ret = ff_framesync_get_frame(&s->fs, i, &in[i], 0)) < 0)", "            return ret;", "    }", "", "    for (j = 0; j < ctx->nb_inputs; j++) {"], "SrcStart": 56}, {"FileMD5": "3feec83c295ea0b12c06a8df33660237.c", "FileName": "libavfilter/f_streamselect.c", "Line": 78, "Tip": "Load value from <b>in[i]</b>", "SrcLines": ["                out = av_frame_clone(in[j]);", "                if (!out)", "                    return AVERROR(ENOMEM);", "", "                out->pts = av_rescale_q(s->fs.pts, s->fs.time_base, ctx->outputs[i]->time_base);", "                s->last_pts[j] = in[j]->pts;", "                ret = ff_filter_frame(ctx->outputs[i], out);", "                have_out = 1;", "                if (ret < 0)", "                    return ret;"], "SrcStart": 73}, {"FileMD5": "3feec83c295ea0b12c06a8df33660237.c", "FileName": "libavfilter/f_streamselect.c", "Line": 78, "Tip": "Load value from <b>in[i]-&gt;pts</b>", "SrcLines": ["                out = av_frame_clone(in[j]);", "                if (!out)", "                    return AVERROR(ENOMEM);", "", "                out->pts = av_rescale_q(s->fs.pts, s->fs.time_base, ctx->outputs[i]->time_base);", "                s->last_pts[j] = in[j]->pts;", "                ret = ff_filter_frame(ctx->outputs[i], out);", "                have_out = 1;", "                if (ret < 0)", "                    return ret;"], "SrcStart": 73}], "Review": 80, "Time": 1629219860000, "DocID": "PE0001", "File": "libavfilter/f_streamselect.c", "Line": 78}]}, "start": 21, "end": 30, "page": 4, "total_pages": 8, "language": "en"}